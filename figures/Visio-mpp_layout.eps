%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Visio-mpp_layout.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: leifei
%%CreationDate: 2018/4/27, 10:46:05
%%BoundingBox: 0 0 564 200
%%HiResBoundingBox: 0 0 563.6796 199.3560
%%CropBox: 0 0 563.6796 199.3560
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1152 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-04-11T11:20:53+08:00"
   xmp:CreatorTool=""
   xmp:ModifyDate="2018-04-11T21:41:42+08:00"
   xmp:MetadataDate="2018-04-11T21:41:42+08:00"
   pdf:Keywords=""
   pdf:Producer="福昕PDF打印机 版本 7.2.0.0424"
   xmpMM:DocumentID="uuid:28ee246d-61ba-46b4-bcda-7298132dc1bf"
   xmpMM:InstanceID="uuid:86b8d7aa-9bbc-4f77-81c8-2729ba9875c3">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -199.356 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 199.356 li
563.68 199.356 li
563.68 0 li
cp
clp
[1 0 0 1 -22.3055 0 ]ct
85.08 67.181 mo
85.08 35.141 72.36 9.10098 56.76 9.10098 cv
41.04 9.10098 28.44 35.141 28.44 67.181 cv
28.44 99.341 41.04 125.381 56.76 125.381 cv
72.36 125.381 85.08 99.341 85.08 67.181 cv
cp
false sop
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
1.2 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
85.08 67.181 mo
85.08 35.141 72.36 9.10098 56.76 9.10098 cv
41.04 9.10098 28.44 35.141 28.44 67.181 cv
28.44 99.341 41.04 125.381 56.76 125.381 cv
72.36 125.381 85.08 99.341 85.08 67.181 cv
.75021 .679683 .670222 .90164 cmyk
@
89.04 36.941 mo
180.12 36.941 li
180.12 196.301 li
89.04 196.301 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
89.04 196.301 mo
180.12 196.301 li
180.12 36.941 li
89.04 36.941 li
89.04 196.301 li
cp
.75021 .679683 .670222 .90164 cmyk
@
191.52 36.941 mo
282.6 36.941 li
282.6 196.301 li
191.52 196.301 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
191.52 196.301 mo
282.6 196.301 li
282.6 36.941 li
191.52 36.941 li
191.52 196.301 li
cp
.75021 .679683 .670222 .90164 cmyk
@
290.16 36.941 mo
381.24 36.941 li
381.24 196.301 li
290.16 196.301 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
290.16 196.301 mo
381.24 196.301 li
381.24 36.941 li
290.16 36.941 li
290.16 196.301 li
cp
.75021 .679683 .670222 .90164 cmyk
@
388.8 36.941 mo
479.88 36.941 li
479.88 196.301 li
388.8 196.301 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
388.8 196.301 mo
479.88 196.301 li
479.88 36.941 li
388.8 36.941 li
388.8 196.301 li
cp
.75021 .679683 .670222 .90164 cmyk
@
491.28 36.941 mo
582.36 36.941 li
582.36 196.301 li
491.28 196.301 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
491.28 196.301 mo
582.36 196.301 li
582.36 36.941 li
491.28 36.941 li
491.28 196.301 li
cp
.75021 .679683 .670222 .90164 cmyk
@
115.8 75.341 mo
115.8 161.741 li
@
106.08 118.541 mo
106.08 113.141 110.4 108.821 115.8 108.821 cv
121.2 108.821 125.52 113.141 125.52 118.541 cv
125.52 118.541 li
125.52 123.941 121.2 128.261 115.8 128.261 cv
110.4 128.261 106.08 123.941 106.08 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
106.08 118.541 mo
106.08 113.141 110.4 108.821 115.8 108.821 cv
121.2 108.821 125.52 113.141 125.52 118.541 cv
125.52 118.541 li
125.52 123.941 121.2 128.261 115.8 128.261 cv
110.4 128.261 106.08 123.941 106.08 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
106.08 91.541 mo
106.08 86.141 110.4 81.821 115.8 81.821 cv
121.2 81.821 125.52 86.141 125.52 91.541 cv
125.52 91.541 li
125.52 96.941 121.2 101.261 115.8 101.261 cv
110.4 101.261 106.08 96.941 106.08 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
106.08 91.541 mo
106.08 86.141 110.4 81.821 115.8 81.821 cv
121.2 81.821 125.52 86.141 125.52 91.541 cv
125.52 91.541 li
125.52 96.941 121.2 101.261 115.8 101.261 cv
110.4 101.261 106.08 96.941 106.08 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
106.08 145.541 mo
106.08 140.141 110.4 135.821 115.8 135.821 cv
121.2 135.821 125.52 140.141 125.52 145.541 cv
125.52 145.541 li
125.52 150.941 121.2 155.261 115.8 155.261 cv
110.4 155.261 106.08 150.941 106.08 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
106.08 145.541 mo
106.08 140.141 110.4 135.821 115.8 135.821 cv
121.2 135.821 125.52 140.141 125.52 145.541 cv
125.52 145.541 li
125.52 150.941 121.2 155.261 115.8 155.261 cv
110.4 155.261 106.08 150.941 106.08 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
106.08 65.621 mo
106.08 60.221 110.4 55.901 115.8 55.901 cv
121.2 55.901 125.52 60.221 125.52 65.621 cv
125.52 65.621 li
125.52 71.021 121.2 75.341 115.8 75.341 cv
110.4 75.341 106.08 71.021 106.08 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
106.08 65.621 mo
106.08 60.221 110.4 55.901 115.8 55.901 cv
121.2 55.901 125.52 60.221 125.52 65.621 cv
125.52 65.621 li
125.52 71.021 121.2 75.341 115.8 75.341 cv
110.4 75.341 106.08 71.021 106.08 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
106.08 171.461 mo
106.08 166.061 110.4 161.741 115.8 161.741 cv
121.2 161.741 125.52 166.061 125.52 171.461 cv
125.52 171.461 li
125.52 176.861 121.2 181.181 115.8 181.181 cv
110.4 181.181 106.08 176.861 106.08 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
106.08 171.461 mo
106.08 166.061 110.4 161.741 115.8 161.741 cv
121.2 161.741 125.52 166.061 125.52 171.461 cv
125.52 171.461 li
125.52 176.861 121.2 181.181 115.8 181.181 cv
110.4 181.181 106.08 176.861 106.08 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
106.08 65.621 mo
99.48 65.621 94.2 89.381 94.2 118.541 cv
94.2 147.821 99.48 171.461 106.08 171.461 cv
106.08 171.461 li
@
163.32 118.541 mo
163.32 123.941 159 128.261 153.72 128.381 cv
148.32 128.381 143.88 124.061 143.88 118.661 cv
143.88 118.661 li
143.88 113.261 148.2 108.941 153.48 108.941 cv
158.88 108.821 163.32 113.141 163.32 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
163.32 118.541 mo
163.32 123.941 159 128.261 153.72 128.381 cv
148.32 128.381 143.88 124.061 143.88 118.661 cv
143.88 118.661 li
143.88 113.261 148.2 108.941 153.48 108.941 cv
158.88 108.821 163.32 113.141 163.32 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
163.44 145.541 mo
163.56 150.941 159.24 155.261 153.84 155.261 cv
148.44 155.381 144.12 151.061 144.12 145.661 cv
144.12 145.661 li
144 140.261 148.32 135.941 153.72 135.941 cv
159.12 135.821 163.44 140.141 163.44 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
163.44 145.541 mo
163.56 150.941 159.24 155.261 153.84 155.261 cv
148.44 155.381 144.12 151.061 144.12 145.661 cv
144.12 145.661 li
144 140.261 148.32 135.941 153.72 135.941 cv
159.12 135.821 163.44 140.141 163.44 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
163.08 91.541 mo
163.2 96.941 158.88 101.261 153.48 101.381 cv
148.08 101.381 143.76 97.061 143.64 91.661 cv
143.64 91.661 li
143.64 86.261 147.96 81.941 153.36 81.941 cv
158.76 81.821 163.08 86.141 163.08 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
163.08 91.541 mo
163.2 96.941 158.88 101.261 153.48 101.381 cv
148.08 101.381 143.76 97.061 143.64 91.661 cv
143.64 91.661 li
143.64 86.261 147.96 81.941 153.36 81.941 cv
158.76 81.821 163.08 86.141 163.08 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
163.68 171.461 mo
163.68 176.861 159.36 181.181 154.08 181.181 cv
148.68 181.301 144.24 176.981 144.24 171.581 cv
144.24 171.581 li
144.24 166.181 148.56 161.861 153.84 161.741 cv
159.24 161.741 163.68 166.061 163.68 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
163.68 171.461 mo
163.68 176.861 159.36 181.181 154.08 181.181 cv
148.68 181.301 144.24 176.981 144.24 171.581 cv
144.24 171.581 li
144.24 166.181 148.56 161.861 153.84 161.741 cv
159.24 161.741 163.68 166.061 163.68 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
162.96 65.621 mo
162.96 71.021 158.64 75.341 153.24 75.461 cv
147.96 75.461 143.52 71.141 143.52 65.741 cv
143.52 65.741 li
143.52 60.341 147.84 56.021 153.12 56.021 cv
158.52 55.901 162.96 60.221 162.96 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
162.96 65.621 mo
162.96 71.021 158.64 75.341 153.24 75.461 cv
147.96 75.461 143.52 71.141 143.52 65.741 cv
143.52 65.741 li
143.52 60.341 147.84 56.021 153.12 56.021 cv
158.52 55.901 162.96 60.221 162.96 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
163.68 171.461 mo
168.48 171.461 172.2 159.341 172.08 144.341 cv
172.08 130.061 168.12 118.541 163.32 118.541 cv
163.32 118.541 li
@
163.44 145.541 mo
168.24 145.541 172.08 133.421 171.96 118.421 cv
171.84 103.541 167.88 91.541 163.08 91.541 cv
163.08 91.541 li
@
163.32 118.541 mo
168.12 118.541 171.84 104.021 171.72 86.141 cv
171.6 74.741 167.76 65.621 162.96 65.621 cv
162.96 65.621 li
@
163.68 171.461 mo
170.88 171.341 176.52 152.501 176.4 129.221 cv
176.16 108.341 170.28 91.541 163.08 91.541 cv
163.08 91.541 li
@
163.44 145.541 mo
170.64 145.541 176.28 125.621 176.16 101.141 cv
176.04 81.461 170.04 65.621 162.96 65.621 cv
162.96 65.621 li
@
130.68 95.261 mo
139.68 133.781 li
@
130.68 107.741 mo
139.8 146.141 li
@
130.68 120.701 mo
139.44 95.261 li
@
130.68 133.661 mo
139.44 107.741 li
@
130.68 146.141 mo
139.56 120.701 li
@
58.08 101.741 mo
58.08 38.381 li
@
94.8 59.501 mo
72.72 50.381 li
@
81.12 49.781 mo
72.72 50.381 li
78.24 56.621 li
@
94.8 79.661 mo
72.72 87.101 li
@
78.6 81.221 mo
72.72 87.101 li
81 88.181 li
@
48.96 101.741 mo
67.32 101.741 li
67.32 114.581 li
48.96 114.581 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
67.32 101.741 mo
48.96 101.741 li
48.96 114.581 li
67.32 114.581 li
67.32 101.741 li
cp
.75021 .679683 .670222 .90164 cmyk
@
48.96 82.421 mo
67.32 82.421 li
67.32 95.261 li
48.96 95.261 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
67.32 82.421 mo
48.96 82.421 li
48.96 95.261 li
67.32 95.261 li
67.32 82.421 li
cp
.75021 .679683 .670222 .90164 cmyk
@
48.96 64.061 mo
67.32 64.061 li
67.32 76.901 li
48.96 76.901 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
67.32 64.061 mo
48.96 64.061 li
48.96 76.901 li
67.32 76.901 li
67.32 64.061 li
cp
.75021 .679683 .670222 .90164 cmyk
@
48.96 44.861 mo
67.32 44.861 li
67.32 57.701 li
48.96 57.701 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
67.32 44.861 mo
48.96 44.861 li
48.96 57.701 li
67.32 57.701 li
67.32 44.861 li
cp
.75021 .679683 .670222 .90164 cmyk
@
48.96 25.541 mo
67.32 25.541 li
67.32 38.381 li
48.96 38.381 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
67.32 25.541 mo
48.96 25.541 li
48.96 38.381 li
67.32 38.381 li
67.32 25.541 li
cp
.75021 .679683 .670222 .90164 cmyk
@
48.96 107.741 mo
43.8 107.741 39.72 90.221 39.72 68.741 cv
39.72 48.461 43.8 32.021 48.96 32.021 cv
48.96 32.021 li
@
218.28 75.341 mo
218.28 161.741 li
@
208.56 118.541 mo
208.56 113.141 212.88 108.821 218.28 108.821 cv
223.68 108.821 228 113.141 228 118.541 cv
228 118.541 li
228 123.941 223.68 128.261 218.28 128.261 cv
212.88 128.261 208.56 123.941 208.56 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.56 118.541 mo
208.56 113.141 212.88 108.821 218.28 108.821 cv
223.68 108.821 228 113.141 228 118.541 cv
228 118.541 li
228 123.941 223.68 128.261 218.28 128.261 cv
212.88 128.261 208.56 123.941 208.56 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
208.56 91.541 mo
208.56 86.141 212.88 81.821 218.28 81.821 cv
223.68 81.821 228 86.141 228 91.541 cv
228 91.541 li
228 96.941 223.68 101.261 218.28 101.261 cv
212.88 101.261 208.56 96.941 208.56 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.56 91.541 mo
208.56 86.141 212.88 81.821 218.28 81.821 cv
223.68 81.821 228 86.141 228 91.541 cv
228 91.541 li
228 96.941 223.68 101.261 218.28 101.261 cv
212.88 101.261 208.56 96.941 208.56 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
208.56 145.541 mo
208.56 140.141 212.88 135.821 218.28 135.821 cv
223.68 135.821 228 140.141 228 145.541 cv
228 145.541 li
228 150.941 223.68 155.261 218.28 155.261 cv
212.88 155.261 208.56 150.941 208.56 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.56 145.541 mo
208.56 140.141 212.88 135.821 218.28 135.821 cv
223.68 135.821 228 140.141 228 145.541 cv
228 145.541 li
228 150.941 223.68 155.261 218.28 155.261 cv
212.88 155.261 208.56 150.941 208.56 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
208.56 65.621 mo
208.56 60.221 212.88 55.901 218.28 55.901 cv
223.68 55.901 228 60.221 228 65.621 cv
228 65.621 li
228 71.021 223.68 75.341 218.28 75.341 cv
212.88 75.341 208.56 71.021 208.56 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.56 65.621 mo
208.56 60.221 212.88 55.901 218.28 55.901 cv
223.68 55.901 228 60.221 228 65.621 cv
228 65.621 li
228 71.021 223.68 75.341 218.28 75.341 cv
212.88 75.341 208.56 71.021 208.56 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
208.56 171.461 mo
208.56 166.061 212.88 161.741 218.28 161.741 cv
223.68 161.741 228 166.061 228 171.461 cv
228 171.461 li
228 176.861 223.68 181.181 218.28 181.181 cv
212.88 181.181 208.56 176.861 208.56 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.56 171.461 mo
208.56 166.061 212.88 161.741 218.28 161.741 cv
223.68 161.741 228 166.061 228 171.461 cv
228 171.461 li
228 176.861 223.68 181.181 218.28 181.181 cv
212.88 181.181 208.56 176.861 208.56 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
208.56 65.621 mo
201.96 65.621 196.68 89.381 196.68 118.541 cv
196.68 147.821 201.96 171.461 208.56 171.461 cv
208.56 171.461 li
@
265.8 118.541 mo
265.8 123.941 261.48 128.261 256.08 128.381 cv
250.8 128.381 246.36 124.061 246.36 118.661 cv
246.36 118.661 li
246.24 113.261 250.56 108.941 255.96 108.941 cv
261.36 108.821 265.68 113.141 265.8 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
265.8 118.541 mo
265.8 123.941 261.48 128.261 256.08 128.381 cv
250.8 128.381 246.36 124.061 246.36 118.661 cv
246.36 118.661 li
246.24 113.261 250.56 108.941 255.96 108.941 cv
261.36 108.821 265.68 113.141 265.8 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
265.92 145.541 mo
266.04 150.941 261.72 155.261 256.32 155.261 cv
250.92 155.381 246.6 151.061 246.48 145.661 cv
246.48 145.661 li
246.48 140.261 250.8 135.941 256.2 135.941 cv
261.48 135.821 265.92 140.141 265.92 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
265.92 145.541 mo
266.04 150.941 261.72 155.261 256.32 155.261 cv
250.92 155.381 246.6 151.061 246.48 145.661 cv
246.48 145.661 li
246.48 140.261 250.8 135.941 256.2 135.941 cv
261.48 135.821 265.92 140.141 265.92 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
265.56 91.541 mo
265.56 96.941 261.24 101.261 255.96 101.381 cv
250.56 101.381 246.24 97.061 246.12 91.661 cv
246.12 91.661 li
246.12 86.261 250.44 81.941 255.84 81.941 cv
261.12 81.821 265.56 86.141 265.56 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
265.56 91.541 mo
265.56 96.941 261.24 101.261 255.96 101.381 cv
250.56 101.381 246.24 97.061 246.12 91.661 cv
246.12 91.661 li
246.12 86.261 250.44 81.941 255.84 81.941 cv
261.12 81.821 265.56 86.141 265.56 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
266.16 171.461 mo
266.16 176.861 261.84 181.181 256.44 181.181 cv
251.16 181.301 246.72 176.981 246.72 171.581 cv
246.72 171.581 li
246.72 166.181 251.04 161.861 256.32 161.741 cv
261.72 161.741 266.16 166.061 266.16 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
266.16 171.461 mo
266.16 176.861 261.84 181.181 256.44 181.181 cv
251.16 181.301 246.72 176.981 246.72 171.581 cv
246.72 171.581 li
246.72 166.181 251.04 161.861 256.32 161.741 cv
261.72 161.741 266.16 166.061 266.16 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
265.44 65.621 mo
265.44 71.021 261.12 75.341 255.72 75.461 cv
250.44 75.461 246 71.141 246 65.741 cv
246 65.741 li
245.88 60.341 250.2 56.021 255.6 56.021 cv
261 55.901 265.32 60.221 265.44 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
265.44 65.621 mo
265.44 71.021 261.12 75.341 255.72 75.461 cv
250.44 75.461 246 71.141 246 65.741 cv
246 65.741 li
245.88 60.341 250.2 56.021 255.6 56.021 cv
261 55.901 265.32 60.221 265.44 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
266.16 171.461 mo
270.96 171.461 274.68 159.341 274.56 144.341 cv
274.44 130.061 270.6 118.541 265.8 118.541 cv
265.8 118.541 li
@
265.92 145.541 mo
270.72 145.541 274.56 133.421 274.44 118.421 cv
274.32 103.541 270.36 91.541 265.56 91.541 cv
265.56 91.541 li
@
265.8 118.541 mo
270.6 118.541 274.32 104.021 274.2 86.141 cv
274.08 74.741 270.12 65.621 265.44 65.621 cv
265.44 65.621 li
@
266.16 171.461 mo
273.24 171.341 279 152.501 278.76 129.221 cv
278.64 108.341 272.76 91.541 265.56 91.541 cv
265.56 91.541 li
@
265.92 145.541 mo
273.12 145.541 278.76 125.621 278.64 101.141 cv
278.52 81.461 272.52 65.621 265.44 65.621 cv
265.44 65.621 li
@
233.16 95.261 mo
242.16 133.781 li
@
233.16 107.741 mo
242.16 146.141 li
@
233.16 120.701 mo
241.8 95.261 li
@
233.16 133.661 mo
241.92 107.741 li
@
233.16 146.141 mo
242.04 120.701 li
@
315.6 75.341 mo
315.6 161.621 li
@
305.88 118.541 mo
305.88 113.141 310.2 108.821 315.6 108.821 cv
321 108.821 325.32 113.141 325.32 118.541 cv
325.32 118.541 li
325.32 123.821 321 128.141 315.6 128.141 cv
310.2 128.141 305.88 123.821 305.88 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
305.88 118.541 mo
305.88 113.141 310.2 108.821 315.6 108.821 cv
321 108.821 325.32 113.141 325.32 118.541 cv
325.32 118.541 li
325.32 123.821 321 128.141 315.6 128.141 cv
310.2 128.141 305.88 123.821 305.88 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
305.88 91.541 mo
305.88 86.141 310.2 81.821 315.6 81.821 cv
321 81.821 325.32 86.141 325.32 91.541 cv
325.32 91.541 li
325.32 96.821 321 101.261 315.6 101.261 cv
310.2 101.261 305.88 96.821 305.88 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
305.88 91.541 mo
305.88 86.141 310.2 81.821 315.6 81.821 cv
321 81.821 325.32 86.141 325.32 91.541 cv
325.32 91.541 li
325.32 96.821 321 101.261 315.6 101.261 cv
310.2 101.261 305.88 96.821 305.88 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
305.88 145.421 mo
305.88 140.141 310.2 135.701 315.6 135.701 cv
321 135.701 325.32 140.141 325.32 145.421 cv
325.32 145.421 li
325.32 150.821 321 155.141 315.6 155.141 cv
310.2 155.141 305.88 150.821 305.88 145.421 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
305.88 145.421 mo
305.88 140.141 310.2 135.701 315.6 135.701 cv
321 135.701 325.32 140.141 325.32 145.421 cv
325.32 145.421 li
325.32 150.821 321 155.141 315.6 155.141 cv
310.2 155.141 305.88 150.821 305.88 145.421 cv
.75021 .679683 .670222 .90164 cmyk
@
305.88 65.621 mo
305.88 60.221 310.2 55.901 315.6 55.901 cv
321 55.901 325.32 60.221 325.32 65.621 cv
325.32 65.621 li
325.32 70.901 321 75.341 315.6 75.341 cv
310.2 75.341 305.88 70.901 305.88 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
305.88 65.621 mo
305.88 60.221 310.2 55.901 315.6 55.901 cv
321 55.901 325.32 60.221 325.32 65.621 cv
325.32 65.621 li
325.32 70.901 321 75.341 315.6 75.341 cv
310.2 75.341 305.88 70.901 305.88 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
305.88 171.341 mo
305.88 166.061 310.2 161.621 315.6 161.621 cv
321 161.621 325.32 166.061 325.32 171.341 cv
325.32 171.341 li
325.32 176.741 321 181.061 315.6 181.061 cv
310.2 181.061 305.88 176.741 305.88 171.341 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
305.88 171.341 mo
305.88 166.061 310.2 161.621 315.6 161.621 cv
321 161.621 325.32 166.061 325.32 171.341 cv
325.32 171.341 li
325.32 176.741 321 181.061 315.6 181.061 cv
310.2 181.061 305.88 176.741 305.88 171.341 cv
.75021 .679683 .670222 .90164 cmyk
@
305.88 65.621 mo
299.28 65.621 294 89.261 294 118.541 cv
294 147.701 299.28 171.341 305.88 171.341 cv
305.88 171.341 li
@
363.12 118.421 mo
363.12 123.821 358.8 128.261 353.4 128.261 cv
348.12 128.261 343.68 123.941 343.68 118.541 cv
343.68 118.541 li
343.68 113.261 348 108.821 353.28 108.821 cv
358.68 108.821 363 113.141 363.12 118.421 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
363.12 118.421 mo
363.12 123.821 358.8 128.261 353.4 128.261 cv
348.12 128.261 343.68 123.941 343.68 118.541 cv
343.68 118.541 li
343.68 113.261 348 108.821 353.28 108.821 cv
358.68 108.821 363 113.141 363.12 118.421 cv
.75021 .679683 .670222 .90164 cmyk
@
363.24 145.421 mo
363.36 150.821 359.04 155.261 353.64 155.261 cv
348.24 155.261 343.92 150.941 343.8 145.541 cv
343.8 145.541 li
343.8 140.261 348.12 135.821 353.52 135.821 cv
358.92 135.821 363.24 140.141 363.24 145.421 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
363.24 145.421 mo
363.36 150.821 359.04 155.261 353.64 155.261 cv
348.24 155.261 343.92 150.941 343.8 145.541 cv
343.8 145.541 li
343.8 140.261 348.12 135.821 353.52 135.821 cv
358.92 135.821 363.24 140.141 363.24 145.421 cv
.75021 .679683 .670222 .90164 cmyk
@
362.88 91.421 mo
363 96.821 358.68 101.261 353.28 101.261 cv
347.88 101.261 343.56 96.941 343.44 91.541 cv
343.44 91.541 li
343.44 86.261 347.76 81.821 353.16 81.821 cv
358.44 81.821 362.88 86.141 362.88 91.421 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
362.88 91.421 mo
363 96.821 358.68 101.261 353.28 101.261 cv
347.88 101.261 343.56 96.941 343.44 91.541 cv
343.44 91.541 li
343.44 86.261 347.76 81.821 353.16 81.821 cv
358.44 81.821 362.88 86.141 362.88 91.421 cv
.75021 .679683 .670222 .90164 cmyk
@
363.48 171.341 mo
363.48 176.741 359.16 181.061 353.76 181.181 cv
348.48 181.181 344.04 176.861 344.04 171.461 cv
344.04 171.461 li
344.04 166.181 348.36 161.741 353.64 161.741 cv
359.04 161.741 363.48 166.061 363.48 171.341 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
363.48 171.341 mo
363.48 176.741 359.16 181.061 353.76 181.181 cv
348.48 181.181 344.04 176.861 344.04 171.461 cv
344.04 171.461 li
344.04 166.181 348.36 161.741 353.64 161.741 cv
359.04 161.741 363.48 166.061 363.48 171.341 cv
.75021 .679683 .670222 .90164 cmyk
@
362.76 65.501 mo
362.76 70.901 358.44 75.341 353.04 75.341 cv
347.76 75.341 343.32 71.021 343.32 65.741 cv
343.32 65.741 li
343.2 60.341 347.52 55.901 352.92 55.901 cv
358.32 55.901 362.64 60.221 362.76 65.501 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
362.76 65.501 mo
362.76 70.901 358.44 75.341 353.04 75.341 cv
347.76 75.341 343.32 71.021 343.32 65.741 cv
343.32 65.741 li
343.2 60.341 347.52 55.901 352.92 55.901 cv
358.32 55.901 362.64 60.221 362.76 65.501 cv
.75021 .679683 .670222 .90164 cmyk
@
363.48 171.341 mo
368.28 171.341 372 159.221 371.88 144.341 cv
371.76 130.061 367.92 118.421 363.12 118.421 cv
363.12 118.421 li
@
363.24 145.421 mo
368.04 145.421 371.88 133.301 371.76 118.421 cv
371.64 103.541 367.68 91.421 362.88 91.421 cv
362.88 91.421 li
@
363.12 118.421 mo
367.92 118.421 371.64 103.901 371.52 86.021 cv
371.4 74.621 367.44 65.501 362.76 65.501 cv
362.76 65.501 li
@
363.48 171.341 mo
370.68 171.341 376.32 152.381 376.08 129.221 cv
375.96 108.341 370.08 91.421 362.88 91.421 cv
362.88 91.421 li
@
363.24 145.421 mo
370.44 145.421 376.08 125.501 375.96 101.141 cv
375.84 81.461 369.84 65.501 362.76 65.501 cv
362.76 65.501 li
@
330.48 95.141 mo
339.48 133.661 li
@
330.48 107.621 mo
339.48 146.141 li
@
330.48 120.581 mo
339.12 95.261 li
@
330.48 133.661 mo
339.24 107.741 li
@
330.48 146.021 mo
339.36 120.701 li
@
414.96 75.341 mo
414.96 161.741 li
@
405.24 118.541 mo
405.24 113.141 409.56 108.821 414.96 108.821 cv
420.24 108.821 424.68 113.141 424.68 118.541 cv
424.68 118.541 li
424.68 123.941 420.24 128.261 414.96 128.261 cv
409.56 128.261 405.24 123.941 405.24 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
405.24 118.541 mo
405.24 113.141 409.56 108.821 414.96 108.821 cv
420.24 108.821 424.68 113.141 424.68 118.541 cv
424.68 118.541 li
424.68 123.941 420.24 128.261 414.96 128.261 cv
409.56 128.261 405.24 123.941 405.24 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
405.24 91.541 mo
405.24 86.141 409.56 81.821 414.96 81.821 cv
420.24 81.821 424.68 86.141 424.68 91.541 cv
424.68 91.541 li
424.68 96.941 420.24 101.261 414.96 101.261 cv
409.56 101.261 405.24 96.941 405.24 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
405.24 91.541 mo
405.24 86.141 409.56 81.821 414.96 81.821 cv
420.24 81.821 424.68 86.141 424.68 91.541 cv
424.68 91.541 li
424.68 96.941 420.24 101.261 414.96 101.261 cv
409.56 101.261 405.24 96.941 405.24 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
405.24 145.541 mo
405.24 140.141 409.56 135.821 414.96 135.821 cv
420.24 135.821 424.68 140.141 424.68 145.541 cv
424.68 145.541 li
424.68 150.941 420.24 155.261 414.96 155.261 cv
409.56 155.261 405.24 150.941 405.24 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
405.24 145.541 mo
405.24 140.141 409.56 135.821 414.96 135.821 cv
420.24 135.821 424.68 140.141 424.68 145.541 cv
424.68 145.541 li
424.68 150.941 420.24 155.261 414.96 155.261 cv
409.56 155.261 405.24 150.941 405.24 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
405.24 65.621 mo
405.24 60.221 409.56 55.901 414.96 55.901 cv
420.24 55.901 424.68 60.221 424.68 65.621 cv
424.68 65.621 li
424.68 71.021 420.24 75.341 414.96 75.341 cv
409.56 75.341 405.24 71.021 405.24 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
405.24 65.621 mo
405.24 60.221 409.56 55.901 414.96 55.901 cv
420.24 55.901 424.68 60.221 424.68 65.621 cv
424.68 65.621 li
424.68 71.021 420.24 75.341 414.96 75.341 cv
409.56 75.341 405.24 71.021 405.24 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
405.24 171.461 mo
405.24 166.061 409.56 161.741 414.96 161.741 cv
420.24 161.741 424.68 166.061 424.68 171.461 cv
424.68 171.461 li
424.68 176.861 420.24 181.181 414.96 181.181 cv
409.56 181.181 405.24 176.861 405.24 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
405.24 171.461 mo
405.24 166.061 409.56 161.741 414.96 161.741 cv
420.24 161.741 424.68 166.061 424.68 171.461 cv
424.68 171.461 li
424.68 176.861 420.24 181.181 414.96 181.181 cv
409.56 181.181 405.24 176.861 405.24 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
405.24 65.621 mo
398.64 65.621 393.36 89.381 393.36 118.541 cv
393.36 147.821 398.64 171.461 405.24 171.461 cv
405.24 171.461 li
@
462.48 118.541 mo
462.48 123.941 458.16 128.261 452.76 128.381 cv
447.36 128.381 443.04 124.061 443.04 118.661 cv
443.04 118.661 li
442.92 113.261 447.24 108.941 452.64 108.941 cv
458.04 108.821 462.36 113.141 462.48 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
462.48 118.541 mo
462.48 123.941 458.16 128.261 452.76 128.381 cv
447.36 128.381 443.04 124.061 443.04 118.661 cv
443.04 118.661 li
442.92 113.261 447.24 108.941 452.64 108.941 cv
458.04 108.821 462.36 113.141 462.48 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
462.6 145.541 mo
462.6 150.941 458.28 155.261 453 155.261 cv
447.6 155.381 443.16 151.061 443.16 145.661 cv
443.16 145.661 li
443.16 140.261 447.48 135.941 452.88 135.941 cv
458.16 135.821 462.6 140.141 462.6 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
462.6 145.541 mo
462.6 150.941 458.28 155.261 453 155.261 cv
447.6 155.381 443.16 151.061 443.16 145.661 cv
443.16 145.661 li
443.16 140.261 447.48 135.941 452.88 135.941 cv
458.16 135.821 462.6 140.141 462.6 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
462.24 91.541 mo
462.24 96.941 457.92 101.261 452.64 101.381 cv
447.24 101.381 442.8 97.061 442.8 91.661 cv
442.8 91.661 li
442.8 86.261 447.12 81.941 452.4 81.941 cv
457.8 81.821 462.24 86.141 462.24 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
462.24 91.541 mo
462.24 96.941 457.92 101.261 452.64 101.381 cv
447.24 101.381 442.8 97.061 442.8 91.661 cv
442.8 91.661 li
442.8 86.261 447.12 81.941 452.4 81.941 cv
457.8 81.821 462.24 86.141 462.24 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
462.84 171.461 mo
462.84 176.861 458.52 181.181 453.12 181.181 cv
447.84 181.301 443.4 176.981 443.4 171.581 cv
443.4 171.581 li
443.28 166.181 447.6 161.861 453 161.741 cv
458.4 161.741 462.72 166.061 462.84 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
462.84 171.461 mo
462.84 176.861 458.52 181.181 453.12 181.181 cv
447.84 181.301 443.4 176.981 443.4 171.581 cv
443.4 171.581 li
443.28 166.181 447.6 161.861 453 161.741 cv
458.4 161.741 462.72 166.061 462.84 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
462 65.621 mo
462.12 71.021 457.8 75.341 452.4 75.461 cv
447 75.461 442.68 71.141 442.68 65.741 cv
442.68 65.741 li
442.56 60.341 446.88 56.021 452.28 56.021 cv
457.68 55.901 462 60.221 462 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
462 65.621 mo
462.12 71.021 457.8 75.341 452.4 75.461 cv
447 75.461 442.68 71.141 442.68 65.741 cv
442.68 65.741 li
442.56 60.341 446.88 56.021 452.28 56.021 cv
457.68 55.901 462 60.221 462 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
462.84 171.461 mo
467.52 171.461 471.36 159.341 471.24 144.341 cv
471.12 130.061 467.16 118.541 462.48 118.541 cv
462.48 118.541 li
@
462.6 145.541 mo
467.4 145.541 471.12 133.421 471.12 118.421 cv
471 103.541 467.04 91.541 462.24 91.541 cv
462.24 91.541 li
@
462.48 118.541 mo
467.16 118.541 471 104.021 470.88 86.141 cv
470.76 74.741 466.8 65.621 462 65.621 cv
462 65.621 li
@
462.84 171.461 mo
469.92 171.341 475.68 152.501 475.44 129.221 cv
475.32 108.341 469.44 91.541 462.24 91.541 cv
462.24 91.541 li
@
462.6 145.541 mo
469.8 145.541 475.44 125.621 475.32 101.141 cv
475.08 81.461 469.2 65.621 462 65.621 cv
462 65.621 li
@
429.84 95.261 mo
438.72 133.781 li
@
429.84 107.741 mo
438.84 146.141 li
@
429.84 120.701 mo
438.48 95.261 li
@
429.84 133.661 mo
438.6 107.741 li
@
429.84 146.141 mo
438.72 120.701 li
@
516.72 75.341 mo
516.72 161.741 li
@
507 118.541 mo
507 113.141 511.32 108.821 516.72 108.821 cv
522.12 108.821 526.44 113.141 526.44 118.541 cv
526.44 118.541 li
526.44 123.941 522.12 128.261 516.72 128.261 cv
511.32 128.261 507 123.941 507 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
507 118.541 mo
507 113.141 511.32 108.821 516.72 108.821 cv
522.12 108.821 526.44 113.141 526.44 118.541 cv
526.44 118.541 li
526.44 123.941 522.12 128.261 516.72 128.261 cv
511.32 128.261 507 123.941 507 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
507 91.541 mo
507 86.141 511.32 81.821 516.72 81.821 cv
522.12 81.821 526.44 86.141 526.44 91.541 cv
526.44 91.541 li
526.44 96.941 522.12 101.261 516.72 101.261 cv
511.32 101.261 507 96.941 507 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
507 91.541 mo
507 86.141 511.32 81.821 516.72 81.821 cv
522.12 81.821 526.44 86.141 526.44 91.541 cv
526.44 91.541 li
526.44 96.941 522.12 101.261 516.72 101.261 cv
511.32 101.261 507 96.941 507 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
507 145.541 mo
507 140.141 511.32 135.821 516.72 135.821 cv
522.12 135.821 526.44 140.141 526.44 145.541 cv
526.44 145.541 li
526.44 150.941 522.12 155.261 516.72 155.261 cv
511.32 155.261 507 150.941 507 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
507 145.541 mo
507 140.141 511.32 135.821 516.72 135.821 cv
522.12 135.821 526.44 140.141 526.44 145.541 cv
526.44 145.541 li
526.44 150.941 522.12 155.261 516.72 155.261 cv
511.32 155.261 507 150.941 507 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
507 65.621 mo
507 60.221 511.32 55.901 516.72 55.901 cv
522.12 55.901 526.44 60.221 526.44 65.621 cv
526.44 65.621 li
526.44 71.021 522.12 75.341 516.72 75.341 cv
511.32 75.341 507 71.021 507 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
507 65.621 mo
507 60.221 511.32 55.901 516.72 55.901 cv
522.12 55.901 526.44 60.221 526.44 65.621 cv
526.44 65.621 li
526.44 71.021 522.12 75.341 516.72 75.341 cv
511.32 75.341 507 71.021 507 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
507 171.461 mo
507 166.061 511.32 161.741 516.72 161.741 cv
522.12 161.741 526.44 166.061 526.44 171.461 cv
526.44 171.461 li
526.44 176.861 522.12 181.181 516.72 181.181 cv
511.32 181.181 507 176.861 507 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
507 171.461 mo
507 166.061 511.32 161.741 516.72 161.741 cv
522.12 161.741 526.44 166.061 526.44 171.461 cv
526.44 171.461 li
526.44 176.861 522.12 181.181 516.72 181.181 cv
511.32 181.181 507 176.861 507 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
507 65.621 mo
500.4 65.621 495.12 89.381 495.12 118.541 cv
495.12 147.821 500.4 171.461 507 171.461 cv
507 171.461 li
@
564.24 118.541 mo
564.24 123.941 559.92 128.261 554.52 128.381 cv
549.24 128.381 544.8 124.061 544.8 118.661 cv
544.8 118.661 li
544.8 113.261 549.12 108.941 554.4 108.941 cv
559.8 108.821 564.24 113.141 564.24 118.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
564.24 118.541 mo
564.24 123.941 559.92 128.261 554.52 128.381 cv
549.24 128.381 544.8 124.061 544.8 118.661 cv
544.8 118.661 li
544.8 113.261 549.12 108.941 554.4 108.941 cv
559.8 108.821 564.24 113.141 564.24 118.541 cv
.75021 .679683 .670222 .90164 cmyk
@
564.36 145.541 mo
564.48 150.941 560.16 155.261 554.76 155.261 cv
549.36 155.381 545.04 151.061 544.92 145.661 cv
544.92 145.661 li
544.92 140.261 549.24 135.941 554.64 135.941 cv
560.04 135.821 564.36 140.141 564.36 145.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
564.36 145.541 mo
564.48 150.941 560.16 155.261 554.76 155.261 cv
549.36 155.381 545.04 151.061 544.92 145.661 cv
544.92 145.661 li
544.92 140.261 549.24 135.941 554.64 135.941 cv
560.04 135.821 564.36 140.141 564.36 145.541 cv
.75021 .679683 .670222 .90164 cmyk
@
564 91.541 mo
564.12 96.941 559.8 101.261 554.4 101.381 cv
549 101.381 544.68 97.061 544.56 91.661 cv
544.56 91.661 li
544.56 86.261 548.88 81.941 554.28 81.941 cv
559.56 81.821 564 86.141 564 91.541 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
564 91.541 mo
564.12 96.941 559.8 101.261 554.4 101.381 cv
549 101.381 544.68 97.061 544.56 91.661 cv
544.56 91.661 li
544.56 86.261 548.88 81.941 554.28 81.941 cv
559.56 81.821 564 86.141 564 91.541 cv
.75021 .679683 .670222 .90164 cmyk
@
564.6 171.461 mo
564.6 176.861 560.28 181.181 554.88 181.181 cv
549.6 181.301 545.16 176.981 545.16 171.581 cv
545.16 171.581 li
545.16 166.181 549.48 161.861 554.76 161.741 cv
560.16 161.741 564.6 166.061 564.6 171.461 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
564.6 171.461 mo
564.6 176.861 560.28 181.181 554.88 181.181 cv
549.6 181.301 545.16 176.981 545.16 171.581 cv
545.16 171.581 li
545.16 166.181 549.48 161.861 554.76 161.741 cv
560.16 161.741 564.6 166.061 564.6 171.461 cv
.75021 .679683 .670222 .90164 cmyk
@
563.88 65.621 mo
563.88 71.021 559.56 75.341 554.16 75.461 cv
548.88 75.461 544.44 71.141 544.44 65.741 cv
544.44 65.741 li
544.32 60.341 548.64 56.021 554.04 56.021 cv
559.44 55.901 563.76 60.221 563.88 65.621 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
563.88 65.621 mo
563.88 71.021 559.56 75.341 554.16 75.461 cv
548.88 75.461 544.44 71.141 544.44 65.741 cv
544.44 65.741 li
544.32 60.341 548.64 56.021 554.04 56.021 cv
559.44 55.901 563.76 60.221 563.88 65.621 cv
.75021 .679683 .670222 .90164 cmyk
@
564.6 171.461 mo
569.4 171.461 573.12 159.341 573 144.341 cv
572.88 130.061 569.04 118.541 564.24 118.541 cv
564.24 118.541 li
@
564.36 145.541 mo
569.16 145.541 573 133.421 572.88 118.421 cv
572.76 103.541 568.8 91.541 564 91.541 cv
564 91.541 li
@
564.24 118.541 mo
569.04 118.541 572.76 104.021 572.64 86.141 cv
572.52 74.741 568.56 65.621 563.88 65.621 cv
563.88 65.621 li
@
564.6 171.461 mo
571.8 171.341 577.44 152.501 577.2 129.221 cv
577.08 108.341 571.2 91.541 564 91.541 cv
564 91.541 li
@
564.36 145.541 mo
571.56 145.541 577.2 125.621 577.08 101.141 cv
576.96 81.461 570.96 65.621 563.88 65.621 cv
563.88 65.621 li
@
531.6 95.261 mo
540.6 133.781 li
@
531.6 107.741 mo
540.6 146.141 li
@
531.6 120.701 mo
540.24 95.261 li
@
531.6 133.661 mo
540.36 107.741 li
@
531.6 146.141 mo
540.48 120.701 li
@
%ADOBeginSubsetFont: SJNAAA+Times#20New#20Roman#20Bold Initial
ct_T42Dict begin
-0.555 -0.305 2 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /SJNAAA+Times#20New#20Roman#20Bold
Type42DictBegin
[<00010000000b000b000b000b637674207de6eb89000000bc000008266670
676d636620fd000008e4000005f2676c7966a4306d1d00003100000006a2
68656164761413e300000ed800000036686865612b09031200000f100000
0024686d7478f801ac1200000f34000000106c6f63616c0a000000000f44
000000146d61787078033d0800000f58000000206e616d65c50d59130000
0f7800000e4270726570a13c7d2400001dbc000013416764697200000000
0000000000000000058e001f054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe0031300000124000001240000
00000000000000250084002400e8009600bf005d00cb02030045012e0058
00040118001900020139004b011000170005010a00280023004b00500015
004a00e5010d00af003100ea014600810125004f009c0022004e00160041
009100a00147ffe9008100d3016900ab001700a801400027004c0148ffdf
00510050ffb7012e0000003b0097009a010e001f004c010a0123ffde0022
0073008700ba00d600ff005a009805a0ffe900500052006effb7005c00d1
015a015bff1c0049006e007e009800a100bd00e4018801c00405ff600035
006200720107011301280382ffa8003805d809b5ffc4ffd00010006e00a1
00ba00ec022b0446ffee004000e80401ff680003001300330033006e00a2
00b600dc011801350343000e0034005c005d007c00af0328003b00480089
009c00ba017b01af030effa4001700370063007f00e0017801c0022105d8
05f0ff7a0012002700340052008a00a400c100c300eb011801460154036d
fe3fff4e00010008002b0045006e0084008600ae00af00c200c200c4010f
01210149017b01c101de01e1036e03e6006300a700ed00f600f801280169
017e023f02820532fd81ffb5002600350040004500490057006c00ac0126
0140015b017b019c0277027e027f03b603dc042804efff38ffc30006002f
0040008200aa00b600ce00d300d700e50146014d01d6027e03b30586ff7b
0012002f0068007f008400a500b900f501050109010c0114012001330137
0178017b01c001e1021d02230258036203af058cff79ff8d00210024005d
00650068006a0083008500b700cf00e200eb00ed011a0120012f0137013f
0150018d018f01c402cf0357035c03960440049604ab04c204fc051105c2
fed1fee00013002100240030004d004d005d0066007a007c00b800b800c3
00da0103011b011e012f013d014a0150015f0166017c0190019501a301a6
01b601c701d001e901ef01f90218028c029402bb02c502cf02d0031d032a
0344039f03cc042104da04fb0761fd1dfebffeefff0bff2bff33ff90ff9c
ffdbffed00010008001c0025003f0043005a006b0080008400900095009d
00a700b400cd00d500d600df00df00df00e400f000f600fb010601130119
011b012201230127012c013f015701580177018a019301a401c601e101e4
01fc0200020c02220222022a0236024a025c028202ec02fc030a03230341
0378039703d203fa04790532053205ab05b505f006e4072508ccfc9bfdde
fe00fe69fe96fe9bff3500030006000e00130019003400420048004a0057
006400710071007200760077007a007a0083009c00af00af00b200bb00c8
00cc00cf00cf00db00dc00df00e400e400e400e900eb00f400fd00fe0102
0105010501080108011b01220123013001370143015b0160016501780178
01780178017b0182018901980198019b019e01a101a601d101d201d301df
01e301f502000200022d02410247024a0250025b025d025d025f02630281
028b02b402b402ce02d602db02e202fa03100311031f0327034503670388
038a03b003b403d403d5042604410448046b04c704d1053205480549055f
0563058b05a105a305c205ca05e405ff069306a206b806e8070a07360750
0754078907a907bb07dc07ff08270120014d011b01290000000000000000
00000093015b042f029001ff02b800db00be027403cb029401ab00000000
0000000000000000058a038a0364005f02b803bd029d7c9003e203ac0282
0000044400000000003d010a00cc00bc00cc05d3041505e800c7021a00ee
00000194036102be029902180136033b048504cc0050007905a305a302df
020702af000001eb0064005f0055011900f2045600ef00c800cf058a0143
014602de01ab02c6024a005d00d800a402bb009900a00065013702740364
00b500fa009101b9032001b60025007f00d000ec00e00000000000000000
0000042ffd42023f06180276063a013701b90151ffc70229ffeb023f02e1
018500db03fa01900156014e012f00a600e300bb00d50134011f04fe041b
00d100e4011e009b00cd00e700b300e200ca042400b800f500b90334005a
04e00123012ffdc9fe440574038301f602410002001700500015004f0017
00a80051009800520049006e000e00af017b017b019c006a008300eb00cd
0122000005d306da009a008f00ba0315002503a5028002ff03c804200092
00e0034c009b007d00f8011c013400a8006d006900000420ffe6fea4006a
006a003800380162015a0044006d0048001eff6d00a600a600400040ff5c
ff990559052b00ce014c011500bf0140011800c800960509feed004800b4
009500db0048018b00b3fe6400c000ea01180125013203b003ed05760590
05aa05b405be05cd063100780084009b00cc00e200f4010a0120016300d1
00ea00f7010801420019002c00340041003800480058006c025903bd0043
011a007000d30028003700420050005a0064007300780082008c009c00a5
00bd00ce00f00110015c00be00d801020117012c016300ea01080041004b
0055005f007300a60109018301b300410064001e002a00eb00fa010e0138
0274002c00400082009600b600c000cc00dc00e600f000ff010a0120012c
013b01440156016300f70057006401100136005001b10000ffb60039004e
004403cc00e5002401100042012201a400f0006000e0000e001d003905e3
0102002cfe4eff38026903bd011600ff000e00a00054001b003d01710041
000f005000fd0015014f0035fe47003900ab0080005005a50016002b00ac
0115021504570555007300da005c00ce0072ff58019a0744000040425554
403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a2928272625242322
21201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b09051582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b5320
5c58b002855958b00185592d2c20b0032545b019234445b01a2344456523
4520b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a
40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b31940
201945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f
4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f4323
43650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003
252349b04060b0206320b000525823b002253823b002256538008a63381b
212121212159012d2c4bb06451584569b00943608a103a1b212121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20
b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3e
b02a2a2d2c352d2c76b8029f23701020b8029f4520b0005058b00161593a
2f182d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015
b00826b00826b00826b008260f10161345683ab001162d2cb40001000000
15b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b
515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53
234b515a58381b2121592d2c4b5458381b2121592d2cb0134358031b0259
2d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2cb01243
5c580cb00425b00425060c6423646164b807085158b00425b00425012046
b01060482046b0106048590a21211b2121592d2cb012435c580cb00425b0
0425060c6423646164b807085158b00425b00425012046b8fff060482046
b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d
2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a5838
1b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b21
21592d2c462346608a8a462320468a608a61b8ff8062232010238ab90327
03278a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b202020243604259b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b2021002436042595959592d2cb0024354584b
53234b515a58381b2121591b21212121592d000000010000000533337a79
294b5f0f3cf50819080000000000a2e3354600000000cf75613bfb89fd8c
10000835000100090001000100000000000100000721fe4500571000fb89
fadf10000001000000000000000000000000000000040639011c04000032
0473004e0400005c000000000000006c000001b4000003aa000006a20001
0000000400f2003c008f000600020010002f00560000088b02c400050002
0000005303ea0000000300000000006a00000000000300000001001e006a
0000000300000002000801120000000300000003006c00e0000000030000
0004002800f200000003000000050018014c0000000300000006002c0164
00000003000000070076006a0000000300000008003000ae000000030000
000900860190000000030000000d029a02160001000000000000003504b0
0001000000000001000f04e5000100000000000200040539000100000000
0003003605200001000000000004001405290001000000000005000c0556
0001000000000006001605620001000000000007003b04e5000100000000
000800180507000100000000000900430578000100000000000d014d05bb
0003000104030002000e07280003000104030004002e0708000300010405
0002000a07560003000104050004002a0736000300010406000200060780
0003000104060004002607600003000104070002000807a6000300010407
0004002807860003000104080002000c07ce0003000104080004002c07ae
0003000104090000006a00000003000104090001001e006a000300010409
0002000801120003000104090003006c00e00003000104090004002800f2
00030001040900050018014c0003000104090006002c0164000300010409
00070076006a0003000104090008003000ae000300010409000900860190
000300010409000d029a021600030001040a0002000e07fa00030001040a
0004002e07da00030001040b00020012082800030001040b000400320808
00030001040c00020008085a00030001040c00040028083a00030001040e
00020010088c00030001040e00040030086c00030001041000020012085a
00030001041000040032083a0003000104130002000608bc000300010413
00040026089c0003000104140002000e08e20003000104140004002e08c2
0003000104150002001409100003000104150004003408f0000300010416
0002000e09440003000104160004002e0924000300010419000200140972
00030001041900040034095200030001041b0002000a09a600030001041b
0004002a098600030001041d0002000607a600030001041d000400260786
00030001041f0002000a09d000030001041f0004002a09b0000300010424
0002000c09fa0003000104240004002c09da00030001042a000200080a26
00030001042a000400280a0600030001042d0002000a0a4e00030001042d
0004002a0a2e00030001080a0002000e07fa00030001080a0004002e07da
0003000108160002000e09440003000108160004002e0924000300010c0a
0002000e07fa000300010c0a0004002e07da000300010c0c00020008085a
000300010c0c00040028083a00a900200032003000310034002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0054
0069006d006500730020004e0065007700200052006f006d0061006e0020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e002e004d006f
006e006f0074007900700065003a00540069006d006500730020004e0065
007700200052006f006d0061006e00200042006f006c0064003a00560065
007200730069006f006e00200035002e0031003100200028004d00690063
0072006f0073006f00660074002900560065007200730069006f006e0020
0035002e0032003000540069006d00650073004e006500770052006f006d
0061006e00500053002d0042006f006c0064004d0054004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d0020005300740061
006e006c006500790020004d006f007200690073006f006e002c00200056
006900630074006f00720020004c0061007200640065006e007400200031
0039003300320059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
00450055004c004100200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c007500640065006400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e0074002e002000200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002ea9203230313420546865204d6f6e6f747970
6520436f72706f726174696f6e2e20416c6c205269676874732052657365
727665642e54696d6573204e657720526f6d616e20697320612074726164
656d61726b206f6620546865204d6f6e6f7479706520436f72706f726174
696f6e2e4d6f6e6f747970653a54696d6573204e657720526f6d616e2042
6f6c643a56657273696f6e20352e313120284d6963726f736f6674295665
7273696f6e20352e323054696d65734e6577526f6d616e50532d426f6c64
4d544d6f6e6f7479706520547970652044726177696e67204f6666696365
202d205374616e6c6579204d6f7269736f6e2c20566963746f72204c6172
64656e742031393332596f75206d617920757365207468697320666f6e74
206173207065726d6974746564206279207468652045554c4120666f7220
7468652070726f6475637420696e207768696368207468697320666f6e74
20697320696e636c7564656420746f20646973706c617920616e64207072
696e7420636f6e74656e742e2020596f75206d6179206f6e6c7920286929
20656d626564207468697320666f6e7420696e20636f6e74656e74206173
207065726d69747465642062792074686520656d62656464696e67207265
737472696374696f6e7320696e636c7564656420696e207468697320666f
6e743b20616e6420286969292074656d706f726172696c7920646f776e6c
6f6164207468697320666f6e7420746f2061207072696e746572206f7220
6f74686572206f75747075742064657669636520746f2068656c70207072
696e7420636f6e74656e742e00540069006d006500730020004e00650077
00200052006f006d0061006e0020004e0065006700720065007400610054
0069006d006500730020004e0065007700200052006f006d0061006e0020
00740075010d006e00e900540069006d006500730020004e006500770020
0052006f006d0061006e002000660065006400540069006d006500730020
004e0065007700200052006f006d0061006e002000460065007400740054
0069006d006500730020004e0065007700200052006f006d0061006e0020
038803bd03c403bf03bd03b100540069006d006500730020004e00650077
00200052006f006d0061006e0020004e0065006700720069007400610054
0069006d006500730020004e0065007700200052006f006d0061006e0020
004c0069006800610076006f00690074007500540069006d006500730020
004e0065007700200052006f006d0061006e002000470072006100730073
006500740074006f00540069006d006500730020004e0065007700200052
006f006d0061006e0020004600e9006c006b00f6007600e9007200540069
006d006500730020004e0065007700200052006f006d0061006e00200056
0065007400540069006d006500730020004e0065007700200052006f006d
0061006e002000480061006c007600660065007400540069006d00650073
0020004e0065007700200052006f006d0061006e00200050006f00670072
007500620069006f006e006100540069006d006500730020004e00650077
00200052006f006d0061006e0020004e00650067007200690074006f0054
0069006d006500730020004e0065007700200052006f006d0061006e0020
041f043e043b0443043604380440043d044b043900540069006d00650073
0020004e0065007700200052006f006d0061006e002000540075010d006e
00e900540069006d006500730020004e0065007700200052006f006d0061
006e0020004b0061006c0131006e00540069006d006500730020004e0065
007700200052006f006d0061006e0020004b007200650070006b006f0054
0069006d006500730020004e0065007700200052006f006d0061006e0020
011100e20323006d00540069006d006500730020004e0065007700200052
006f006d0061006e0020004c006f0064006900610000b15420b8040cb30c
0e3220b8040cb2131732b8040bb328201f0f41100412008004120002000f
0412003f0412005f04120003005f0412000100400412b2783340b80412b2
723340b80412b26e3340b80412b26a3340b80412b2543340bc0412004a00
33ffc00412b317183240b80412b30a0c3280b80412b308093240b80411b2
5a33404109041100560033ffc0041100530033ffc00411b2503340b80411
b24d3340bc041100470033ffc00411b344453240b80411b2423340bc0411
003e0033ffc00411b23a331f4124041100200411004004110070041100af
041100f004110006000f0411002f04110090041100ff04110004002f0411
00400411007f0411008f041100a0041100e004110006ffc00411b208330f
411b0410008f04100002000f0410001f0410002f04100003006004090001
00b004090001000f0408003f0408004f0408009f04070004040ab2006c1f
b9ffc00403b345453240b80403b32b2e3240b80403b2282932b9ffc00403
b21a1c32bd040302990027001fffc00401b2161b32b9ffc00400b2424232
b9ffc00400b2363832b9ffc00400b32a2d32df410a040000ef0400000204
0004010028001fffc00401b3282e32f0bf0401000103fe000f0101001fff
c003fcb310143240b803fdb30f133240411003f9005003f9000200b003b1
00c003b10002006f03f5007f03f50002ffc003afb22d3132b9ffc003afb3
0a0e3210411003ef002003ef008003ef000300a003ef0001002003ef0040
03ef0002ffc003efb313163240b803e7b20f1132b9ffc003dfb2303432b9
ffc003dfb310183250411403dc000103c903d20023001f03e203d2001e00
1f03c703d2001d001f03c603c8000d001fffc003a4b30f103280411003a3
000103a303790029001f03a5037a0032001f03a8037e001b001fffc003d9
b20e1132b9ffc003d9b2282a32410a03a7037c0032001f03730371003400
1f036c036bb2321f20bb03a40001004003ecb3090b3240b803ecb2101532
bd03e9036b0014001f03e4036bb2171f0fbd036e002f036e0002ffc003b8
b3090d3290410c03b800a003b80002001f03d20001009f03d20001004003
d2b2090b32410a03a903800016001f03cf03810015001f03aa0382b2151f
c0bb03f70001004003f6b3090d3240b803a2b2083340b803a2b30d0e32c0
410903a2000100b003f200c003f20002ffc003f4b3263832004126038c00
30038c0002002003e3003003e30002001003ee003003ee005003ee006f03
ee007f03ee009f03ee0006000003ed003003ed0002002f03de007003db00
9003db009f03de0004ffc00379b20f1032b9ffc00379b2242832b9037d03
7cb2321f10bb037e0001ffc0037eb3090e3240b8037cb2121332b9ffc003
7cb30c0e323fbd03d7004f03d70002004003d8b31718326fbb038e000100
400390b3181b3240b803d4b2090c32bd037b037a0032001fffc0037ab20e
1132bd038003820016001f03810382b2151fb0be03820001000f03830001
004003ffb30c11327f411403540001006f0354008f035400d0035400ef03
540004000f0354002f0354005f0354000300400350b30e0f320fbb035a00
0100400349b20e331fbd0348007f03480002ffc00348b2152232b9ffc003
47b2152232b9ffc0040fb21b1e32beffc0040f002d01000032040e0406b2
2f1f51bb034b0001034f034eb2641f40b80351b20e0f32b9ffc0034eb338
3a3230bb034e0001ffc0034eb21f2332b9ffc0034eb2131932b9ffc00346
b2091132b9ffc00343b30a11320fbb03440001ffc0032bb2080e32b9ffc0
032bb2161b32b9ffc0032ab31417321f4110033a0001000f033300010000
03370020033700300337008003330004ffc00332b3101232504164033200
01004003320060033200a0033200b0033200040010033200300332005003
3200e003320004000f0336007f033600ff033600030070033600f0033600
02000f0331003f0331008f033100bf033100e003310005000f0331006003
310002008f03300001006003300090033000020050032f00010010032f00
40032f0060032f0080032f00a0032f00c0032f00f0032f000700cf032d00
ff032d00020030032d0080032d00b0032d00df032d0004006f032c007f03
2c00020012032000fd0800001f007f0299403a017f007f017f027f037f04
7f057f107f11084035252c32406a252c32402e252c324028252c32376009
7009800903300940095009031009200902b8ffc0b2073a33b8ffc0401206
3a33da4dea4dfa4d0312379006900702cf410c011100df011100ef011100
0300cf011000df011000ef0110408703cf3edf3eef3e03cf4ddf4def4d03
cfdedfdeefde03cf2ddf2def2d03404d1b3a32375f016f017f018f01041f
012f013f014f01045f036f037f038f03041f032f033f034f0304600b700b
800b03300b400b500b03100b200b02900ba00bb00bc00bd00b05b006c006
d006e006f0060550066006700680069006a006061f072f073f07400604f0
414302db000100a002db00b002db0002008002db009002db0002001002db
000100c002db00d002db0002009002db0001006002db007002db00020040
02db005002db0002002302db003002db000202db002300a002da00010080
02da009002da0002004002da0001002302da003002da000202da00230000
02d90001007002d9009002d9000202d9401c223024402402102420240200
2401f02401d024e02402b024c02402c0413a02d8000100a002d800b002d8
0002008002d8009002d80002002302d8003002d8000202d8002300c002d7
000100a002d700b002d70002008002d7009002d7000200a002d700b002d7
0002008002d7009002d70002006002d7007002d70002004002d7005002d7
0002002302d7003002d7000202d7b223370f4117029b0001005f029b009f
029b00df029b0003002f029b003f029b006f029b0003001f029b0001029b
029b0040029ab3272c3280b8029ab2263340b8029ab2223340b8029ab21e
3340b8029ab21c3340b8029ab3191a325f410f029a009f029a00df029a00
03000f029a001f029a003f029a0003ffc00299b2443340b80299b23d3340
b80299b23a33df413702990001005f029900af02990002004f0299009f02
990002002f0299003f0299000200af02990001000f0299003f0299000200
b0029900e0029900020070029900a002990002004f0299005f0299000200
1f0299002f0299003f02990003029a029a02990299000f027a002f027a40
0b0200161600000012110812b802bab269121fb802b4b228101fb802b3b2
28101fb802b2b228101f411302030023000d01ee0023000d01ae0023000d
019f0023000d01940023000d01570023000d010f400b230df9230dc5230d
a7230d410a024a0024000d01f00024000d01e90024000d016a400e240de8
240dc6240da3240da2240dbb01e30022000d0121401a220de5220ddd220d
b7220daa220d93220d5c220d51220d4c220d410a02280020000d021d0020
000d015e0020000d011c4017200dfc200de1200dcb200dc8200da1200d59
200d3a200d410a01f20034000d019c0034000d01970034000d0135b7340d
1f340d1d340dba0202000f015bb20f0009bb0202015b000d030ab22a3e1f
b80309b22a3e1fb80221b24d251fb8021cb24d411fb8021bb24d521fb802
1ab24d721fb80213b24d931f4109020f01b10401001f020e01b10801001f
020cb22a811fb8020bb22a811fb80208b22a5e1fb80205b22a391fb801fe
b22a231fb801fbb2661d1fb801fab2661e1fb801f6b266341fb801f5b266
341fbc01f300660201001f01f1b2669e1f410901ea00280801001f01e700
2602ab001f01b8b24d3f1fb801b7b24d931f410901b4003e0125001f01b2
00400401001f01acb22a721fb801a8b22a281fb801a7b22a241fb801a6b2
2a241fb801a3b22a1f1fb801a1b2662e1fb8019eb266931fb8019db266e4
1fb8019ab2286c1f4109019900280401001f019800260401001f0173b24d
1b1fb80171b24d241fb80170b24d2f1fb8016fb24d351fb8016bb23ecd1f
b80169b23ee41f4109016701b1019a001f0166002a02ab001f0161b2662a
1fb8015fb2669e1f4109015d0028019a001f015c00350401001f0147b24d
391fb80146b23ecd1f410d0145003e0125001f014401430101001f014201
b102ab001f0140b22a301fb8013eb22a261fb8013db2661d1fb8013cb266
2b1fb80138b228811fb80137b2289e1fbc01360028019a001f0129b24d72
1fbc0124002a0201001f0123b22aab1fb8011fb266291fb8011eb266451f
b8011bb228811f41090113003e0125001f0112003e0401001f0111b22a29
1fb80110b22a201fbe010b0066019a001f010a0026019ab61ffd4d721ffb
3eb80156b21ffa40b80801b21ff728b80801b61fec4d621feb4db80401b2
1fea40b802abb61fdf4d721fde3eb802ab400b1fdc2ae41fdb66221fca2a
b80401401b1fc92a2e1fc326791fb828bb1fb34d1e1fb166291fb066621f
af66b80401b21fae26b802abb21fa828b80201400b1fa0664c1f982a2b1f
9726b8019ab61f9266291f8740b802ab401b1f852a791f8226811f754d93
1f744d891f732a1d1f70285e1f6a28b8040140171f692a521f682a201f67
66291f6566671f612a931f6035b80801b61f5e2acd1f5335b80801b21f4b
66b80156b21f493eb80801b61f4866521f4626b80201b21f3f66b8015640
0b1f3b66341f322a931f2e35bb0401001f002d0143b3cd1f5537bc022f00
07018000070172402e07bd077e076207540742072f072707250721071e07
1408120810080e080c080a0808080608040802080008000214b8ffe0402b
000001001406100000010006040000010004100000010010020000010002
00000001000002010802004a00b013034b024b5342b0372b4bb807ff52b0
382b4bb008505b58b101018e59014bb0c063004b6220b0f65323b8010a51
5ab005234201b0124b004b544218b0382bb00288b801005458b801ffb101
018e851bb0124358b90001012c858d1bb900010146858d59590016763f18
3f123e113946443e113946443e113946443e113946443e11394660443e11
3946604445442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b
2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb02953205c58b9
026c026a4544b9026b026a45445958b90168026c455258b9026c01684459
594bb03b53205c58b9003e026b4544b9004d026b45445958b9025c003e45
5258b9003e025c4459594bb03b53205c58b901b1003e4544b13e3e454459
58b9024f01b1455258b901b1024f4459594bb05a53205c58b90143003e45
44b13e3e45445958b9038b0143455258b90143038b4459594bb09e53205c
58b9002a026c4544b90040026c45445958b9056c002a455258b9002a056c
4459594bb01853205c58b126264544b1662645445958b13226455258b126
324459594bb05153205c58b126264544b1282645445958b1ad26455258b1
26ad4459594bb8010153205c58b126264544b1352645445958b902280026
455258b9002602284459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b01b33d766e58456523456023456560234560b08b7668
18b080622020b16e764565234520b003266062636820b003266165b07623
6544b06e234420b13d584565234520b003266062636820b003266165b058
236544b03d2344b10058455458b158406544b23d403d4523614459b34e81
3871456523456023456560234560b089766818b080622020b13881456523
4520b003266062636820b003266165b081236544b038234420b14e714565
234520b003266062636820b003266165b071236544b04e2344b100714554
58b171406544b24e404e45236144594b5242014b5058b108004259435c58
b108004259b3020b0a124358601b2159421610703eb0124358b93b21187e
1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04
000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400
000b2b59b0102342b0112342007418456944456944737373737474757575
752b2b2b73732b2b2b2b2b2b18456944737373742b454473737373737474
744544737474747474747575754544737545447373747445447373737373
747474740075757575757575757575752b2b74747474747400732b4358b1
4d4d451869441bb8ffc0b34d1b3a322b5973002b2b7575752b2b2b2b2b00
73732b435c58b8ffc0b2071633b8ffc0400b061633d54de54df54d03c041
0c011100d0011100e00111000300c0011000d0011000e00110401e03c03e
d03ee03e03c04dd04de04d03c0ded0dee0de03c02dd02de02d03372b7474
7474747473002b2b590173737473747374737473747374752b737573002b
2b2b01732b2b2b2b752b2b2b732b2b2b002b2b742b732b7373742b73732b
2b2b2b2b2b732b732b2b2b742b2b2b73737373732b73732b2b2b73002b2b
2b2b7374732b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b
2b7374752b2b7373732b2b2b752b2b732b2b2b2b2b2b2b2b2b2b73747573
742b7374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b
2b00000000>
[1699 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 108 1 <000100320000039c0568001c00e840248802ae02ac0303270c9503020a0b
0a0b0100051b12a016b41602161c020217010a0b081cb80160b6122f17b0
170217b80122b2011208b8ffc0b30b0d3408b80324b40e05010c03b801f4
401b000510050205dc12d30f1c01bf1c011c1a1e0f0101bf010101191dba
0158019000182b4e10e45d7110f65d714df4fd5de4003f3fed2b435c5840
130840160d3f0840170e3f0840190f3f08400d392b2b2b2b5910fd5d435c
58b90017ffc0b3160d3f17b8ffc0b3170e3f17b8ffc0b31b103f17b8ffc0
b21c113f2b2b2b2b59e4113939111239011112395d1139123911393910c9
3130015d005d212135001235342623220727363633321616151407060121
32363637330350fce2016f9d825e9a552536dc9067aa604a65feac01256c
412a22241601b5012e90698b9a0dc0b860a7498589b9feb5122b4500>SJNAAA+Times#20New#20Roman#20Bold AddT42Char 
1 436 2 <0002004efe4a044a03c3001d002e01694014121246080f1700181f171018
041e001d12241f17b801ee4026231dc61f18c52224260c072c84040b1817
0e0f72101011070f0f111f1f001d101d021d2a1112b8ffc0400e32193f0f
124f1202b01201121a30b8ffc0b24b3530b8ffc0b33b3d3430b8ffc04014
0c0e345030d030027030a03002301f2801284008b8ffc0400a32193f0f08
01d0080108b8ffc040090c0e3408192f3881182b4e10f42b5d712b4ded5d
4e105d722b2b2bf65d712b3c4dfd5d3c1112392f003f3c10e43f3c3fed3f
ed2b2b030e103c3c015d313043794032202b050e26250a26212022200206
2a260625250b282700230d1f1e010e0f2b052827002709242701200e241e
0129072c2700002b2b2b012b103c2b2b2b2b2a2b2b81814358402a700570
0b7025702bb030c0300670067f0a7f26702a7b2e892e980199059c2ea805
af2eb805bf2ec92e0e005d015d59435c58b90030ffc0b319213f30b8ffc0
b318203f30b8ffc0b2171f3f012b2b2b5925060706232227263534363633
321617373311141716171521353236363511113426272623220706111417
1633323602b93d35464cb066517bd778507d2d9d22101a4ffde43e381523
2f18254c2a4239273e245b62401a249d7dae91ff8736376dfb455c172501
25251c2e4701bd0181a16826134367fee8d7573b3200>SJNAAA+Times#20New#20Roman#20Bold AddT42Char 
1 938 3 <0002005cfff303de03c30031003c024a4015061010390420103932403c44
348b3593079b35033eb8ffc040614b35b639017e07a62dac3cb72dc62dd8
21d72dd835e62d09350745074a134a1749355817660895009b35a501b601
b6080c330701803e99049a2d9c3104003e503e6316603e72179615af01a5
3abf01e03e0a0816503e743b03480802151215023bb8ffc040c41739ef3b
013233080908072b2c282b2c252b2c293c33ab33bb330304333d334d337d
338d339f33ad33bd33ce33dd33ed330b703301333b140821086508750804
02083b084c087a0889089f08a608c808d908090b081b0870080314120803
180d261f2b2b2c2929662f3b48023297005d2f2f021840292b340f181f18
5f186f189f18af18bf1807df18ec18fc18031818400e103418021f07020b
0f2c1f2c2f2c3f2c042c4429430f251f250225ea00002f093f097f09bf09
0420097f0902000910090209b801bb4010403e803e02403e603e023ea815
01151bb8ffc0402850283fff1b011b2b0037103702373205402325346f05
f0050230054005500560050405193d385518b80131852b4e10f45d712b4d
ed71f4712bc15d105d71f45d5d723c10fd5df6e45d003f3f12392b2f5d71
2b103c10f4ed10ed10fdf4e410ed1117395d717212395d71721139390111
12393910c908103c0e3c3c005d2b0172b10602435458b40c181d1802005d
59313043794032383a1c230a1003040f251d2621250b2639260e1e111e00
0c20091e0122233a03371e00101c0d1e010a220d1e0138043b1e00002b2b
2b012b103c2b2b2b2b2b2b2b818181810172715d0072715d01712b00712b
2b2b25062322263534362535342626232207061514171615140623222635
343636333216171615111416163332371706062322262711060706151417
1633320249ab88506ab80135174028412a1a1c26493b3f5572cc6e859b17
0e0a140d1a1b1e326b44505a0a793b2721192d328a97694f6bab8e5e6a37
291d1218151f2b2831454c3348834671422a97fe9540211025184a434b95
0139475136372e231b00>SJNAAA+Times#20New#20Roman#20Bold AddT42Char 
1 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>SJNAAA+Times#20New#20Roman#20Bold AddT42Char 
SJNAAA+Times#20New#20Roman#20Bold /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
end
SJNAAA+Times#20New#20Roman#20Bold /Encoding get
dup 32 /g1 put
dup 33 /g2 put
dup 34 /g3 put
pop
end
%ADOEndSubsetFont
/GVYXIO+Times#20New#20Roman#20Bold /SJNAAA+Times#20New#20Roman#20Bold findfont ct_VMDictPut
/GVYXIO+Times#20New#20Roman#20Bold*1 
[32{/.notdef}rp /g1 /g2 /g3 221{/.notdef}rp]
GVYXIO+Times#20New#20Roman#20Bold nf
GVYXIO+Times#20New#20Roman#20Bold*1 [9.96 0 0 -9.96 0 0 ]msf
560.29 7.78146 mo
( )sh
565.33 7.78146 mo
(!")
[5.53778 0 ]xsh
115.446 7.78146 mo
( )sh
120.367 7.78146 mo
(!")
[5.64019 0 ]xsh
121.2 192.341 mo
148.8 192.341 li
148.8 186.581 li
121.2 186.581 li
cp
.75021 .679683 .670222 .90164 cmyk
gsave
clp
[1 0 0 -1 22.3055 199.356 ]ct
[27.6 0 0 5.76 98.8945 7.01499 ]ct
<<
/T 1
/W 230 
/H 48 
/M[230 0 0 -48 0 48 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
p](;5mf3Im!!iE]r;Zj!nGN=e+7oO9!rtRcq#(0n5OeUO!C),-!!EB(J,f<B!!,=Rr;ZkJ_"@[1!s/E4
q#(0o5O\[P!!.Sbo`,*s"8i8rr;Zj'nGN=fJ&(^W"9Snu!W;lr!<_ii!!.Sbo`,*s#Oh`kr;Zj#nGN=f
5CiJ."p;XC&)[G8r;Zj#nGN=e+8Q!9!!WP@"!>;YI/O$G"7Yg\"p;XC+2@k?r;Zj#nF6J_#J^F+J,gYh
!!*2knGiau^]QfO!$;(=!<_i]!!W\D"$_;9*rQ'>"7Yg\!tW0LJ,0-G"7Yg\!tW0LJ,0-G"7Z6h!!i2t
"!>;\J,K?a&,ZD0n:,rg!'^G`%hJF8!$C\1!.VcdJ,K?RJ,b$$oDd_K5Q;2n"91Ub!!%NJ!"],0oD\[g
)#sWO"8Dib!'gJ`"93lN!!*'!!"],0oD\^h)$BdYhuj"sp]*PY!!E9!It.Rt5JRg0s7?6h!#Yn.#N,^a
!W2otIfKI5n/m/_n.3;7&&8;HrW!Z<i!8`RrW)ir!'^G`5N!X!#N,jF!!<bI"9/9")$f(%n,rRgrVup_
!!#7!&&8^k"7Q:$^]XT8!#Z%""7QEj!.FnJ56([JJ.KF+J-59@&&8;HrW!f@huiHNp],aC!'^G`56)50
++OI_!"ZjIrr)m8"5j:N"8DkF!!#4`!'^Go^`S(-n,O!7"9/2u!<_g+"7Q:T!!#4`!'^Go^`NOWp](i?
"9/2u(I.Bkn,PZQ!'^G`56)5056(`Z!"ZjIrqug6"97imn,PZQ!'^G`56)5056(`Z!"ZjIrqug65QC3T
n,PZQ!'^G`56)505QCcY!"ZjIrqug+s829fn,PZQ!'^G`56)$$^d%l!p](i?"9/9")$0bin,r.[56([J
!!#4`&&:F0s7cR)^]T)c!"f>2"7QE^!'^G`56([J!"Zk0r;Zp1^]T)c!"fJ*"7QE^!'^G`56([J!"Zk0
r;[ZF^]T&d!#uO-"7QE^!'^G`56([J!"Zk0r;Zp1^]T'#!!"&N^]X'.n,PZQ!'^G`56)505Q(R!&&89s
!!"&^^]X'.n,PZQ!'^G`56)505Q(R"&&893J,hbTJ-59Cn,Rq<!'^G`56)505Ci_5.hBDt5C`_r++OI_
"7Q;>!!#4`!'^Go^`S(,Du^Ea+!88uHlmk@n,r.[IXV7s56([J!"ZjeJ,o'=&&:CO^]8U$J-5Cqp],aC
!'^G`56)50+2@mG!"Zk0&)[H_+2A!MKD5HE!!#4`!'^Go^^n3]huF;'57d5an/oFVo7QrAqu?^]!!#4`
&&8G."5j.ii-P_("5j^J+8:Ee!VcWpIt.NKJ03\Sph'iI!!hG/"9'CX&+KW!"9/Vq!'gM`"97ljqucp?
J,fiEo)\mkJ-Z,Qrr`<$huH"Arr`;js82otrr<$$s5O*/rr<0$q#1AVs1eV!s8N3$nGiCdJ,TEJ!WU%;
&,6,)J%u$a"9.uo!?_+9!!.S%J,~>

%%EndBinary
grestore
np
f
225.24 192.341 mo
252.72 192.341 li
252.72 186.581 li
225.24 186.581 li
cp
.75021 .679683 .670222 .90164 cmyk
gsave
clp
[1 0 0 -1 22.3055 199.356 ]ct
[27.48 0 0 5.76 202.935 7.01499 ]ct
<<
/T 1
/W 229 
/H 48 
/M[229 0 0 -48 0 48 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
p](;5mf3Iq!!iE]r;Zj!nGN=e54egX#67!gq#(0n5OeUO!.XV@":"pVs7lNm!C-)P!!3+Mo`,+"!WN]*
r;Zm`n,WFf!WR]C!!EN/quc`m!!*>or;ZluJFrmF#7'`!r;?Tr"7Z6h!WR]C!!EN3n,WCb!!*2kr;ZhI
p&G:%J-QVC!.=_F!<_ii!!#4Z!;um%#Cm%$^]8c\!!*2knGiauJ-R13!'^>]!<_i]!!Wsa#=!_=*rQ'>
"7Yg\"qQ4h5C`_Tr;Zj#nF6J_%tFmLJ,gYh!!*2knGiY5J-UT#!!*2knGiY5J-UT#!!*2kr;Zg-p&G1Z
J-UT&!#QgQ!!D_?J,fRu!!!N?p](:9n,NIgJ-UT&!"&]*!!DimhuJ9+%KHV25Q1W_J,TEis8V9]rW!f:
s8RTOp]'^_J,TEMs*t%K!<<'!+92B(rr)m8#P^O!"96:6!.XtJ"98:KJ-#R4^`WUVkPkG\)$f(1^]XT;
qu?`r!!#7Q++OI_&&8/eJ-Z)Q!#6$[&)[Qh!;lfsIK0@4i#f`>i!80?"!<$urr)m8&&8G."8i/u!!%HJ
!'e70^^n3_n,OP\#QF]&)%XLfhuilWIK0@s!!#66&&8^+"7Q:4J-Z)Q!#Z<_#N,^Z!.FnJIK0@4!"Zje
J-59@++OUqrW!f@^^&d"p],aC!.FnJ56)50++OC]!$?^rrql`s#N-=!n,PZQ!.FnJ56)50*rl?:!$?^r
rqla4J)CFu!'^G`IK0@4!"Zk0!!2ip++OUqr;[Z>s54"K!'^G`IK0@4!"Zk0!!2ip++OUqr;[[as54"K
!'^G`IK0@4!"Zk0s8Vio++OUqrW!E/s7bFRn,PZQ!.FnJ56)$$^d%l!p])Cd#QF]&)$BmDhuiHK56(\4
!!#4`&&:F0s7cR9J-UT'!"fJ2#N,^R!'^G`IK0@4!"Zk0r;ZpAJ-UT'!"fb"#N,^R!'^G`IK0@4!"Zk0
r;[ZVJ-UQ(!$!)r#N,^R!'^G`IK0@4!"Zk0r;ZpAJ-UQ<!!"&^J-Y!7n,PZQ!.FnJ56)505Q(R!++OTG
!!"')J-Y!7n,PZQ!.FnJ56)505Q(R"++OS\J,hbt!!hEan,Rq<!.FnJ56)505Ci_5.j'9H5C`_r56(rH
"7Q;>!!%HJ!'^Go^`S(,Du^u159IZ@Hp7T9huiHKIXV7sIK0@4!"ZjeJ,o'=++Sh_^]8UD!!hZhp],aC
!.FnJ56)50+2@mG!$?`@&)[H_5Ca"%"8Dlo!!%HJ!'^Go^^n3]huFjLIh2#Ln3;FFk6(V_qu?_G!!#4`
&&8G."5j/$_"S*/"5k9:5OS^R!VcWprr<%KJ03\Sph'iI!"Zm>"9'CX+6!8!"9/Vq!.Y%J"97ljqucp?
J,g,?k5kV_J.M\WrWE3#huJ9,rWE2is82otrr<$(s2P+hrr<<(nb`KMs1eVas8E-#nGiCdJ,TEJ"94,V
&,6,)s*t(L"9.uo!?_+9!!3*)J,~>

%%EndBinary
grestore
np
f
321.6 192.341 mo
349.08 192.341 li
349.08 186.581 li
321.6 186.581 li
cp
gsave
clp
[1 0 0 -1 22.3055 199.356 ]ct
[27.48 0 0 5.76 299.294 7.01499 ]ct
<<
/T 1
/W 229 
/H 48 
/M[229 0 0 -48 0 48 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
p](;5mf3Iq!!iE]r;Zj!nGN=e54egX#67!gq#(0n5OeUO!.XV@":"pVs7lNm!C-)P!!3+Mo`,+"!WN]*
r;Zm`n,WFf!WR]C!!EN/quc`m!!*>or;ZluJFrmF#7'`!r;?Tr"7Z6h!WR]C!!EN3n,WCb!!*2kr;ZhI
p&G:%J-QVC!.=_F!<_ii!!#4Z!;um%#Cm%$^]8c\!!*2knGiauJ-R13!'^>]!<_i]!!Wsa#=!_=*rQ'>
"7Yg\"qQ4h5C`_Tr;Zj#nF6J_%tFmLJ,gYh!!*2knGiY5J-UT#!!*2knGiY5J-UT#!!*2kr;Zg-p&G1Z
J-UT&!#QgQ!!D_?J,fRu!!!N?p](:9n,NIgJ-UT&!"&]*!!DimhuJ9+%KHV25Q1W_J,TEis8V9]rW!f:
s8RTOp]'^_J,TEMs*t%K!<<'!+92B(rr)m8#P^O!"96:6!.XtJ"98:KJ-#R4^`WUVkPkG\)$f(1^]XT;
qu?`r!!#7Q++OI_&&8/eJ-Z)Q!#6$[&)[Qh!;lfsIK0@4i#f`>i!80?"!<$urr)m8&&8G."8i/u!!%HJ
!'e70^^n3_n,OP\#QF]&)%XLfhuilWIK0@s!!#66&&8^+"7Q:4J-Z)Q!#Z<_#N,^Z!.FnJIK0@4!"Zje
J-59@++OUqrW!f@^^&d"p],aC!.FnJ56)50++OC]!$?^rrql`s#N-=!n,PZQ!.FnJ56)50*rl?:!$?^r
rqla4J)CFu!'^G`IK0@4!"Zk0!!2ip++OUqr;[Z>s54"K!'^G`IK0@4!"Zk0!!2ip++OUqr;[[as54"K
!'^G`IK0@4!"Zk0s8Vio++OUqrW!E/s7bFRn,PZQ!.FnJ56)$$^d%l!p])Cd#QF]&)$BmDhuiHK56(\4
!!#4`&&:F0s7cR9J-UT'!"fJ2#N,^R!'^G`IK0@4!"Zk0r;ZpAJ-UT'!"fb"#N,^R!'^G`IK0@4!"Zk0
r;[ZVJ-UQ(!$!)r#N,^R!'^G`IK0@4!"Zk0r;ZpAJ-UQ<!!"&^J-Y!7n,PZQ!.FnJ56)505Q(R!++OTG
!!"')J-Y!7n,PZQ!.FnJ56)505Q(R"++OS\J,hbt!!hEan,Rq<!.FnJ56)505Ci_5.j'9H5C`_r56(rH
"7Q;>!!%HJ!'^Go^`S(,Du^u159IZ@Hp7T9huiHKIXV7sIK0@4!"ZjeJ,o'=++Sh_^]8UD!!hZhp],aC
!.FnJ56)50+2@mG!$?`@&)[H_5Ca"%"8Dlo!!%HJ!'^Go^^n3]huFjLIh2#Ln3;FFk6(V_qu?_G!!#4`
&&8G."5j/$_"S*/"5k9:5OS^R!VcWprr<%KJ03\Sph'iI!"Zm>"9'CX+6!8!"9/Vq!.Y%J"97ljqucp?
J,g,?k5kV_J.M\WrWE3#huJ9,rWE2is82otrr<$(s2P+hrr<<(nb`KMs1eVas8E-#nGiCdJ,TEJ"94,V
&,6,)s*t(L"9.uo!?_+9!!3*)J,~>

%%EndBinary
grestore
np
f
421.68 192.341 mo
449.16 192.341 li
449.16 186.581 li
421.68 186.581 li
cp
.75021 .679683 .670222 .90164 cmyk
gsave
clp
[1 0 0 -1 22.3055 199.356 ]ct
[27.48 0 0 5.76 399.374 7.01499 ]ct
<<
/T 1
/W 229 
/H 48 
/M[229 0 0 -48 0 48 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
p](;5mf3Iq!!iE]r;Zj!nGN=e54egX#67!gq#(0n5OeUO!.XV@":"pVs7lNm!C-)P!!3+Mo`,+"!WN]*
r;Zm`n,WFf!WR]C!!EN/quc`m!!*>or;ZluJFrmF#7'`!r;?Tr"7Z6h!WR]C!!EN3n,WCb!!*2kr;ZhI
p&G:%J-QVC!.=_F!<_ii!!#4Z!;um%#Cm%$^]8c\!!*2knGiauJ-R13!'^>]!<_i]!!Wsa#=!_=*rQ'>
"7Yg\"qQ4h5C`_Tr;Zj#nF6J_%tFmLJ,gYh!!*2knGiY5J-UT#!!*2knGiY5J-UT#!!*2kr;Zg-p&G1Z
J-UT&!#QgQ!!D_?J,fRu!!!N?p](:9n,NIgJ-UT&!"&]*!!DimhuJ9+%KHV25Q1W_J,TEis8V9]rW!f:
s8RTOp]'^_J,TEMs*t%K!<<'!+92B(rr)m8#P^O!"96:6!.XtJ"98:KJ-#R4^`WUVkPkG\)$f(1^]XT;
qu?`r!!#7Q++OI_&&8/eJ-Z)Q!#6$[&)[Qh!;lfsIK0@4i#f`>i!80?"!<$urr)m8&&8G."8i/u!!%HJ
!'e70^^n3_n,OP\#QF]&)%XLfhuilWIK0@s!!#66&&8^+"7Q:4J-Z)Q!#Z<_#N,^Z!.FnJIK0@4!"Zje
J-59@++OUqrW!f@^^&d"p],aC!.FnJ56)50++OC]!$?^rrql`s#N-=!n,PZQ!.FnJ56)50*rl?:!$?^r
rqla4J)CFu!'^G`IK0@4!"Zk0!!2ip++OUqr;[Z>s54"K!'^G`IK0@4!"Zk0!!2ip++OUqr;[[as54"K
!'^G`IK0@4!"Zk0s8Vio++OUqrW!E/s7bFRn,PZQ!.FnJ56)$$^d%l!p])Cd#QF]&)$BmDhuiHK56(\4
!!#4`&&:F0s7cR9J-UT'!"fJ2#N,^R!'^G`IK0@4!"Zk0r;ZpAJ-UT'!"fb"#N,^R!'^G`IK0@4!"Zk0
r;[ZVJ-UQ(!$!)r#N,^R!'^G`IK0@4!"Zk0r;ZpAJ-UQ<!!"&^J-Y!7n,PZQ!.FnJ56)505Q(R!++OTG
!!"')J-Y!7n,PZQ!.FnJ56)505Q(R"++OS\J,hbt!!hEan,Rq<!.FnJ56)505Ci_5.j'9H5C`_r56(rH
"7Q;>!!%HJ!'^Go^`S(,Du^u159IZ@Hp7T9huiHKIXV7sIK0@4!"ZjeJ,o'=++Sh_^]8UD!!hZhp],aC
!.FnJ56)50+2@mG!$?`@&)[H_5Ca"%"8Dlo!!%HJ!'^Go^^n3]huFjLIh2#Ln3;FFk6(V_qu?_G!!#4`
&&8G."5j/$_"S*/"5k9:5OS^R!VcWprr<%KJ03\Sph'iI!"Zm>"9'CX+6!8!"9/Vq!.Y%J"97ljqucp?
J,g,?k5kV_J.M\WrWE3#huJ9,rWE2is82otrr<$(s2P+hrr<<(nb`KMs1eVas8E-#nGiCdJ,TEJ"94,V
&,6,)s*t(L"9.uo!?_+9!!3*)J,~>

%%EndBinary
grestore
np
f
523.68 192.341 mo
551.16 192.341 li
551.16 186.581 li
523.68 186.581 li
cp
.75021 .679683 .670222 .90164 cmyk
gsave
clp
[1 0 0 -1 22.3055 199.356 ]ct
[27.48 0 0 5.76 501.374 7.01499 ]ct
<<
/T 1
/W 229 
/H 48 
/M[229 0 0 -48 0 48 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
p](;5mf3Iq!!iE]r;Zj!nGN=e+7oO9#67!gq#(0n5OeUO!C),-!!EN,J,f<B!!,=Rr;ZkJ_"@[1#6Fi8
q#(0o5O\[P!!.Sbo`,+""8i8rr;Zj'nGN=fJ&(^W":#2$!W;lr!<_ii!!.Sbo`,+"#Oh`kr;Zj#nGN=f
5CiJ."p]Y`&)[G8r;Zj#nGN=e+8Q!9!!W[Y#9U_]I/O$G"7Yg\"p]Y`+2@k?r;Zj#nF6J_%tFmLJ,gYh
!!*2knGib(J-S;h!$;(=!<_i]!!Wsa#=!_=*rQ'>"7Yg\"!<$uJ,0-G"7Yg\"!<$uJ,0-G"7Z6h!!i2t
"$_;@J,K?a&,ZD0n:,rg!'^G`%hJF8!$C\1!<7QSJ,K?RJ,b$$oDd_K5Q;2n"91Ub!!%NJ!$D7@kPkD[
)#sWO"8Dib!'gJ`"93lN!!*'!!$D7@kPkG\)$BdYhuj"sp]*PY!!E9!It.Rt5JSB@s6'C\!#Yn.#N,^a
!W2otIfKI5n/m/_n.3;7++OUqrW!Z<i!8`RrW)ir!'^G`5N!X!#N,jF!!=<n#QF]&)$f(%n,rRgrVup_
!!#7!&&8^k"7Q:4J-Z)Q!#Z%""7QEj!.FnJ56([JJ.KF+J-59@++OUqrW!f@huiHNp],aC!'^G`56)50
++OI_!$?^rrr)m8"5j:N"8DkF!!#4`!'^Go^`S(-n,OP\#QFW$!<_g+"7Q:T!!#4`!'^Go^`NOWp])Cd
#QFW$(I.Bkn,PZQ!'^G`56)5056(`Z!$?^rrqug6"97imn,PZQ!'^G`56)5056(`Z!$?^rrqug65QC3T
n,PZQ!'^G`56)505QCcY!$?^rrqug+s829fn,PZQ!'^G`56)$$^d%l!p])Cd#QF]&)$0bin,r.[56([J
!!#4`&&:F0s7cR9J-UT'!"f>2"7QE^!'^G`56([J!"Zk0r;ZpAJ-UT'!"fJ*"7QE^!'^G`56([J!"Zk0
r;[ZVJ-UQ(!#uO-"7QE^!'^G`56([J!"Zk0r;ZpAJ-UQ<!!"&N^]X'.n,PZQ!'^G`56)505Q(R!++OTG
!!"&^^]X'.n,PZQ!'^G`56)505Q(R"++OS\J,hbTJ-59Cn,Rq<!'^G`56)505Ci_5.j'9H5C`_r++OI_
"7Q;>!!#4`!'^Go^`S(,Du^u159IZ@Hlmk@n,r.[IXV7s56([J!"ZjeJ,o'=++Sh_^]8U$J-5Cqp],aC
!'^G`56)50+2@mG!$?`@&)[H_+2A!MKD5HE!!#4`!'^Go^^n3]huFjLIh2#Ln/oFVo7QrAqu?^]!!#4`
&&8G."5j/$_"S*/"5j^J+8:Ee!VcWpIt.NKJ03\Sph'iI!"Zm>"9'CX&+KW!"9/Vq!'gM`"97ljqucp?
J,g,?k5kV_J-Z,Qrr`<$huH"Arr`;js82otrr<$(s2P+hrr<0$q#1AVs1eV!s8N3$nGiCdJ,TEJ"94,V
&,6,)J%u$a"9.uo!?_+9!!3*)J,~>

%%EndBinary
grestore
np
f
130.44 36.941 mo
130.44 25.181 135.48 15.581 141.72 15.581 cv
532.92 15.581 li
545.4 15.581 555.6 25.181 555.6 36.941 cv
555.6 36.941 li
.75021 .679683 .670222 .90164 cmyk
@
141.72 36.941 mo
141.72 23.141 146.88 11.981 153.12 11.981 cv
413.88 11.981 li
426.36 11.981 436.56 23.141 436.56 36.941 cv
436.56 36.941 li
@
136.08 36.941 mo
136.08 29.381 143.76 23.261 153.12 23.261 cv
317.52 23.261 li
323.76 23.261 328.8 29.381 328.8 36.941 cv
328.8 36.941 li
@
150.24 36.941 mo
150.24 32.501 154.08 28.901 158.76 28.901 cv
215.52 28.901 li
218.4 28.661 220.92 31.661 221.16 35.621 cv
221.16 36.101 221.16 36.461 221.16 36.941 cv
@
255.12 36.941 mo
255.12 32.501 257.64 28.901 260.76 28.901 cv
311.88 28.901 li
315 28.901 317.52 32.501 317.52 36.941 cv
317.52 36.941 li
@
249.48 36.941 mo
249.48 29.381 254.52 23.261 260.76 23.261 cv
408.24 23.261 li
417.6 23.261 425.16 29.381 425.16 36.941 cv
425.16 36.941 li
@
351.48 36.941 mo
351.48 32.501 353.88 28.901 356.64 28.901 cv
356.88 28.901 357 28.901 357.12 28.901 cv
408.24 28.901 li
410.88 28.301 413.64 30.341 414.12 33.581 cv
414.36 34.661 414.24 35.861 413.88 36.941 cv
@
453.6 36.941 mo
453.84 33.101 456.12 29.981 459.24 28.901 cv
510.24 28.901 li
513.36 29.021 516 32.141 515.88 36.101 cv
515.88 36.461 515.88 36.701 515.88 36.941 cv
@
345.84 36.941 mo
345.84 29.381 350.88 23.261 357.12 23.261 cv
510.24 23.261 li
516.48 23.261 521.52 29.381 521.52 36.941 cv
521.52 36.941 li
@
243.84 36.941 mo
243.84 23.141 251.4 11.981 260.76 11.981 cv
515.88 11.981 li
528.36 11.981 538.56 23.141 538.56 36.941 cv
538.56 36.941 li
@
549.96 28.901 mo
556.56 22.301 li
@
382.68 15.581 mo
389.28 8.98099 li
@
333.6 27.581 mo
340.2 20.981 li
@
480.96 32.741 mo
487.56 26.141 li
@
376.08 32.741 mo
382.68 26.141 li
@
283.44 32.741 mo
290.04 26.141 li
@
182.88 32.741 mo
189.48 26.141 li
@
202.68 18.581 mo
209.28 11.981 li
@
37.8 136.781 mo
73.56 136.781 li
73.56 129.941 li
37.8 129.941 li
cp
.75021 .679683 .670222 .90164 cmyk
gsave
clp
[1 0 0 -1 22.3055 199.356 ]ct
[35.76 0 0 6.84 15.4945 62.575 ]ct
<<
/T 1
/W 298 
/H 57 
/M[298 0 0 -57 0 57 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
i;`itr;Zsb!.WqbjT#:.r;Zsb!WW,Vjo>Dmr;?Tu56q5gi:m<@!!*W.r;Zsb&+G),jo>Dmr;?Tu59IZ_
i8t"?!W;lr"@!uY#N4nJqZ$Wor;Zsb56(fDjT#;Yr;Zsb56(fTjT#;Yr;ZsbIfKN=jT#;Yr;Zj_IKBKM
nDsWMr;?Tu5CNS4nDsWMr;?Tu5CNS4nDsWMr;?Tr5CW5)mf3@cr;Zj_Ic:>-r;?Tr5C`V3!oO&<kl:_]
r;[d$It.M!"5j1S!-j!D!!*%L!!2R2^]VLR!!!7Qqu?^!r;6Nps+!<u^]4@ai#h_9q>]@Q"97iks6tO-
s3L^q!$D5k!$D7=!!E8j5<n'+!.WoKp`KP9p](R!p]:Ebs7lWOs1eVas1eV!s82j%s7ef#p](;Di#h_9
s5X"W&)mKgs7>jWs8O2!!<4/!!.POW!"\&f57daB!!!Pf"8DuuJG]BhJ:7J'pZ)#Zr!2-\r!2]krWE&u
++Sf)#QK;S#N,XX!WN.K!'^HJ!!E7Rp^d-)n,rFfp]13mquAq]5<f8MhuF#?!Vc]p!.Out!$?^nrr`$,
n,r.^n,`Ffp]13lIK1J)!<;fo#N,XX!W2p^!.4cq++OIm!UpWX"7QQR!;lro!;lhE!$ArU5Q1WfhuWTR
p]*MYqu@gh"9&9#&&8;:#N,U]"7Q<g!;lg=^AnfE!!hE_p]:-i561T]%tFc[!!!PF"7Qi:!.G%>!;lip
!"ZgE"93lVhuWTRp])Cdp](i?"8Dir&&8;:&&80SIKT'>quHKl&,uV0s1elt!Vc]j!$?de!"ZjIp](:)
^]X'J^]8ihhuNZUp](j)!!#7A#N,XX!VcX:JbT3U^]X'+!"ZjIn/m/\56p*HquQQm&,uV0+7KNn!Vc]j
!$?dkrt3$Kn,NG!^]X'JJ,he=huNZUrVlp!!"TD*#N,XX!VcX:Jc>Z]^]X'+!"ZjIn/m/\56p*HquQcr
$ig84n-@kPp]:-i++aFk&\nM<!!!PF"7RC_!'^_H!;llrrs\r."8E,Z!Vc]j!$?derW"2Gn,NG!^]X'J
J,he=huNZUp](:Y!!!&p#N,XX!VcX:JbT3F,6.i8!!!PF"7RC_!'^_H!;llm!!#7Q!!2j"huWTRp])Ce
q#17;"7Q9j&&8;:++O>U#N,U[!VcWp5O\XRp]o^Xp]:-i++a4d!$VO7!!!PF"7RC_!'^_H!;llm!!#7Q
!!2j"huWTRp])Ceq#17$"7Q9j&&8;:++O>U('iatquQQm!'g5Y!VcoX!Vc]j!'^M^rW$I2n,NG!^]X':
^]8fghuNZUqu?^]GQ7d>#N,XX!VcXZ!;lg!J-59@!"ZjIn.3;7IKT'>quHWp"2B3`"8E,Z!Vc]j!'^J]
!!e#Vn,NG!^]X':^]8fcn,`Fequ?u:IK0K>IL"d5p]:-iIfTHJ#ClpG!!!PF"7QQR!;lrg!W2rs!!g8f
!!huuhuilXquD0GIK0lY"7Q9j&&8;:#Ohcl!Vccr!.FnY5C\1gi!8`Vs+1.LrW#._*rlE4!!!PF"7QE^
!Vc]j"96/$!$=Ei^^n3_p^dCUrrN#t5JTG_IKT?F!$C,(p]:9pn,W@ks1gk75!M:$5JRC!5Q?<7a7oWV
nGE=es6p$gr'12]rt"#fIin^++7T1m5QCb6!WW2p!WW2h!"],)!WW2h!<;s]rr@QK^]6V!qu@9-pcgn@
rVuruq7m%.s53kZs6p'hs6p$gr'12]5Q?66&g.,2!!E8j5<'bS!!#7A!!2lprW!!!_"Rg4#Q+Q%#Pe8u
!rp&#q#CErpuVPV5PY9[!VkdW!'gA]rVus"puVPV5PY9[!VkdW!'g8Z!<MuX!!#7Z!!*3"q#Kg_!'g8Z
![%Gmk5YKHq#CI<s+'84!'g8Z![%Gmm/["`!'bu~>

%%EndBinary
grestore
np
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/GVYXIO+Times#20New#20Roman#20Bold*1 uf
/GVYXIO+Times#20New#20Roman#20Bold uf
/SJNAAA+Times#20New#20Roman#20Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
