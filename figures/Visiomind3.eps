%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Visiomind.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: leifei
%%CreationDate: 2018/5/20, 11:21:18
%%BoundingBox: 0 0 388 81
%%HiResBoundingBox: 0 0 387.9280 80.3636
%%CropBox: 0 0 387.9280 80.3636
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 922 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-05-20T11:20:35+08:00"
   xmp:CreatorTool=""
   xmp:ModifyDate="2018-05-20T11:20:35+08:00"
   pdf:Keywords=""
   pdf:Producer="福昕PDF打印机 版本 7.2.0.0424">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -80.3636 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 80.3636 li
387.928 80.3636 li
387.928 0 li
cp
clp
[1 0 0 1 -132.947 0 ]ct
201.24 -87.3881 mo
201.24 -85.9481 li
201.24 -86.0681 li
201.48 -84.7481 li
201.48 -84.8681 li
201.84 -83.5481 li
201.84 -83.6681 li
202.08 -82.8281 li
201 -82.4681 li
200.64 -83.1881 li
200.28 -84.5081 li
200.04 -85.8281 li
200.04 -87.2681 li
201.24 -87.3881 li
cp
203.16 -80.7881 mo
203.4 -80.4281 li
203.4 -80.5481 li
204.12 -79.5881 li
204.96 -78.7481 li
205.92 -77.9081 li
205.8 -77.9081 li
206.4 -77.5481 li
205.68 -76.5881 li
205.08 -76.9481 li
204.12 -77.9081 li
203.28 -78.7481 li
202.44 -79.8281 li
202.2 -80.1881 li
203.16 -80.7881 li
cp
208.32 -76.2281 mo
209.16 -75.8681 li
209.04 -75.8681 li
210.36 -75.2681 li
211.56 -74.6681 li
212.52 -74.3081 li
212.16 -73.2281 li
211.2 -73.5881 li
209.88 -74.1881 li
208.56 -74.7881 li
207.72 -75.2681 li
208.32 -76.2281 li
cp
214.8 -73.7081 mo
215.76 -73.3481 li
217.2 -73.1081 li
218.64 -72.7481 li
219.48 -72.6281 li
219.24 -71.4281 li
218.52 -71.5481 li
216.96 -71.9081 li
215.4 -72.2681 li
214.44 -72.5081 li
214.8 -73.7081 li
cp
221.76 -72.3881 mo
223.32 -72.2681 li
223.2 -72.2681 li
226.32 -72.0281 li
226.44 -72.0281 li
226.56 -70.8281 li
226.32 -70.8281 li
223.2 -71.0681 li
221.64 -71.1881 li
221.76 -72.3881 li
cp
228.84 -72.0281 mo
229.44 -72.0281 li
232.44 -72.2681 li
233.64 -72.3881 li
233.76 -71.1881 li
232.56 -71.0681 li
229.44 -70.8281 li
228.96 -70.8281 li
228.84 -72.0281 li
cp
235.92 -72.6281 mo
236.64 -72.7481 li
237.96 -72.9881 li
239.28 -73.3481 li
239.28 -73.2281 li
240.6 -73.5881 li
240.96 -72.5081 li
239.64 -72.1481 li
238.2 -71.7881 li
236.88 -71.5481 li
236.16 -71.4281 li
235.92 -72.6281 li
cp
242.76 -74.4281 mo
243 -74.4281 li
244.08 -75.0281 li
244.08 -74.9081 li
245.16 -75.5081 li
245.04 -75.5081 li
246.12 -76.2281 li
246 -76.1081 li
246.84 -76.7081 li
247.56 -75.7481 li
246.72 -75.1481 li
245.76 -74.5481 li
244.68 -73.9481 li
243.48 -73.3481 li
243.24 -73.2281 li
242.76 -74.4281 li
cp
248.4 -78.3881 mo
248.52 -78.5081 li
249.24 -79.4681 li
249.84 -80.5481 li
249.84 -80.4281 li
250.44 -81.6281 li
250.68 -82.2281 li
251.76 -81.8681 li
251.52 -81.1481 li
250.92 -79.9481 li
250.2 -78.7481 li
249.48 -77.7881 li
249.36 -77.5481 li
248.4 -78.3881 li
cp
251.4 -84.5081 mo
251.76 -85.8281 li
252.96 -85.4681 li
252.6 -84.1481 li
251.4 -84.5081 li
cp
false sop
.750179 .679652 .670191 .901488 cmyk
f
gsave
221.28 -64.7081 mo
221.28 -44.3081 li
254.04 -44.3081 li
254.04 -64.7081 li
cp
eclp
%ADOBeginSubsetFont: PBAAAA+Times#20New#20Roman Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Times#20New#20Roman
Type42DictBegin
[<00010000000b000b000b000b6376742016da331b000000bc000007da6670
676d74209d560000089800000631676c7966ee94f9d00000296000000dfe
68656164c6fbfde300000ecc00000036686865613008ee1200000f040000
0024686d74788f02a72000000f28000000246c6f6361fe36000000000f4c
000000286d617870ad04dd0600000f74000000206e616d6507f51c680000
0f9400000a8470726570eac9ec2f00001a1800000f456764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f000040425554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019234445b01a23444565234520b00325606a20b009234223688a6a6061
20b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b2359
61441cb114008a5279b31940201945208a54582321b03f1b235961442d2c
b110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d
432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b5258
45441b2121592d2c0120b003252349b04060b0206320b000525823b00225
3823b002256538008a63381b212121212159012d2c4bb06451584569b009
43608a103a1b212110592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d
2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802
b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2cb4000100000015b00826b00826b00826b008260f1016134568
3ab001162d2cb4000100000015b00826b00826b00826b008260f10161345
68653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b545820
458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b21
21592d2c014b53234b515ab00225b00425b006254923451869525a58b002
25b00225b00525462345696048592121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c462346608a8a462320468a608a61b8ff8062232010238ab9035803588a
70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2cb0024354584b53234b515a58381b2121591b21
212121592d0000000001000000053333fbae9b0f5f0f3cf5081908000000
0000a2e31dc200000000cf756137fb74fd8c1000080e0000000900010001
00000000000100000721fe4500571000fb74fadf10000001000000000000
000000000000000000090639011c040000f00400004a02aa0054038d0049
02aa002e0400fffb038d00460400002c00000000000000760000015a0000
028c000003100000070a0000078c000009d000000c2e00000dfe00010000
000900f2003c009d000700020010002f00560000062504eb000500020000
003a02be0000000300000000006a00000000000300000001001e006a0000
000300000002000e01120000000300000003007200e00000000300000004
001e006a00000003000000050018015200000003000000060022016a0000
0003000000070076006a0000000300000008003000ae0000000300000009
0086018c000000030000000d029a02120001000000000000003504ac0001
000000000001000f04e10001000000000002000705350001000000000003
0039051c0001000000000004000f04e10001000000000005000c05550001
000000000006001105610001000000000007003b04e10001000000000008
00180503000100000000000900430572000100000000000d014d05b50003
000104030002000c07020003000104050002001007120003000104060002
000c072200030001040700020010072e00030001040800020010073e0003
000104090000006a00000003000104090001001e006a0003000104090002
000e01120003000104090003007200e00003000104090004001e006a0003
0001040900050018015200030001040900060022016a0003000104090007
0076006a0003000104090008003000ae00030001040900090086018c0003
00010409000d029a021200030001040a0002000c070200030001040b0002
0010074e00030001040c0002000c070200030001040e0002000c075e0003
000104100002000e076e00030001041300020012077c0003000104140002
000c07020003000104150002001007020003000104160002000c07020003
000104190002000e078e00030001041b00020010075e00030001041d0002
000c070200030001041f0002000c07020003000104240002000e079c0003
0001042a0002000e07aa00030001042d0002000e07b800030001080a0002
000c07020003000108160002000c0702000300010c0a0002000c07020003
00010c0c0002000c070200a9002000320030003100340020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00540069
006d006500730020004e0065007700200052006f006d0061006e00200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e004d006f006e
006f0074007900700065003a00540069006d006500730020004e00650077
00200052006f006d0061006e00200052006500670075006c00610072003a
00560065007200730069006f006e00200035002e0031003100200028004d
006900630072006f0073006f00660074002900560065007200730069006f
006e00200035002e0032003000540069006d00650073004e006500770052
006f006d0061006e00500053004d0054004d006f006e006f007400790070
006500200054007900700065002000440072006100770069006e00670020
004f006600660069006300650020002d0020005300740061006e006c0065
00790020004d006f007200690073006f006e002c00200056006900630074
006f00720020004c0061007200640065006e007400200031003900330032
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e00740020006100730020007000650072006d0069
00740074006500640020006200790020007400680065002000450055004c
004100200066006f00720020007400680065002000700072006f00640075
0063007400200069006e0020007700680069006300680020007400680069
007300200066006f006e007400200069007300200069006e0063006c0075
00640065006400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e0074002e002000200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002ea9203230313420546865204d6f6e6f7479706520436f7270
6f726174696f6e2e20416c6c205269676874732052657365727665642e54
696d6573204e657720526f6d616e20697320612074726164656d61726b20
6f6620546865204d6f6e6f7479706520436f72706f726174696f6e2e4d6f
6e6f747970653a54696d6573204e657720526f6d616e20526567756c6172
3a56657273696f6e20352e313120284d6963726f736f6674295665727369
6f6e20352e323054696d65734e6577526f6d616e50534d544d6f6e6f7479
706520547970652044726177696e67204f6666696365202d205374616e6c
6579204d6f7269736f6e2c20566963746f72204c617264656e7420313933
32596f75206d617920757365207468697320666f6e74206173207065726d
6974746564206279207468652045554c4120666f72207468652070726f64
75637420696e207768696368207468697320666f6e7420697320696e636c
7564656420746f20646973706c617920616e64207072696e7420636f6e74
656e742e2020596f75206d6179206f6e6c792028692920656d6265642074
68697320666f6e7420696e20636f6e74656e74206173207065726d697474
65642062792074686520656d62656464696e67207265737472696374696f
6e7320696e636c7564656420696e207468697320666f6e743b20616e6420
286969292074656d706f726172696c7920646f776e6c6f61642074686973
20666f6e7420746f2061207072696e746572206f72206f74686572206f75
747075742064657669636520746f2068656c70207072696e7420636f6e74
656e742e004e006f0072006d0061006c006e0079006f00620079010d0065
006a006e00e9006e006f0072006d0061006c005300740061006e00640061
00720064039a03b103bd03bf03bd03b903ba03ac004e006f0072006d0061
0061006c0069004e006f0072006d00e1006c006e0065004e006f0072006d
0061006c0065005300740061006e00640061006100720064041e0431044b
0447043d044b0439004e0061007600610064006e006f0074006801b001a1
0300006e00670041007200720075006e00740061b9005403ecb3032a1f3f
411503e4006003e9009f03e500df03e50004001003e4001003e5003f03e5
007003e400ff03e40005ffc003e1b345453240b803e1b32b2e3240b803e1
b2282932b9ffc003e1b21a1c32bd03e102ac0027001fffc003dfb2161b32
b9ffc003deb2424232b9ffc003deb2363832b9ffc003deb32a2d32df410a
03de00ef03de000203de03df0028001fffc003dfb3282e32f0410d03df00
01037e000f0101001f00a003dd00b003dd0002004003dab32426329fbf03
cc000103ca03c90064001fffc003c9b20d1132410a03c703b70012001f03
b603b50064001fffc003b5b30e1132004173038d000100c0038d00d0038d
00e0038d00f0038d0004006f03a7007f03a7008f03a700af03a70004000f
03a7001f03a7002f03a7004f03a7000403ab03ab00ef03a50001000f03a5
002f03a5006f03a5008f03a50004005403aa0001006b03aa000103a8036a
0022001f038c03940015001f038b03930015001f03a40393001a001f03a2
0394001e001f03a10393001e001f039f0394001e001f039b0394001a001f
039a0393001e001f039903940016001f039803940016001f03970393001b
001f03960394001b001f03950393001b001f03760375001a001f03740375
001a001f03a00373b21e1f10411e03930020039300300393000300200394
003003940040039400030000039400010383036c001e001f03b1036c0032
001f036d036c0032001fffc0037db2212332b9ffc0037db3171932a0410a
037d00b0037d00c0037d00d0037d0004ffc0037cb2212332b9ffc0037cb3
171932a0412d037c00b0037c00c0037c00d0037c00040030037300400373
0002000003730010037300200373000300e0037300f00373000200b00373
00c0037300d003730003008403730090037300a0037300030377036a0029
001f0389036ab2281f40b80367b33940323fbb0366000100400366b3191d
328fbb0366000100400366b3090a3240b80366b3090e3240b80366b3090f
323fbb0365000100400365b3090c3240b80365b31a1d3240b80365b3090e
326b410e0363007b03630002001403630024036300340363004403630004
0363b2242f1fba034e006d0800400e1f7f027f037f047f050430440112bf
033200500800001f0012032d003c080040291f5f3c013760097009800903
10092009300940095009056f037f038f03031f032f033f034f035f0305b8
ffc0b2073a33b8ffc04047063a33900ba00bb00bc00bd00b05b006c006d0
06e006f0060520063006400650066006700680069006a006099006900702
600b700b800b03100b200b300b400b500b051f0701a04185036200010000
0362001003620070036200900362000400f0035f00010020035e0020035f
0030035f0040035e00040000035e0000035f0010035f00d0035e00e0035f
00050010030f0020030f0030030f00d0030f00e0030f00050000030f0010
030f0050030f0060030f0070030f00d0030f00060000030f0010030f0020
030f0030030f00e0030f00f0030f0006030f00270000030e0030030e0002
00e0030e00f0030e0002030e004a00e0030d00f0030d0002030d002700d0
02fc0001001002fc002002fc005002fc000300d002fc00e002fc00020000
02fc001002fc002002fc003002fc005002fc006002fc000600e002fc00f0
02fc0002002002fc003002fc004002fc000302fc406127c02901b02901a0
2901902901403c3f413240223f41321212125f235f255f285fa5046f236f
256f286fa5044f234f254f284fa5043f233f253f283fa5042f232f252f28
2fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8
ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a32370f413b02af00
01005f02af009f02af00df02af0003001f02af002f02af003f02af006f02
af000402af02af001f02ad002f02ad003f02ad004f02ad005f02ad000500
df02ad0001000f02ad001f02ad003f02ad005f02ad009f02ad0005005f02
ad00df02ad0002000f02ad001f02ad003f02ad0003004002acb23a334f41
4a02ac005f02ac009f02ac0003002f02ac003f02ac0002000f02ac003f02
ac00af02ac000300b002ac00e002ac0002004f02ac005f02ac00a002ac00
03001f02ac002f02ac003f02ac0003000f035a0001000f035a001f035a00
3f035a005f035a0070035a000500cf035700df03570002000f0357001f03
570070035700af03570004035a035a0357035702ad02ad02ac02ac032c40
0d31151f001616000000121108104110020c004a000d01a8004a000d0198
004a000d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d864a
0d274a0dbe02280041000d01940041000d0121400b410db4410d4f410d29
410d411002170021000d02150021000d02060021000d01eb0021000d014e
0021000d012c4014210df9210df3210df1210d9d210d71210d3d210d4110
021c001f000d0214001f000d020b001f000d0196001f000d014a001f000d
0126400b1f0dc61f0d571f0d371f0d410d019e0141000d00420141000d00
1e0141000d001b0141000d01f2b40f440f0009bb01f20044000d0201b23c
291fb80200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c9e1f
b801fab23c931fbc01f9010f0101001f01f6b224e41f411501f401490401
001f01f301490401001f01f1014900ab001f01f001490067001f01a6003c
0125001f01a4b23c811f411501a3010f019a001f01a200220801001f01a1
00500401001f019f0149019a001f019d01490067001f019cb22c621fb801
9bb22c791fbc019a002c0101001f0197b22ce41fb80193b22c891fb80192
b22c6c1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f0163
002502ab001f014c010f019a001f01480149006c001f0147b22c891fb801
45b22c9e1fb80144b22c791fb80143b223311fb80127b23c811fbc012300
500101001f011fb223e41f4115011d0023019a001f011c00230801001f01
1b00250801001f010e010f0401001f010d00220401001f0108b223811fb8
0106b425e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f00e2
0149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b80156b2
1fc02cb80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf2c67
1fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b80201b2
1f812cbc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b80101
b21f403cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b80401
b21f3025b802abb61f2a24e41f2623b80156b21f5537ba02350007017540
2c0774076207560751073b0733072d0720071d071c071408120810080e08
0c080a080808060804080208000814b8ffe0402b00000100140610000001
000604000001000410000001001002000001000200000001000002010802
004a00b013034b024b534201b0124b004b5442b0372b4bb807ff52b0382b
4bb008505b58b101018e59b0382bb00288b801005458b801ffb101018e85
1bb0124358b90001012f858d1bb90001017c858d5959014bb0c063004b62
20b0f65323b8010a515ab0052342180016763f183f123e113946443e1139
46443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b
2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59
b0324b5358b0ff1d594bb04753205c58b90271026f4544b90270026f4544
5958b9017a0271455258b90271017a4459594bb04753205c58b900220270
4544b9003c027045445958b901b30022455258b9002201b34459594bb04c
53205c58b9014900224544b1222245445958b901c20149455258b9014901
c24459594bb06753205c58b9002402714544b90050027145445958b9021e
0024455258b90024021e4459594bb8020153205c58b9010f00224544b122
2245445958b90c00010f455258b9010f0c004459594bb01c53205c58b125
254544b12c2545445958b13725455258b125374459594bb0ab53205c58b1
25254544b1232545445958b901590025455258b9002501594459594bb801
0153205c58b125254544b1282545445958b902080025455258b900250208
4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b01b361dc6463456523456023456560234560b08b766818b080
622020b164dc4565234520b003266062636820b003266165b0dc236544b0
64234420b161634565234520b003266062636820b003266165b063236544
b0612344b10063455458b163406544b26140614523614459b3a67f434b45
6523456023456560234560b089766818b080622020b1437f4565234520b0
03266062636820b003266165b07f236544b043234420b1a64b4565234520
b003266062636820b003266165b04b236544b0a62344b1004b455458b14b
406544b2a640a645236144594b5242014b5058b108004259435c58b10800
4259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba04
0001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400
000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b
59b0102342b0112342002b00184569444569444569444569447373737473
73737475752b7373747475184569447373742b4bb021534bb046515a58b0
3cb03c45b040604459012b2b2b2b757575757575757543584010bf3ccf3c
026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf22025f226f227f22
8f229f22af2206757559435c58b6403c9f22ef220375592b2b0174747474
454473737474757545447345447374454473747573737373730075757573
7575752b2b757575752b752b435841220063032d00010003032d0013032d
0023032d0033032d0053032d000500c3032d00d3032d00e3032d00f3032d
00040083032d0093032d00a3032d00b3032d0004032d032d451869447474
7575592b4358b900180332b330353238b80332b361663238b80332b3535a
3238b80332b3454e3238b80332b33c413218b80332b23f330a410f033200
0100ba033200ca033200da033200ea033200fa0332000503320332451869
4474752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b732b74
012b002b2b017373737474732b2b00732b2b002b2b2b017374732b012b2b
012b2b2b2b2b2b2b2b2b2b2b2b2b2b000173750073730045694400737301
73742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b2b00
000000>
[3583 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 118 1 <000100f000000306056800160097401440186018a018e018040018401802
76008600020e411301690141000901a00022000301690141000801a00023
000001f8000f016900160141000001f2400e010f0f020902010509080c02
0300ba01f70003014940120e0e0f401135300f7f0f900fa00f040f1917ba
022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c111239011139
00f5edfc01f52b2b3130005d01715d13253311141616171521353e023511
34272626232207f0014a21133c5cfe026038160a07251a254204c7a1fb87
72381e022525021d317a02dc942a201e1f00>PBAAAA+Times#20New#20Roman AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>PBAAAA+Times#20New#20Roman AddT42Char 
PBAAAA+Times#20New#20Roman /CharStrings get begin
/g1 1 def
end
PBAAAA+Times#20New#20Roman /Encoding get
dup 32 /g1 put
pop
end
%ADOEndSubsetFont
/FDAXXC+Times#20New#20Roman /PBAAAA+Times#20New#20Roman findfont ct_VMDictPut
/FDAXXC+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 223{/.notdef}rp]
FDAXXC+Times#20New#20Roman nf
FDAXXC+Times#20New#20Roman*1 [7.859 0 0 -7.865 0 0 ]msf
245.044 -47.568 mo
( )sh
grestore
gsave
221.28 -64.7081 mo
221.28 -44.3081 li
254.04 -44.3081 li
254.04 -64.7081 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Times#20New#20Roman#20Italic
Type42DictBegin
[<00010000000b000b000b000b637674207fa80825000000bc000007966670
676df2bc5f9700000854000005cd676c7966fe8c57cc00002828000013ce
686561646d7076df00000e240000003668686561f503300d00000e5c0000
0024686d7478ef028c2f00000e80000000306c6f63618c71000000000eb0
000000346d617870ff03900400000ee4000000206e616d65e5d23b0c0000
0f0400000e3270726570ea855fac00001d3800000aed6764697200000000
0000000000000000058e0000054c001f054c001c037100180000ffe10000
ffe80000ffe8fe4afffc056b0023fe68ffe2033e00000095000000950000
000000000000002500a8008e010b007d00820045003200a400ca006b0070
005100af003c00f001d700470004002500770029004000fd001601610046
01370029008e0017ffca0025005bffe902e600020099008100f2007500d6
006300c60006009a01330024003800cc003dff67001305d8003600860095
ffdb0007043400a500d8ffdcfffe004800a200d8013c01530380053e0057
007a007c008c0117012a0138017c0026003c007800bd00c0021009b5000c
004d004e00540058006700b4040100020005005000af01d5034300240058
008b013501c0ffac002000250026002d00410136022bffba001e002a0034
003b003f00850094009800d7012e013d033104b900170040006100b9010e
0116012201bfff9c001f001f004d005c0086008c009600aa00cb00cb011f
0154022f036005a9fee8000e006f007c007d008b00d500f1010a01570178
02b803adfe3fff6affb3ffc4001f0037003f0044004a0078007d009700a2
00a700b600c000c100c600d8011d0150019701ee04740532fd81fed1fee0
ff16fff1000f002d00550068006e007f00890095009e00c200da00e400f8
01040108011101c2023002da030e049e0517ff00ff8700000020002f0041
0057007800870088008800b900c200c5012001280133017401d6020e020f
026c027e02ab02ec038903b103e304e7ff43ffa8ffc3ffdcffe900070023
0023002600520077007d0081008f009900ac00ae00b500b800c800ea00f0
00f40135016a018b01b101b501f7021402ad02d504fc05d805f0ff9dfffc
000b00240025002c0030003000330040004700490057006e009a00bd00c9
00cd00dc00fa00fa011b0139017e0187018a018e0195019601df01f60286
02cf02de039603a903b003c804010432046a058b05e006510761fe96fe9a
ff4bff870013002500340038003e004a0065006b0073007a009c00a200b2
00b700bf00f000f700fb0104011301200124013b01520178017c0181018f
01a001d90248026a026f02700301031d032303270388041f04ab04d104da
057a058bfe26fe59ff2e00010002000a003b003b004700580058005f0066
006b007a007a008b009900af00bc00c000c700cc00e900f200f500fb00fb
0102010a010b01150121012701450145015501570158015e01610168017d
01a301ab01da01ee021002180222028f029402a302d202e703710393039b
03b303d303fe04ff050b05320532054b0559058b05ab05f2065506890742
076207a708ccfd2afdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77
ffa1ffa7ffadffafffc00000000000030094001d001f002000200027002e
0048004b004c005e005f006b0071007c008a00900091009100a700af00b3
00b400c400c600d100d200de00df00df00e600e800ea00eb00f200f500f5
00fc010201180123013101330137015c016201660170017a017a017a0182
01980199019b01b001bf01c001ca01d301d701d801e001e001f601f701f8
02120213022f023702440247024f0252026302650270027f0298029b02a6
02b702ba02c502cf02d602d702e502fe031c031d03450348035d035e0371
0379038103a103b703d403d503d803e103f803fe0404041f042104230425
043a0467048304e00528054b0564056a059f059f05c2060b066a06af06b3
06cb06e8070607280748075007a607b207ff009500af0092009600000000
0000000000000000017e01a80129025b0212020301c302b4019301cd02b2
04ed020e0159017a0300022d042c00c8004d00e602890325013e0378011b
00f1018d00490203007c000e029d02470024000000000052004400330038
005405d3041501a7000002860168005000cf0002004b0024008800ba0025
ffd800110091ff6b00b5011700260065ff9900490080014b01c000f40167
027102ea04fc0310017c01e103d9015501e601ee0434019606cb005c022b
0099003d009f00160039002700de00790120022e005a0099038800940021
0019002a046c05e8000001f203b200aa0296028902b4ffc9020000ec0005
005a0447010004e00000052a001f01eb00ae016800ca02d3028901b50406
01a1014f014b011c0308005e00c70024029d006503750104028002f304d8
00d90239025a032c01f204310303005002e50283005901eb010800ac0196
02f8012100950180004400e501eb02e5007400f301ff02fd038f026801c8
01c70116022b0142033000fe02e101620200002400ee0517010802370066
0006010201e602aa0366019b00d305c203dc044d03b6000401be013702fc
03200244014d0338ffed002506f8030dfed5ff43004402ffff92040bfdef
0155017100d9ffc4032d0461044afbb5fbcf02170192036d0558fff2fe7d
0583023e006605e9073d00790243002500cf00fd00af002a01ef021a0026
001f0025003a000001170490fbfb0251001d02f001f50078018f005f0024
0044005400bf00af006701a8002600050006003f009800fa02ab00c2004d
0375004a00b600c401bf017c006f00130263000c006801520002012e0104
001f001f009a000000f1046900790080005000bd056b00ab0080001e05a5
fe4000ce006e0056004800db018b00b30048023904580053008200820022
0000404154403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c01182f2d2c20b0032545b019234445b01a23444565234520b0032560
6a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a
45208a54582321b03f1b235961441cb114008a5279b31940201945208a54
582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2c
b10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1
1011432343650b2d2c4b525845441b2121592d2c0120b003252349b04060
b0206320b000525823b002253823b002256538008a63381b212121212159
012d2c4bb06451584569b00943608a103a1b212121592d2c01b005251023
208af500b0016023edec2d2c01b005251023208af500b0016123edec2d2c
01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161011020
3c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c35
2d2c76b802ee23701020b802ee4520b0005058b00161593a2f182d2c2121
0c6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f
2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b002
602d2c0c6423648bb84000626023212d2cb4000100000015b00826b00826
b00826b008260f10161345683ab001162d2cb4000100000015b00826b008
26b00826b008260f1016134568653ab001162d2c4b53234b515a5820458a
60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a5838
1b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358
021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425
b00425060c6423646164b807085158b00425b00425012046b01060482046
b0106048590a21211b2121592d2cb012435c580cb00425b00425060c6423
646164b807085158b00425b00425012046b8fff060482046b8fff0604859
0a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b51
5a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c
0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c4623
46608a8a462320468a608a61b8ff8062232010238ab903b003b08a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1
23018851b1400188535a58b910000020885458b202010243604259b12401
885158b920000040885458b202020243604259b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b2021002436042595959592d00000000010000000533330808
19225f0f3cf50819080000000000a31fb8bd00000000cf756142fc05fd8c
0aaa0830000200090001000100000000000100000721fe4500570a3afc05
fa500aaa00180007000000000000000000000000000c0639011c04e30100
0556008a031dffed04e3ffd105c7008e0400002704000030040000360239
0058038dffb8038dff5c00000000000000680000023a0000034400000488
000006b20000082000000a9800000d1400000e90000010340000120e0000
13ce00010000000c00f2003c0082000500020010002f0055000004d90258
000400020000005303ea0000000300000000006a00000000000300000001
001e006a0000000300000002000c01120000000300000003007000e00000
000300000004002c00f20000000300000005001801500000000300000006
0030016800000003000000070076006a0000000300000008003000ae0000
00030000000900860198000000030000000d029a021e0001000000000000
003504b80001000000000001000f04ed0001000000000002000605410001
000000000003003805280001000000000004001605310001000000000005
000c056000010000000000060018056c0001000000000007003b04ed0001
0000000000080018050f000100000000000900430584000100000000000d
014d05c70003000104030002000e07340003000104030004002e07140003
000104050002000e07620003000104050004002e07420003000104060002
000c07900003000104060004002c07700003000104070002000c07bc0003
000104070004002c079c0003000104080002000c07f00003000104080004
002c07d00003000104090000006a00000003000104090001001e006a0003
000104090002000c01120003000104090003007000e00003000104090004
002c00f20003000104090005001801500003000104090006003001680003
0001040900070076006a0003000104090008003000ae0003000104090009
00860198000300010409000d029a021e00030001040a0002000e081c0003
0001040a0004002e07fc00030001040b0002001407bc00030001040b0004
0034079c00030001040c00020010084a00030001040c00040030082a0003
0001040e00020008087a00030001040e00040028085a0003000104100002
000e08a20003000104100004002e08820003000104130002000e08d00003
000104130004002e08b00003000104140002000c07bc0003000104140004
002c079c0003000104150002000e08fe0003000104150004002e08de0003
000104160002000e092c0003000104160004002e090c0003000104190002
000c095a0003000104190004002c093a00030001041b0002000e09860003
0001041b0004002e096600030001041d0002000c07bc00030001041d0004
002c079c00030001041f0002000c09b400030001041f0004002c09940003
000104240002000e09e00003000104240004002e09c000030001042a0002
000e0a0e00030001042a0004002e09ee00030001042d0002000c0a3c0003
0001042d0004002c0a1c00030001080a0002000e081c00030001080a0004
002e07fc0003000108160002000e092c0003000108160004002e090c0003
00010c0a0002000e081c000300010c0a0004002e07fc000300010c0c0002
0010084a000300010c0c00040030082a00a9002000320030003100340020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e00540069006d006500730020004e0065007700200052006f006d0061
006e00200069007300200061002000740072006100640065006d00610072
006b0020006f006600200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
004d006f006e006f0074007900700065003a00540069006d006500730020
004e0065007700200052006f006d0061006e0020004900740061006c0069
0063003a00560065007200730069006f006e00200035002e003100310020
0028004d006900630072006f0073006f0066007400290056006500720073
0069006f006e00200035002e0032003000540069006d00650073004e0065
00770052006f006d0061006e00500053002d004900740061006c00690063
004d0054004d006f006e006f007400790070006500200054007900700065
002000440072006100770069006e00670020004f00660066006900630065
0020002d0020005300740061006e006c006500790020004d006f00720069
0073006f006e002c00200056006900630074006f00720020004c00610072
00640065006e0074002000310039003300320059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e002000200059
006f00750020006d006100790020006f006e006c00790020002800690029
00200065006d0062006500640020007400680069007300200066006f006e
007400200069006e00200063006f006e00740065006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
0068006500200065006d00620065006400640069006e0067002000720065
0073007400720069006300740069006f006e007300200069006e0063006c
007500640065006400200069006e0020007400680069007300200066006f
006e0074003b00200061006e006400200028006900690029002000740065
006d0070006f0072006100720069006c007900200064006f0077006e006c
006f006100640020007400680069007300200066006f006e007400200074
006f002000610020007000720069006e0074006500720020006f00720020
006f00740068006500720020006f00750074007000750074002000640065
007600690063006500200074006f002000680065006c0070002000700072
0069006e007400200063006f006e00740065006e0074002ea92032303134
20546865204d6f6e6f7479706520436f72706f726174696f6e2e20416c6c
205269676874732052657365727665642e54696d6573204e657720526f6d
616e20697320612074726164656d61726b206f6620546865204d6f6e6f74
79706520436f72706f726174696f6e2e4d6f6e6f747970653a54696d6573
204e657720526f6d616e204974616c69633a56657273696f6e20352e3131
20284d6963726f736f66742956657273696f6e20352e323054696d65734e
6577526f6d616e50532d4974616c69634d544d6f6e6f7479706520547970
652044726177696e67204f6666696365202d205374616e6c6579204d6f72
69736f6e2c20566963746f72204c617264656e742031393332596f75206d
617920757365207468697320666f6e74206173207065726d697474656420
6279207468652045554c4120666f72207468652070726f6475637420696e
207768696368207468697320666f6e7420697320696e636c756465642074
6f20646973706c617920616e64207072696e7420636f6e74656e742e2020
596f75206d6179206f6e6c792028692920656d626564207468697320666f
6e7420696e20636f6e74656e74206173207065726d697474656420627920
74686520656d62656464696e67207265737472696374696f6e7320696e63
6c7564656420696e207468697320666f6e743b20616e6420286969292074
656d706f726172696c7920646f776e6c6f6164207468697320666f6e7420
746f2061207072696e746572206f72206f74686572206f75747075742064
657669636520746f2068656c70207072696e7420636f6e74656e742e0054
0069006d006500730020004e0065007700200052006f006d0061006e0020
006300750072007300690076006100540069006d006500730020004e0065
007700200052006f006d0061006e0020006b00750072007a00ed00760061
00540069006d006500730020004e0065007700200052006f006d0061006e
0020006b0075007200730069007600540069006d006500730020004e0065
007700200052006f006d0061006e0020004b00750072007300690076006f
00690074007500540069006d006500730020004e0065007700200052006f
006d0061006e002003a003bb03ac03b303b903b100540069006d00650073
0020004e0065007700200052006f006d0061006e00200043007500720073
00690076006100540069006d006500730020004e0065007700200052006f
006d0061006e0020004900740061006c006900710075006500540069006d
006500730020004e0065007700200052006f006d0061006e002000440151
006c007400540069006d006500730020004e0065007700200052006f006d
0061006e00200043006f0072007300690076006f00540069006d00650073
0020004e0065007700200052006f006d0061006e00200043007500720073
00690065006600540069006d006500730020004e0065007700200052006f
006d0061006e0020006b00750072007300790077006100540069006d0065
00730020004e0065007700200052006f006d0061006e00200049007400e1
006c00690063006f00540069006d006500730020004e0065007700200052
006f006d0061006e0020041a0443044004410438043200540069006d0065
00730020004e0065007700200052006f006d0061006e0020004b00750072
007a00ed0076006100540069006d006500730020004e0065007700200052
006f006d0061006e0020013000740061006c0069006b00540069006d0065
00730020004e0065007700200052006f006d0061006e00200050006f0161
00650076006e006f00540069006d006500730020004e0065007700200052
006f006d0061006e0020006e00670068006900ea006e006700540069006d
006500730020004e0065007700200052006f006d0061006e002000450074
007a0061006e00610000b15400410c03bc003003bc004003bc00a003bc00
b003bc0005ffc003bbb345453240b803bbb32b2e3240b803bbb2282932b9
ffc003bbb31a263280411303bb009f03bb00af03bb00cf03bb0004000003
bb001f03bb000203bb02af0027001fffc003b9b2161b32b9ffc003b8b242
4232b9ffc003b8b2363832b9ffc003b8b32a2d32df410a03b800ef03b800
0203b803b90028001fffc003b9b3282e32f0410f03b90001000003b70001
03b700030800001f03be03bf002b001fffc003bfb2242a32b903b60381b2
3a1f0f411703b3001003b2002003b2005003b2007003b200e003b2000600
cf03b300df03b300ef03b300ff03b30004001203a8b2e2891fbe039f016b
019a001f039800930801400c1f7f047f05027f027f03025fbb02b00001ff
c00117b2196632b8ffc0b3651a6632b9ff800173b2196632bd0384011708
00001fffc002afb2313340b802afb22e3340b802afb328293240b802afb3
26273240b802afb321253240b802afb31c203240b802afb2233340b802af
b21933a0bc02af00b002af00e002afb5034003212932b8fff2b33a263d32
bc038203820382003a0800b51f40255c331eb80381b25c6432b8ffeeb325
2e3314b80381b32b2e3269be03810001008a03810001000e0381b32b2f32
10b80381b3515b320cb80381b34e513222b80381b3474d320eb80381b246
330ab80381400926473212254358320cb80381b2323310b80381b22a3312
b80381b3373d3212bb0381003d0033fff44015253d331825355b32102526
343206252a330c252e33b8fffe4024252d330c3a2f33329925aa25ba25c9
2504052536330c25323832193a293a383a03182517b80381b42825382504
bc0381038103810025080040101f0f1f2b2e32691f781f020b1f303332b8
fff1b31f263d32bc038003800380001f080040151f375f07af07025f06af
060222ac2b2e3209ac2f33b8ffdc400aac1f223222232b52320eb8037fb2
29330eb8037fb2223314b8037fb21e2032b8ffe7b71e2b33321e2b2f32b9
ffc0037fb64c4f3232262c33410affee037f00390033fff8037f002b0033
ffea037fb23a3320b8037fb33f46321eb8037fb32f3a3212b8037fb22e33
1eb8037fb32a2d320eb8037fb2263304b8037fb3494a3404b8037fb24633
04b8037fb2213318b8037f400c1d3322263032322226333832b8fff8400a
262b2f3209261b21328abe037f0001037f037f037f00260800402e1f371f
062f063f06039f02af02bf02cf02049f03af03bf03cf03046f037f038f03
031f032f033f034f035f03050f413502ed0001005f02ed009f02ed00df02
ed0003002f02ed003f02ed006f02ed000300af02af0001004f02af009f02
af0002002f02af003f02af0002003f02b00001004f02af005f02af000200
2f02af003f02af0002007003b2000103b203b202ed02ed02b002b002af02
af401a370100300140010201010009010200080017170000001211084041
0b027b02230034000d013d0034000d01370034000d011b401a340d8f340d
84340d68340d59340d54340d48340d2c340d28340d411002350020000d02
1b0020000d01fc0020000d01c30020000d01500020000d012c401a200df0
200dbe200d94200d79200d6a200d61200d5f200d44200d410d013e013800
0d003d0138000d00300138000d001d0138000d01fdb40f4d0f0009bf01fd
004d000d03b1037f0015001f0215b226341fb80214b2263f1fb80208b21e
bb1f41190206001e0801001f0205001f02ab001f0204001f02ab001f0203
001f0401001f02010031019a001f01fb00230156001f01aeb2262a1fb801
adb2262a1fb801abb226341f411501a8002602ab001f01a5001e0125001f
01a400ab02ab001f01a2003102ab001f01a1003102ab001f019db2236c1f
b8019cb2236c1f4109019b00230401001f019a0033019a001f0176b2262e
1fb8016cb231721f4111016b0023019a001f016800240401001f01450026
0801001f013f00230401001f0123b21e9e1fbc0121001e0201001f0100b4
26791ffd1fb80125b21ffa33b80801b21ff924b802abb21fe826b80101b2
1fe51fb8019ab21fe431b80101400b1fe331e41fe231891fd226b80201b6
1fd026cd1fcd25b80401b21fb731b8019ab21fae26b80801b21fac1eb804
01400b1f9e315e1f97269e1f9333b80801b21f8a24b8019ab21f831fb802
ab40131f82236c1f7523e41f7026cd1f6423721f5e25b80401b21f5d23b8
02abb21f55e6b80401b21f5324b80201b21f4f33b802abb21f4e26b80401
40131f4731671f4626ab1f4331cd1f3e235e1f3a1fb80401b61f3924e41f
3723b80801b21f2e23b80401b21f2a1eb80125400b1f2923ab1f2731ab1f
5537bc01c60007018a0007012b402e077f077107690766074b0740073807
36072d07220721071408120810080e080c080a0808080608040802080008
14b8ffe0402b000001001406100000010006040000010004100000010010
02000001000200000001000002010802004a00b013034b024b5342b0372b
4bb807ff52b0382b4bb009505b58b101018e59014bb0c063004b6220b0f6
5323b8010a515ab005234201b0124b004b544218b0382bb00288b8010054
58b801ffb101018e851bb0124358b900010140858d1bb900010159858d59
590016763f183f123e113946443e113946443e113946443e113946443e11
394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb047
53205c58b9027d027b4544b9027c027b45445958b90146027d455258b902
7d01464459594bb04753205c58b9001e027c4544b90026027c45445958b9
017f001e455258b9001e017f4459594bb05e53205c58b9001f027d4544b9
0025027d45445958b901a8001f455258b9001f01a84459594bb801015320
5c58b1ab1f4544b11f1f45445958b9047000ab455258b900ab0470445959
4bb8012553205c58b1e61f4544b11f1f45445958b9051000e6455258b900
e605104459594bb01753205c58b124244544b1312445445958b122244552
58b124224459594bb05153205c58b124244544b1232445445958b17d2445
5258b1247d4459594bb06e53205c58b124244544b1332445445958b1aa24
455258b124aa4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b4569534201
4b5058b108004259435c58b1080042591610703eb0124358b911b53d801b
ba011c03d9000b2b59b00a2342b00b2342003f3f182b103c012f5d060cb0
062342b0072342b0124358b93b21187e1bba040001a8000b2b59b00c2342
b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f23
42b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b
4bb02e5358b8016b45b02a60b8016b234459001845694445694418456944
4569447373737375757573737475757575752b4bb026534bb03d515a58b1
262645b0196044592b45186944742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b004bb02a534bb03f515a58b1070745b0406044
5973732b2b451869442b2b752b2b4518694475752b2b752b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b74752b2b2b2b2b451869442b002b732b2b2b2b
2b2b2b2b2b012b2b2b007373732b2b2b01435c58b8ffdeb31e1c3318b803
7fb52b3318262b33b9fff00381b112332b2b2b2b590173742b2b2b002b73
752b2b732b2b2b2b2b73752b2b2b2b732b00000000>
[5071 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 104 1 <00010100ffe105c9054c0021015d40400009000a0a110814081b06210615
114010021238113d153b193920392148104c117d117c138e118f159d149c
15bd150e651f6420029c11ae11bc110320230123b8ffc0b320223423b8ff
c0b21d3523b8ffc0b31a1b3423b8ffc0b32e3a3423b8ffc0402c2a35090f
0a1d091a201b1d1a0801071d081911181d190f10101e0001140010110001
11101023212014212120b8ff764012100021201a1919090908022100092f
110111b8028ab2107e21ba033e00010142b5004028183f00b8ffc0401019
3a340f001900300080000400192209b80351b1c2182b2b4e10f45d2b2b01
4de4f6f4e45d003f3c3f3c103c103c2b87042e2b0e7d10c487082e182b0e
7d10c4180010ed0110c00010ed0110c00010ed0110c00010ed0110c0b106
02435458400963118211a211b21104005d593130012b2b2b2b2b5d5d5d5d
435c58b9001fffdeb2193920b8ffdeb219391eb8ffc0b114392b2b2b5900
5d015d051336353426232337210706060706070301363736353426273721
07060706060701013770084348240a02170b5741130a0b50021156160f2e
3f0c01980a311d376d76fd041f0469561e2d3c25250122291667fcd702d2
752e1f171b28042525040f1a6aa1fbf2>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
1 570 2 <0001008affe105a1056b0027008f40242410430b43105c06670b740a760b
771e86109610a700b600b40c0da612c61202060f0102b8014d4009082492
083327200315b80213b71164180900150115b8031eb2028801b80142b227
8800b8ffc0b4143900f40eb8037f40121c40474b341c4014399f1c011c65
28657d182b4e10f45d2b2b4de9fd2bedf4ede45d003ffde43f3cedec10e4
3130005d71015d010323272e032322070607061514163332363733060423
22242635341224333217163332363705a16524040524486e43b386ab6150
e6b88bd95d2f6efef4bba6ff0086ee019fd3637b361818242a056bfe496e
3c5e4527627de4bcc1c5eb7c81afa58bfc91de01a4f02f14142f>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
1 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g1 1 def
/g2 2 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 32 /g1 put
dup 33 /g2 put
pop
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic /HIBBAA+Times#20New#20Roman#20Italic findfont ct_VMDictPut
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 222{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [13.594 0 0 -13.604 0 0 ]msf
222.969 -51.1565 mo
( !)
[11.0401 0 ]xsh
grestore
147 -85.7081 mo
147.12 -84.3881 li
147.36 -83.0681 li
147.36 -83.1881 li
147.6 -81.9881 li
147.96 -81.1481 li
146.76 -80.7881 li
146.52 -81.6281 li
146.16 -82.8281 li
145.92 -84.2681 li
145.8 -85.5881 li
147 -85.7081 li
cp
148.92 -79.1081 mo
149.04 -78.8681 li
149.76 -78.0281 li
150.48 -77.1881 li
151.32 -76.3481 li
151.2 -76.4681 li
152.04 -75.7481 li
151.32 -74.7881 li
150.48 -75.5081 li
149.64 -76.3481 li
148.8 -77.3081 li
148.08 -78.2681 li
147.96 -78.5081 li
148.92 -79.1081 li
cp
153.96 -74.4281 mo
154.08 -74.4281 li
155.16 -73.8281 li
155.04 -73.8281 li
156.24 -73.3481 li
157.32 -72.9881 li
158.28 -72.6281 li
157.8 -71.5481 li
156.96 -71.7881 li
155.76 -72.2681 li
154.56 -72.7481 li
153.48 -73.3481 li
153.36 -73.4681 li
153.96 -74.4281 li
cp
160.44 -72.0281 mo
161.04 -71.9081 li
162.24 -71.6681 li
163.56 -71.5481 li
164.88 -71.4281 li
165.12 -71.3081 li
165.12 -70.1081 li
164.76 -70.2281 li
163.44 -70.3481 li
162.12 -70.4681 li
160.8 -70.7081 li
160.2 -70.8281 li
160.44 -72.0281 li
cp
167.52 -71.1881 mo
168.84 -71.1881 li
171.48 -71.3081 li
171.36 -71.3081 li
172.2 -71.4281 li
172.32 -70.2281 li
171.48 -70.1081 li
168.84 -69.9881 li
167.52 -69.9881 li
167.52 -71.1881 li
cp
174.6 -71.6681 mo
176.4 -72.0281 li
177.48 -72.2681 li
178.68 -72.5081 li
178.56 -72.5081 li
179.16 -72.7481 li
179.52 -71.5481 li
178.92 -71.3081 li
177.84 -71.0681 li
176.64 -70.8281 li
174.72 -70.4681 li
174.6 -71.6681 li
cp
181.44 -73.4681 mo
181.92 -73.7081 li
182.88 -74.1881 li
183.84 -74.6681 li
183.72 -74.6681 li
184.68 -75.2681 li
184.56 -75.2681 li
185.28 -75.8681 li
186.12 -74.9081 li
185.4 -74.3081 li
184.44 -73.7081 li
183.48 -73.1081 li
182.4 -72.6281 li
181.8 -72.3881 li
181.44 -73.4681 li
cp
186.84 -77.4281 mo
187.44 -78.3881 li
187.44 -78.2681 li
188.04 -79.3481 li
188.04 -79.2281 li
188.52 -80.4281 li
188.52 -80.3081 li
189 -81.5081 li
190.08 -81.1481 li
189.6 -79.9481 li
189.12 -78.7481 li
188.4 -77.6681 li
187.8 -76.8281 li
186.84 -77.4281 li
cp
189.6 -83.7881 mo
189.72 -84.2681 li
190.08 -85.7081 li
191.16 -85.5881 li
190.92 -84.0281 li
190.8 -83.5481 li
189.6 -83.7881 li
cp
f
gsave
154.08 -64.7081 mo
154.08 -44.3081 li
188.64 -44.3081 li
188.64 -64.7081 li
cp
eclp
%ADOBeginSubsetFont: PBAAAA+Times#20New#20Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Times#20New#20Roman gcheck setglobal} if
1 346 2 <0002004affe803b705680010002400bab2610820b80106b2050515b80106
b20d0d1ab8010f4012091a002640260240266026a026e026042611b8010f
400e5f006f007f008f00a00005001925ba011e010100182b4e10f45d4ded
4e105d71f64ded003fed3fed31304379404c012423242224020602010301
020607251c1b1d1b1e1b030613260f250b2618191719020621041162001f
061a6201140e116200160c1a620124012062011b08206201121015620019
0a1562002b2b2b2b012b2b2b2b2a2b2b2b2a2b2a2a811334123736333217
16111402062322272637101716333236373611342726272623220706024a
8c745a609c7c9b88d362c2816dc445397136741e2e302439293a44354834
029ee8014f52419fc5feafecfeb695e5c1f7fee8b1956172ac0139e89b73
30213d53fe9c>PBAAAA+Times#20New#20Roman AddT42Char 
PBAAAA+Times#20New#20Roman /CharStrings get begin
/g2 2 def
end
PBAAAA+Times#20New#20Roman /Encoding get
dup 33 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXC+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 /g2 222{/.notdef}rp]
FDAXXC+Times#20New#20Roman nf
FDAXXC+Times#20New#20Roman*1 [7.86 0 0 -7.868 0 0 ]msf
178.791 -47.5623 mo
(!)sh
grestore
gsave
154.08 -64.7081 mo
154.08 -44.3081 li
188.64 -44.3081 li
188.64 -64.7081 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [13.596 0 0 -13.609 0 0 ]msf
155.756 -51.1483 mo
( !)
[11.0397 0 ]xsh
grestore
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
275.64 -92.7881 mo
275.64 -104.548 300.48 -113.908 331.2 -113.908 cv
361.92 -113.908 386.76 -104.548 386.76 -92.7881 cv
386.76 -92.7881 li
386.76 -81.1481 361.92 -71.6681 331.2 -71.6681 cv
300.48 -71.6681 275.64 -81.1481 275.64 -92.7881 cv
@
289.08 -99.0281 mo
310.8 -99.0281 li
310.8 -82.5881 li
289.08 -82.5881 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
289.08 -82.5881 mo
310.8 -82.5881 li
310.8 -99.0281 li
289.08 -99.0281 li
289.08 -82.5881 li
cp
.750179 .679652 .670191 .901488 cmyk
@
296.28 -101.788 mo
296.28 -99.0281 li
@
303.6 -101.788 mo
303.6 -99.0281 li
@
294.48 -103.228 mo
294.48 -103.948 295.32 -104.548 296.28 -104.548 cv
297.36 -104.548 298.08 -103.948 298.08 -103.228 cv
298.08 -103.228 li
298.08 -102.388 297.36 -101.788 296.28 -101.788 cv
295.32 -101.788 294.48 -102.388 294.48 -103.228 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
294.48 -103.228 mo
294.48 -103.948 295.32 -104.548 296.28 -104.548 cv
297.36 -104.548 298.08 -103.948 298.08 -103.228 cv
298.08 -103.228 li
298.08 -102.388 297.36 -101.788 296.28 -101.788 cv
295.32 -101.788 294.48 -102.388 294.48 -103.228 cv
.750179 .679652 .670191 .901488 cmyk
@
301.8 -103.228 mo
301.8 -103.948 302.52 -104.548 303.6 -104.548 cv
304.56 -104.548 305.4 -103.948 305.4 -103.228 cv
305.4 -103.228 li
305.4 -102.388 304.56 -101.788 303.6 -101.788 cv
302.52 -101.788 301.8 -102.388 301.8 -103.228 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
301.8 -103.228 mo
301.8 -103.948 302.52 -104.548 303.6 -104.548 cv
304.56 -104.548 305.4 -103.948 305.4 -103.228 cv
305.4 -103.228 li
305.4 -102.388 304.56 -101.788 303.6 -101.788 cv
302.52 -101.788 301.8 -102.388 301.8 -103.228 cv
.750179 .679652 .670191 .901488 cmyk
@
321.72 -99.0281 mo
343.44 -99.0281 li
343.44 -82.5881 li
321.72 -82.5881 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
321.72 -82.5881 mo
343.44 -82.5881 li
343.44 -99.0281 li
321.72 -99.0281 li
321.72 -82.5881 li
cp
.750179 .679652 .670191 .901488 cmyk
@
328.92 -101.788 mo
328.92 -99.0281 li
@
336.24 -101.788 mo
336.24 -99.0281 li
@
327.12 -103.228 mo
327.12 -103.948 327.96 -104.548 328.92 -104.548 cv
330 -104.548 330.84 -103.948 330.84 -103.228 cv
330.84 -103.228 li
330.84 -102.388 330 -101.788 328.92 -101.788 cv
327.96 -101.788 327.12 -102.388 327.12 -103.228 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
327.12 -103.228 mo
327.12 -103.948 327.96 -104.548 328.92 -104.548 cv
330 -104.548 330.84 -103.948 330.84 -103.228 cv
330.84 -103.228 li
330.84 -102.388 330 -101.788 328.92 -101.788 cv
327.96 -101.788 327.12 -102.388 327.12 -103.228 cv
.750179 .679652 .670191 .901488 cmyk
@
334.44 -103.228 mo
334.44 -103.948 335.28 -104.548 336.24 -104.548 cv
337.2 -104.548 338.04 -103.948 338.04 -103.228 cv
338.04 -103.228 li
338.04 -102.388 337.2 -101.788 336.24 -101.788 cv
335.28 -101.788 334.44 -102.388 334.44 -103.228 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
334.44 -103.228 mo
334.44 -103.948 335.28 -104.548 336.24 -104.548 cv
337.2 -104.548 338.04 -103.948 338.04 -103.228 cv
338.04 -103.228 li
338.04 -102.388 337.2 -101.788 336.24 -101.788 cv
335.28 -101.788 334.44 -102.388 334.44 -103.228 cv
.750179 .679652 .670191 .901488 cmyk
@
354 -99.0281 mo
375.84 -99.0281 li
375.84 -82.5881 li
354 -82.5881 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
354 -82.5881 mo
375.84 -82.5881 li
375.84 -99.0281 li
354 -99.0281 li
354 -82.5881 li
cp
.750179 .679652 .670191 .901488 cmyk
@
361.32 -101.788 mo
361.32 -99.0281 li
@
368.52 -101.788 mo
368.52 -99.0281 li
@
359.4 -103.228 mo
359.4 -103.948 360.24 -104.548 361.32 -104.548 cv
362.28 -104.548 363.12 -103.948 363.12 -103.228 cv
363.12 -103.228 li
363.12 -102.388 362.28 -101.788 361.32 -101.788 cv
360.24 -101.788 359.4 -102.388 359.4 -103.228 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
359.4 -103.228 mo
359.4 -103.948 360.24 -104.548 361.32 -104.548 cv
362.28 -104.548 363.12 -103.948 363.12 -103.228 cv
363.12 -103.228 li
363.12 -102.388 362.28 -101.788 361.32 -101.788 cv
360.24 -101.788 359.4 -102.388 359.4 -103.228 cv
.750179 .679652 .670191 .901488 cmyk
@
366.72 -103.228 mo
366.72 -103.948 367.56 -104.548 368.52 -104.548 cv
369.48 -104.548 370.32 -103.948 370.32 -103.228 cv
370.32 -103.228 li
370.32 -102.388 369.48 -101.788 368.52 -101.788 cv
367.56 -101.788 366.72 -102.388 366.72 -103.228 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
366.72 -103.228 mo
366.72 -103.948 367.56 -104.548 368.52 -104.548 cv
369.48 -104.548 370.32 -103.948 370.32 -103.228 cv
370.32 -103.228 li
370.32 -102.388 369.48 -101.788 368.52 -101.788 cv
367.56 -101.788 366.72 -102.388 366.72 -103.228 cv
.750179 .679652 .670191 .901488 cmyk
@
.24 lw
0 lc
0 lj
2 ml
310.8 -90.8681 mo
321.72 -90.8681 li
@
343.44 -91.2281 mo
354 -90.8681 li
@
.72 lw
414.48 -93.3881 mo
414.48 -105.148 439.44 -114.628 470.04 -114.628 cv
500.76 -114.628 525.6 -105.148 525.6 -93.3881 cv
525.6 -93.3881 li
525.6 -81.7481 500.76 -72.2681 470.04 -72.2681 cv
439.44 -72.2681 414.48 -81.7481 414.48 -93.3881 cv
@
427.92 -99.7481 mo
449.76 -99.7481 li
449.76 -83.1881 li
427.92 -83.1881 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
1 lc
1 lj
10 ml
427.92 -83.1881 mo
449.76 -83.1881 li
449.76 -99.7481 li
427.92 -99.7481 li
427.92 -83.1881 li
cp
.750179 .679652 .670191 .901488 cmyk
@
435.24 -102.388 mo
435.24 -99.7481 li
@
442.44 -102.388 mo
442.44 -99.7481 li
@
433.32 -103.828 mo
433.32 -104.548 434.16 -105.148 435.24 -105.148 cv
436.2 -105.148 437.04 -104.548 437.04 -103.828 cv
437.04 -103.828 li
437.04 -103.108 436.2 -102.388 435.24 -102.388 cv
434.16 -102.388 433.32 -103.108 433.32 -103.828 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
433.32 -103.828 mo
433.32 -104.548 434.16 -105.148 435.24 -105.148 cv
436.2 -105.148 437.04 -104.548 437.04 -103.828 cv
437.04 -103.828 li
437.04 -103.108 436.2 -102.388 435.24 -102.388 cv
434.16 -102.388 433.32 -103.108 433.32 -103.828 cv
.750179 .679652 .670191 .901488 cmyk
@
440.64 -103.828 mo
440.64 -104.548 441.48 -105.148 442.44 -105.148 cv
443.4 -105.148 444.24 -104.548 444.24 -103.828 cv
444.24 -103.828 li
444.24 -103.108 443.4 -102.388 442.44 -102.388 cv
441.48 -102.388 440.64 -103.108 440.64 -103.828 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
440.64 -103.828 mo
440.64 -104.548 441.48 -105.148 442.44 -105.148 cv
443.4 -105.148 444.24 -104.548 444.24 -103.828 cv
444.24 -103.828 li
444.24 -103.108 443.4 -102.388 442.44 -102.388 cv
441.48 -102.388 440.64 -103.108 440.64 -103.828 cv
.750179 .679652 .670191 .901488 cmyk
@
460.56 -99.7481 mo
482.4 -99.7481 li
482.4 -83.1881 li
460.56 -83.1881 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
460.56 -83.1881 mo
482.4 -83.1881 li
482.4 -99.7481 li
460.56 -99.7481 li
460.56 -83.1881 li
cp
.750179 .679652 .670191 .901488 cmyk
@
467.88 -102.388 mo
467.88 -99.7481 li
@
475.08 -102.388 mo
475.08 -99.7481 li
@
466.08 -103.828 mo
466.08 -104.548 466.8 -105.148 467.88 -105.148 cv
468.84 -105.148 469.68 -104.548 469.68 -103.828 cv
469.68 -103.828 li
469.68 -103.108 468.84 -102.388 467.88 -102.388 cv
466.8 -102.388 466.08 -103.108 466.08 -103.828 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
466.08 -103.828 mo
466.08 -104.548 466.8 -105.148 467.88 -105.148 cv
468.84 -105.148 469.68 -104.548 469.68 -103.828 cv
469.68 -103.828 li
469.68 -103.108 468.84 -102.388 467.88 -102.388 cv
466.8 -102.388 466.08 -103.108 466.08 -103.828 cv
.750179 .679652 .670191 .901488 cmyk
@
473.28 -103.828 mo
473.28 -104.548 474.12 -105.148 475.08 -105.148 cv
476.16 -105.148 476.88 -104.548 476.88 -103.828 cv
476.88 -103.828 li
476.88 -103.108 476.16 -102.388 475.08 -102.388 cv
474.12 -102.388 473.28 -103.108 473.28 -103.828 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
473.28 -103.828 mo
473.28 -104.548 474.12 -105.148 475.08 -105.148 cv
476.16 -105.148 476.88 -104.548 476.88 -103.828 cv
476.88 -103.828 li
476.88 -103.108 476.16 -102.388 475.08 -102.388 cv
474.12 -102.388 473.28 -103.108 473.28 -103.828 cv
.750179 .679652 .670191 .901488 cmyk
@
492.84 -99.7481 mo
514.68 -99.7481 li
514.68 -83.1881 li
492.84 -83.1881 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
492.84 -83.1881 mo
514.68 -83.1881 li
514.68 -99.7481 li
492.84 -99.7481 li
492.84 -83.1881 li
cp
.750179 .679652 .670191 .901488 cmyk
@
500.16 -102.388 mo
500.16 -99.7481 li
@
507.36 -102.388 mo
507.36 -99.7481 li
@
498.36 -103.828 mo
498.36 -104.548 499.2 -105.148 500.16 -105.148 cv
501.12 -105.148 501.96 -104.548 501.96 -103.828 cv
501.96 -103.828 li
501.96 -103.108 501.12 -102.388 500.16 -102.388 cv
499.2 -102.388 498.36 -103.108 498.36 -103.828 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
498.36 -103.828 mo
498.36 -104.548 499.2 -105.148 500.16 -105.148 cv
501.12 -105.148 501.96 -104.548 501.96 -103.828 cv
501.96 -103.828 li
501.96 -103.108 501.12 -102.388 500.16 -102.388 cv
499.2 -102.388 498.36 -103.108 498.36 -103.828 cv
.750179 .679652 .670191 .901488 cmyk
@
505.56 -103.828 mo
505.56 -104.548 506.4 -105.148 507.36 -105.148 cv
508.44 -105.148 509.16 -104.548 509.16 -103.828 cv
509.16 -103.828 li
509.16 -103.108 508.44 -102.388 507.36 -102.388 cv
506.4 -102.388 505.56 -103.108 505.56 -103.828 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
505.56 -103.828 mo
505.56 -104.548 506.4 -105.148 507.36 -105.148 cv
508.44 -105.148 509.16 -104.548 509.16 -103.828 cv
509.16 -103.828 li
509.16 -103.108 508.44 -102.388 507.36 -102.388 cv
506.4 -102.388 505.56 -103.108 505.56 -103.828 cv
.750179 .679652 .670191 .901488 cmyk
@
.24 lw
0 lc
0 lj
2 ml
449.76 -91.4681 mo
460.56 -91.4681 li
@
gsave
292.68 -99.3881 mo
292.68 -81.1481 li
308.52 -81.1481 li
308.52 -99.3881 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 836 3 <0001ffedffe802e70389003000b7402432010117221b103f080b040f180b
150f3a2705280b230f9903032f013f014f015f010401b80104400a2ec600
30070524290719b801b5403415c618170b1d24110b028a00c60140120b3f
50010101c90e3ad020e020f020037f208f209f20c0200420a0083a26951a
8a19c618b8ffc040133435184030351840212234a018c01802187c31ba01
44016400182b10f55d2b2b2bf4edf4edf45d5dfdf45d2be4ed003fed3f3c
e4ed3fed3f3ce4ed5d3130015d5d2b005d01032326262322061514161716
161514062322272623220723133316163332363534272e02353436333217
161633323702e73d2505684d3e491d31824cad84485e21122d17253d2506
72634c59101cb3338d6f201a0e67112b1d0389fecd867a4430213c368e90
4068a1220c2e0144987e553e28223cd46a3561860503272f>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g3 3 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 34 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 221{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [7.047 0 0 -7.025 0 0 ]msf
302.535 -84.0151 mo
(")sh
grestore
gsave
292.68 -99.3881 mo
292.68 -81.1481 li
308.52 -81.1481 li
308.52 -99.3881 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 1160 4 <0002ffd1000004a2054c00260031018a407d081609273c2a48004c2a4a2b
5a006a007b00771f792d96069a2daa2ab917bf2abf2e11a606b40702061c
161c892d0303273131040c130d1d0c0b040a1d0b1a14191d1a2622251d26
3104041e1314141313142122221e0001140000012101292f2e1a292e0101
001a02260c0c0b0b000822210100042c1332281413102cba037f001effc0
b3282d341eb8ffc0b31c1e341eb8ffc0b31318341eb80117b67033013331
d404ba030100140213b51340120b3f13b8ff80b326173f13b8ff80400928
183f13400f193e13b8ffc0b30b123e13b8ff80b72d173f1341183913b8ff
c0b612391340113913b8ffc0b3282d3413b8ffc0b31c1e3413b8ffc0b613
183480130113b80173b63209131713320ab80173b1c4182b2b103c2b2b4e
10f45d2b2b2b2b2b2b2b2b2b2b2b2b014de4fde44e105df62b2b2b4de92b
103c2b10c001121739003f3c103c103c3f12392fed10ed111239870e2e2b
0e7d10c4870e2e182b057d10c4180010ed0110c00010ed0110c00010ed01
10c00010ed0110c087103c7dc43130005d015d5d21030627030615141716
170721373637363736371336353426073721321615140607131616170701
163332363534262322070353d94c5075171d166209fdf30b4a1a29132023
ed184b460c01badec4c9af8430606b0bfd584032acc87d7d202c02930110
fe6650372a1812082525030c111d2f770333522d2e400125a88983d91dfe
739258062502db09bf8e6f760800>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g4 4 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 35 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 220{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [12.189 0 0 -12.152 0 0 ]msf
295.327 -87.2776 mo
(#)sh
grestore
gsave
261.72 -125.428 mo
261.72 -107.188 li
277.56 -107.188 li
277.56 -125.428 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [7.047 0 0 -7.025 0 0 ]msf
272.296 -110.05 mo
(")sh
grestore
gsave
261.72 -125.428 mo
261.72 -107.188 li
277.56 -107.188 li
277.56 -125.428 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 1714 5 <0001008effe005cc056b003600c3404c13401439240d3914393149315a12
661f7409740d792a762b840c961fb600b509ba15da0ad628111b211c1d1b
1a12191d1a3032020b1211111e22211422110f22211b1a1a2f250f021f02
0202b80302400c07333392362f030e6425091bb80142b2028801b80142b2
368800bb01170038000b037f400f294014392940474b34296537655c182b
4e10f42b2b4de910f6edf4ede4003fed3f3cecfde65d1112392f3c87082e
2b0e7d10c40111123939180010ed0110c00010ed0110c0313000015d2b01
032336353426232003061114123332363713363534272623233721070606
07060703060623222402353412363736333217163332363705c2652609ad
98fec9c59dc2ca32595a63151a2a5e1c0b02340a4d461911266489a85dd6
fef67f94dd82b3c591752f1619231c056bfe554b246297fedce7fee2befe
ec121f015d482b24131d27270122291b82fea93b27a1010983b0013ddb3f
573013172c00>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g5 5 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 36 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 219{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [12.189 0 0 -12.152 0 0 ]msf
263.648 -113.319 mo
($)sh
grestore
gsave
496.32 -100.108 mo
496.32 -81.8681 li
513.36 -81.8681 li
513.36 -100.108 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 2080 6 <00020027ffe80454058e002f003b01c2409e071e011422190f3f0b401935
0a4019350b40363c340a40363c340b183435340b403233340a403235341b
0a1a0b690a690bdf0ade0b063f154f155f155533040b4019350a4019350b
40223a343635491e493b552e873596019b149a15a600b601b80ab51db434
b3350e540001260101f335010c18223a340a40223a340b40223a343d4025
353d402324343d401c3514141523242626136c0a010a0b2ffe26b801f340
26282e302f4d2314333930261b3a36231403130000280003002f031f1326
141313263324200739b8ffdab21e3939b8032e400b18180e0b133c282613
1000b80303b326af130bb8ffc0400a36350b40329e340b8a0ab8ffc0b736
350a40439e340ab80143400a03e42f95001310130213b8ff80b2533513ba
029500360381400e1b8053351b4025351b401d24341bb8ffc0b228351bb8
ffc040112e3434ef1b011b193c1317133c0a32a7182b2b103c2b10f65d2b
2b2b2b2be9f42b71e4fdf62b2bed2b2b10f4ed2b103c2b10c0003f3c10ed
2b3fed870e2e2b087d10c42b183f011112393912391112390011123939f5
ed2bfc01f510c95d870e103c3c087dc43130012b2b2b2b2b2b715d5d5d00
2b2b2b7201722b2b2b2b2b2b2b2b005d0101061514163332373637170606
232226353437370607062322263534123736333216171336373635342726
232207350334262322001514163332000454fea81c11090d122250224893
40222c1e279177524b4c71be9c7b67364e26620b070c0f152117351b4a39
7efeef422e68013a058efb64601e0a120d186015647c302c39607ce0563b
87749501526a552c33015c2516281a150e110725fd73404efe60be4b4f01
c200>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g6 6 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 37 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 218{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [7.042 0 0 -7.025 0 0 ]msf
506.017 -84.7316 mo
(%)sh
grestore
gsave
496.32 -100.108 mo
496.32 -81.8681 li
513.36 -81.8681 li
513.36 -100.108 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [12.181 0 0 -12.152 0 0 ]msf
498.946 -87.9946 mo
(#)sh
grestore
gsave
529.92 -125.428 mo
529.92 -107.188 li
546.96 -107.188 li
546.96 -125.428 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [7.042 0 0 -7.025 0 0 ]msf
540.333 -110.05 mo
(%)sh
grestore
gsave
529.92 -125.428 mo
529.92 -107.188 li
546.96 -107.188 li
546.96 -125.428 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [12.181 0 0 -12.152 0 0 ]msf
531.822 -113.319 mo
($)sh
grestore
gsave
326.52 -64.7081 mo
326.52 -46.4681 li
349.68 -46.4681 li
349.68 -64.7081 li
cp
eclp
FDAXXC+Times#20New#20Roman*1 [7.055 0 0 -7.038 0 0 ]msf
343.056 -49.3637 mo
(!)sh
grestore
gsave
326.52 -64.7081 mo
326.52 -46.4681 li
349.68 -46.4681 li
349.68 -64.7081 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [12.204 0 0 -12.173 0 0 ]msf
327.604 -52.5724 mo
( !)
[7.45654 0 ]xsh
grestore
.72 lw
310.8 -82.5881 mo
322.32 -73.9481 342.96 -74.0681 354 -82.5881 cv
@
449.76 -83.1881 mo
451.44 -81.0281 477 -68.6681 492.84 -83.1881 cv
@
297 -81.2681 mo
297.48 -80.6681 li
297.36 -80.6681 li
297.84 -79.9481 li
298.44 -79.3481 li
298.32 -79.3481 li
298.92 -78.7481 li
299.52 -78.0281 li
299.52 -78.1481 li
299.88 -77.6681 li
299.16 -76.8281 li
298.68 -77.1881 li
298.08 -77.9081 li
297.48 -78.6281 li
296.88 -79.2281 li
296.4 -79.9481 li
296.04 -80.6681 li
297 -81.2681 li
cp
301.68 -76.2281 mo
303.36 -75.0281 li
305.16 -73.8281 li
305.16 -73.9481 li
305.64 -73.5881 li
305.04 -72.5081 li
304.56 -72.8681 li
302.64 -74.0681 li
300.96 -75.2681 li
301.68 -76.2281 li
cp
307.68 -72.5081 mo
309.24 -71.7881 li
311.4 -70.8281 li
312.12 -70.5881 li
311.64 -69.3881 li
311.04 -69.7481 li
308.76 -70.7081 li
307.2 -71.4281 li
307.68 -72.5081 li
cp
314.28 -69.7481 mo
316.32 -69.1481 li
316.2 -69.1481 li
318.84 -68.4281 li
318.84 -68.3081 li
318.6 -67.2281 li
318.48 -67.2281 li
315.84 -67.9481 li
313.92 -68.6681 li
314.28 -69.7481 li
cp
321.12 -67.8281 mo
321.48 -67.7081 li
321.36 -67.7081 li
324.12 -67.2281 li
325.8 -66.9881 li
325.68 -65.7881 li
323.88 -66.0281 li
321.12 -66.6281 li
320.88 -66.6281 li
321.12 -67.8281 li
cp
328.2 -66.6281 mo
329.64 -66.5081 li
332.4 -66.2681 li
332.88 -66.2681 li
332.88 -65.0681 li
332.4 -65.0681 li
329.52 -65.3081 li
328.08 -65.4281 li
328.2 -66.6281 li
cp
335.28 -66.2681 mo
338.04 -66.2681 li
340.08 -66.5081 li
340.2 -65.3081 li
338.04 -65.0681 li
335.28 -65.0681 li
335.28 -66.2681 li
cp
342.36 -66.7481 mo
343.68 -66.8681 li
343.56 -66.8681 li
346.32 -67.3481 li
347.04 -67.5881 li
347.4 -66.3881 li
346.56 -66.2681 li
343.8 -65.6681 li
342.6 -65.5481 li
342.36 -66.7481 li
cp
349.32 -68.1881 mo
351.72 -68.9081 li
351.6 -68.9081 li
353.88 -69.7481 li
354.24 -68.6681 li
352.08 -67.8281 li
349.68 -66.9881 li
349.32 -68.1881 li
cp
355.92 -70.7081 mo
356.64 -71.0681 li
357.84 -71.7881 li
359.04 -72.3881 li
360 -73.1081 li
360.72 -72.1481 li
359.64 -71.4281 li
358.44 -70.7081 li
357.24 -69.9881 li
356.52 -69.6281 li
355.92 -70.7081 li
cp
361.92 -74.5481 mo
362.4 -74.7881 li
362.28 -74.7881 li
363.36 -75.7481 li
364.44 -76.7081 li
365.4 -77.6681 li
366.24 -76.8281 li
365.28 -75.8681 li
364.2 -74.7881 li
363.12 -73.9481 li
362.64 -73.5881 li
361.92 -74.5481 li
cp
366.96 -79.4681 mo
367.2 -79.8281 li
368.04 -81.0281 li
368.88 -82.2281 li
369.84 -81.5081 li
369 -80.3081 li
368.16 -79.1081 li
367.8 -78.7481 li
366.96 -79.4681 li
cp
f
369.96 -82.1081 mo
370.32 -81.1481 li
370.68 -80.3081 li
371.28 -79.4681 li
371.88 -78.6281 li
371.88 -78.7481 li
372.36 -78.1481 li
371.4 -77.4281 li
370.92 -77.9081 li
370.32 -78.7481 li
369.72 -79.7081 li
369.24 -80.6681 li
368.88 -81.6281 li
369.96 -82.1081 li
cp
374.04 -76.5881 mo
374.4 -76.3481 li
374.28 -76.3481 li
375.36 -75.6281 li
376.44 -74.9081 li
377.64 -74.1881 li
377.52 -74.3081 li
377.88 -74.0681 li
377.4 -72.9881 li
377.04 -73.2281 li
375.72 -73.9481 li
374.64 -74.6681 li
373.56 -75.3881 li
373.32 -75.7481 li
374.04 -76.5881 li
cp
380.04 -72.9881 mo
380.16 -72.9881 li
381.48 -72.3881 li
383.04 -71.7881 li
382.92 -71.7881 li
384.48 -71.1881 li
384 -70.1081 li
382.56 -70.7081 li
381 -71.3081 li
379.68 -71.9081 li
379.56 -71.9081 li
380.04 -72.9881 li
cp
386.76 -70.4681 mo
387.72 -70.2281 li
389.4 -69.7481 li
391.2 -69.2681 li
391.32 -69.2681 li
391.08 -68.0681 li
390.84 -68.0681 li
389.16 -68.5481 li
387.36 -69.0281 li
386.4 -69.3881 li
386.76 -70.4681 li
cp
393.6 -68.7881 mo
396.72 -68.1881 li
398.28 -67.8281 li
398.16 -66.7481 li
396.48 -66.9881 li
393.36 -67.5881 li
393.6 -68.7881 li
cp
400.68 -67.4681 mo
404.64 -66.9881 li
404.52 -66.9881 li
405.48 -66.9881 li
405.36 -65.7881 li
404.4 -65.7881 li
400.56 -66.2681 li
400.68 -67.4681 li
cp
407.76 -66.7481 mo
408.72 -66.6281 li
412.56 -66.3881 li
412.56 -65.1881 li
408.6 -65.4281 li
407.76 -65.5481 li
407.76 -66.7481 li
cp
414.96 -66.3881 mo
417.12 -66.2681 li
419.76 -66.2681 li
419.76 -65.0681 li
417.12 -65.0681 li
414.96 -65.1881 li
414.96 -66.3881 li
cp
422.16 -66.3881 mo
425.64 -66.5081 li
426.84 -66.5081 li
426.96 -65.3081 li
425.64 -65.3081 li
422.16 -65.1881 li
422.16 -66.3881 li
cp
429.24 -66.7481 mo
429.84 -66.7481 li
433.92 -67.2281 li
433.92 -67.1081 li
434.04 -67.2281 li
434.16 -66.0281 li
434.04 -66.0281 li
429.96 -65.5481 li
429.36 -65.5481 li
429.24 -66.7481 li
cp
436.44 -67.4681 mo
438 -67.7081 li
441.12 -68.3081 li
441.36 -67.1081 li
438.24 -66.5081 li
436.56 -66.2681 li
436.44 -67.4681 li
cp
443.4 -68.7881 mo
445.8 -69.2681 li
447.6 -69.7481 li
448.08 -69.8681 li
448.44 -68.6681 li
447.96 -68.5481 li
446.04 -68.0681 li
443.64 -67.5881 li
443.4 -68.7881 li
cp
450.36 -70.5881 mo
451.2 -70.8281 li
452.88 -71.4281 li
454.56 -72.0281 li
454.8 -72.1481 li
455.28 -71.0681 li
454.92 -70.9481 li
453.24 -70.2281 li
451.56 -69.6281 li
450.72 -69.3881 li
450.36 -70.5881 li
cp
456.96 -73.1081 mo
457.68 -73.3481 li
459.12 -74.0681 li
460.56 -74.9081 li
461.16 -75.2681 li
461.76 -74.3081 li
461.16 -73.8281 li
459.72 -72.9881 li
458.16 -72.2681 li
457.56 -72.0281 li
456.96 -73.1081 li
cp
463.2 -76.5881 mo
464.28 -77.4281 li
465.36 -78.3881 li
465.36 -78.2681 li
466.44 -79.3481 li
466.32 -79.2281 li
466.68 -79.5881 li
467.52 -78.8681 li
467.28 -78.5081 li
466.2 -77.4281 li
465 -76.4681 li
463.92 -75.6281 li
463.2 -76.5881 li
cp
468.24 -81.3881 mo
468.84 -82.3481 li
469.56 -83.5481 li
470.64 -82.9481 li
469.92 -81.7481 li
469.2 -80.6681 li
468.24 -81.3881 li
cp
f
.24 lw
482.4 -91.3481 mo
493.2 -91.3481 li
@
470.64 -83.1881 mo
470.76 -81.9881 li
470.88 -80.9081 li
471 -79.8281 li
471.24 -78.8681 li
471.36 -78.7481 li
470.28 -78.2681 li
470.16 -78.5081 li
469.8 -79.5881 li
469.68 -80.7881 li
469.56 -81.9881 li
469.44 -83.1881 li
470.64 -83.1881 li
cp
472.32 -76.5881 mo
472.56 -76.2281 li
472.44 -76.2281 li
473.04 -75.5081 li
473.64 -74.7881 li
474.36 -74.0681 li
474.24 -74.0681 li
474.96 -73.4681 li
475.32 -73.2281 li
474.6 -72.2681 li
474.24 -72.5081 li
473.52 -73.2281 li
472.8 -73.9481 li
472.08 -74.7881 li
471.48 -75.6281 li
471.24 -75.9881 li
472.32 -76.5881 li
cp
477.24 -72.0281 mo
477.36 -71.9081 li
478.2 -71.4281 li
478.2 -71.5481 li
479.16 -71.0681 li
480.12 -70.7081 li
480.12 -70.8281 li
481.08 -70.4681 li
480.96 -70.4681 li
481.56 -70.3481 li
481.32 -69.1481 li
480.72 -69.2681 li
479.76 -69.6281 li
478.68 -69.9881 li
477.72 -70.3481 li
476.76 -70.8281 li
476.64 -70.9481 li
477.24 -72.0281 li
cp
483.84 -69.8681 mo
485.04 -69.7481 li
487.08 -69.6281 li
488.64 -69.6281 li
488.64 -68.4281 li
487.08 -68.4281 li
484.92 -68.5481 li
483.72 -68.6681 li
483.84 -69.8681 li
cp
490.92 -69.7481 mo
491.16 -69.7481 li
493.08 -69.9881 li
492.96 -69.9881 li
494.88 -70.3481 li
494.76 -70.3481 li
495.48 -70.5881 li
495.84 -69.5081 li
495.12 -69.2681 li
493.2 -68.7881 li
491.28 -68.5481 li
491.04 -68.5481 li
490.92 -69.7481 li
cp
497.64 -71.4281 mo
498.24 -71.6681 li
498.12 -71.6681 li
498.96 -72.1481 li
498.84 -72.1481 li
499.56 -72.6281 li
500.28 -73.2281 li
500.16 -73.2281 li
500.88 -73.8281 li
500.76 -73.8281 li
501.12 -74.1881 li
502.08 -73.4681 li
501.72 -72.9881 li
501 -72.2681 li
500.28 -71.6681 li
499.56 -71.1881 li
498.72 -70.7081 li
498.24 -70.3481 li
497.64 -71.4281 li
cp
502.44 -76.1081 mo
502.8 -77.0681 li
503.28 -78.1481 li
503.28 -78.0281 li
503.64 -79.2281 li
503.88 -80.4281 li
503.88 -80.5481 li
505.08 -80.3081 li
505.08 -80.1881 li
504.72 -78.8681 li
504.36 -77.6681 li
503.88 -76.5881 li
503.52 -75.6281 li
502.44 -76.1081 li
cp
f
gsave
406.32 -64.7081 mo
406.32 -46.4681 li
428.28 -46.4681 li
428.28 -64.7081 li
cp
eclp
FDAXXC+Times#20New#20Roman*1 [7.054 0 0 -7.034 0 0 ]msf
422.252 -49.3782 mo
( )sh
grestore
gsave
406.32 -64.7081 mo
406.32 -46.4681 li
428.28 -46.4681 li
428.28 -64.7081 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [12.202 0 0 -12.166 0 0 ]msf
407.388 -52.5846 mo
( !)
[7.45532 0 ]xsh
grestore
gsave
357 -100.108 mo
357 -81.8681 li
372.72 -81.8681 li
372.72 -100.108 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 2712 7 <00020030ffe803c103890026003501d940180920082135018401842a9501
981b932a982eac33b62b0b30b8ffde40170c143fa416a43102362a4a2002
0c2219350c0e2228340eb8ffde40392228343f174f175f17033d30010c40
2228340c401935b916d926e826030102040400161617252626150c0d1627
2f322625160431152c331d26b80395401300272422220007280004041f15
26141515262fb8ffdcb31e123f2fb8032e400d1a1a100b1536282615100d
8a0cbd014300040203001500000203b726ad15401e123f15b8ffc0400e23
25340015101530150390150115b8ff80b2533515bd0295002c0381001200
1dffc0b32e34341db8ffc040172627341d8053359f1def1d021d32361517
15360a32c3182b2b103c2b4e10f45d2b2b2b435c58b9001dffc0b350283f
1db8ffc0b332193f1db8ffc0b318283f1db8ffc0b315233f1db8ffc0b30f
193f1db8ffc0b31e123f1db8ffc0b313193f1db8ffc0b117392b2b2b2b2b
2b2b2b594de9f42b5d712b2bf4ed10fdf6ed2b103c2b10c0003f3c10ed2b
870e2e2b0e7d10c42b183f003c10ed10e401113911123911393911390011
12390110c9870e7d10c4083c870e10c4c43130015d002b2b5d72012b2b2b
5d004bb02a534bb03a515a58bf0035ffd40034ffd40028ffe80027ffe838
38383859005d2b015d010307061514171633323736371706062322263534
373706070623222635341237363332161737072207060215141633323736
35342603c1c316030a080c0d1527412245923e2b2b1615836e4f4c496abf
9373663d511524c54048669f442c6d80ab420389fd5a5b0d09100c09101d
5b18686d2b2931504bab4431796a9f01616a54404a721c3c55feb287444f
a1d6e1554c00>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g7 7 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 38 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
217{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [6.993 0 0 -7.025 0 0 ]msf
366.587 -84.7316 mo
(&)sh
grestore
gsave
357 -100.108 mo
357 -81.8681 li
372.72 -81.8681 li
372.72 -100.108 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [12.096 0 0 -12.152 0 0 ]msf
359.626 -87.9946 mo
(#)sh
grestore
gsave
463.08 -100.108 mo
463.08 -81.8681 li
478.92 -81.8681 li
478.92 -100.108 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 3348 8 <00020036ffe803c1058e00170024010540105b1b01080a01070951005705
bb1c0426b8ffc0b31c1e3426b8ffc04040191a3411050101232418180017
450eea281630174d180d01211a010e00002800180017181f0d0e140d0d0e
21241e39212704070de41a240b0b0d25280e0d101eb80381400f07805335
8f07cf07021f0701076218bc020300170124000dffc0b32a30340db8ffc0
b228350db8ffc0b226350db8ffc0b31c1e340db8ffc0400b191a34c00dd0
0df00d030db8013bb5250d170d250ab8021fb1c3182b2b103c2b10f65d2b
2b2b2b2be4edfd5d5d2be92b103c2b10c0003feded3fed2b870e2e2b087d
10c42b183f011239001112391239f5ed2bfc01f5870e103c3c7dc4313001
712b2b5d005d720103363633321615140204232227013635342726232207
3503163332361235342623220607024fc5608f4e6e8cb8feea87979f0130
2310172d152b29644c58bd8b5b3e5db226058efd4d644a927da1fec1b271
041779151a0d120726faf8378101329c5c689585>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g8 8 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 39 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 216{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [7.047 0 0 -7.025 0 0 ]msf
472.586 -84.7316 mo
(')sh
grestore
gsave
463.08 -100.108 mo
463.08 -81.8681 li
478.92 -81.8681 li
478.92 -100.108 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [12.189 0 0 -12.152 0 0 ]msf
465.729 -87.9946 mo
(#)sh
grestore
gsave
479.28 -64.7081 mo
479.28 -46.4681 li
501.24 -46.4681 li
501.24 -64.7081 li
cp
eclp
FDAXXC+Times#20New#20Roman*1 [7.054 0 0 -7.034 0 0 ]msf
495.212 -49.3782 mo
( )sh
grestore
gsave
479.28 -64.7081 mo
479.28 -46.4681 li
501.24 -46.4681 li
501.24 -64.7081 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [12.202 0 0 -12.166 0 0 ]msf
480.344 -52.5846 mo
( !)
[7.45532 0 ]xsh
grestore
%ADOBeginSubsetFont: PBAAAA+Times#20New#20Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Times#20New#20Roman gcheck setglobal} if
1 652 3 <00010054fe4a027c058e0013003a40239611a71102860c8911020a980911
009801130100000a09a80e22500601068014545e182b10f65dedfd3c3c10
3c003fed3fed3130005d015d01152627260235100037150606021514171e
02027c9765909c0132f67b9e4e211a4a7dfe6f254c6691018ad4013601ff
6e2a44ecfe96c5d6af8aa79a>PBAAAA+Times#20New#20Roman AddT42Char 
1 784 4 <00020049ffed038903af0032003d0349b1020243545840203f400d0d0255
3f4013130255151b072e25080b0b0255250c0d0d025525000c33b8fff040
0b1212025533161313025533b8ffdeb41010025533b8fff440150f0f0255
330c0d0d02553339070c0d0d0255072d2eb8ffc04020091202552e33001e
04292c30340c40090b02550c401d1d02550c40111202550cb8ffd4401e09
1202550c0c047f180118401112025518401d1d02551810251e073c2c0400
2fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd012f2bcd2f
2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a330212533601
12201f39803fa809b60a03122b127d007d3386008b0b8b35061d12163a10
3f803f04091c4c054c06452045224c3a403f891d080a0e0720002249014b
0a490b49354b37433a493d570b670b8509840a840b0f54168316021f3f5f
3f0260083300343c2e292d34bb011b000c000cffc0b609390c280b390cb8
ffc0401a3a35100c500c02400c500c600c03200c500c600c760c040c3c18
b8ffd840290b394f185f186f18032f187f1802187e1f100110251e07303c
403c023c2c04702d802d022d35292c30b803464011040b2ec02d012d6025
00330d0c0c343433b8fffcb41010065533bb016700240025ffc0401a0e39
00251f2580259025044025f0250280250125101010065525bb0243000700
15ffc0b21f3915b80167401e1b2f393107400e3920075007800703100701
f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b10fd2b5d
71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed713fed72fd
5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed11123911
123939313043794047353b1c23051337383638020609080a080206212220
220206350b392000111d131c0012130f1f0d1c0122233b05391c00380834
200135340b121c101c010e22101c013a063c1c002b2b2b3c103c2b012b10
3c2b103c2b2b2a2a2a818181017201710071017172005d4358b23f12015d
59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b60e393720
0e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391cb8fff040
1a0b390a280b3937280b390a280a3937280a390a28093937280939002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59005d5925060706232226353437363637
353426232207061517140623222635343633321716171615111416163332
3736371506232226271106070606151416333202478d24363d5f7b1e29cb
ec57533f2526022f26252fb09f7a4e3b1c120a170f100c153c7066313a01
972c4f4456384c846d1119826a433144785624896622222c3a2e32342d56
90291f422b85fec9833b14070d3c38964493015d3c192c6039485f00>PBAAAA+Times#20New#20Roman AddT42Char 
1 1802 5 <0001002efe4a0256058e00130039402429042a08480503009801110a9809
13000101090aa80e222006300640060306801558a4182b10f65dedfd3c3c
103c003fed3fed3130015d13351617161215100007353636123534272e02
2e98658f9cfecff77b9f4d21194b7c05642a4b6692fe77d5fecafe016e25
45eb016bc5d5b08aa69a>PBAAAA+Times#20New#20Roman AddT42Char 
1 1932 6 <0002fffbffe403b9058e0016002401d2b10202435458b11e05b8fff44010
1010025505140c00180a0d0d0255180cb8ffe6b4131302550cb8fffcb40d
0d02550cb8fffcb40f0f02550cb8fff4400d101002550c0c181700040209
13b803e240111440090d02551415001b25090b21590207003fed3fed3fdd
2bed11121739012f2b2b2b2bdd2bc010c62f2bcd31301bb1060243545840
2618170003020913141500215902071b25090b1e0505262500180c0d0d06
55180210100655180cb8fff8b40d0d06550cb8ffeeb7101006550c0c2625
1112392f2b2bdd2b2bc01112392fcd003fed3fed3fddcd1112173931301b
4079102601a406b606b507ea1f040526430d5d3620267503760486038704
a603ab08074707013a0814270d41131e144418170c00041b160010210121
5902071b25090b1e311f0590050260058005af050305eb0c16000018240c
0c100d500d700d900d04800d900db00d03000d100d200d300db00dc00dd0
0d070db8ffc0b73c350d6025c24b182b4e10f42b5d71723c4d10fd3c103c
10fd5d72ed003fed3fed723f111739f5edfc01f53130437940281920030b
072620031e20011a0a181c0019180b0c1c081e20011f04212001190b1b1c
001d061b2000002b2b2b012b103c103c2b2b2b81810071015d2b005d0172
595901363332161514070623222627113426262322072725331111161633
323635342623220706013b859a8dd2a28bab50a5560f20181c2a0e01132d
336d395b9d9d6435352802f6b9f1d1f495803a3a03b59c481a102370fd28
fddc3233c8bfb0bd1b14>PBAAAA+Times#20New#20Roman AddT42Char 
1 2512 7 <00010046ffe4034a03af002101f5b2080401b102024354584020021a060c
10100255060c0f0f0255060c0d0d02550616250f0907602170210221b8ff
c0b513130255211db8ffd4b4131402551db8ffcab6121202551d3103002f
ed2b2bc42b5d3fc4ed012f2b2b2bcdc431301bb11223b8ffc040732a2d34
0023430d5d36170d5705021c135404530553065407581b581c0767057605
80008021b41bc520d020e000e50509370147015618551c5f236018601c76
18721c8a128e1390119018a601a402af23b301c101c707c719e908e41cea
20f4011806024a1257128b1f8b208023f02307112001bcffe00020ffe000
1fffe0b2001d00b803464030102101602180210200211021202150216021
70219021a021b021c021d021e021f0210d21661ddf0f010fc7162509071d
b8ffd8b214391db8ffd8403812391d31030b21cc1f0c014f0c8f0c020c2f
100030004000600070009000b000c000e00009300040000200aa731a831a
02501a019f1a011ab8010c4012f006010006100620063006400605064322
43b9029100182b4e10f472714ded5d7271fd715de47172ed003fed2b2b3f
eded7110f45d7172e412b10602435458400a531d631d731d03931d01005d
7159393130383838013801715d005d017200722b2b435c58b4001018391b
b8fff0b613390510103901b8ffc0b2103920b8ffc0b11039002b2b2b2b01
2b5959017101060623220235340033321615140623222726262726232207
061514163332373637034a25d8839ce80101b487ae312c3b1e110b23233e
643d51a189624e3734015cb5c30106dfd8010e8f4d262f2615761f1e4a62
a1a4fb432e79>PBAAAA+Times#20New#20Roman AddT42Char 
PBAAAA+Times#20New#20Roman /CharStrings get begin
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
end
PBAAAA+Times#20New#20Roman /Encoding get
dup 34 /g3 put
dup 35 /g4 put
dup 36 /g5 put
dup 37 /g6 put
dup 38 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXC+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
217{/.notdef}rp]
FDAXXC+Times#20New#20Roman nf
FDAXXC+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
190.677 -23.4247 mo
(")sh
195.24 -23.4247 mo
(#)sh
201.488 -23.4247 mo
($)sh
388.683 -23.5511 mo
(")sh
393.373 -23.5511 mo
(%)sh
400.323 -23.5511 mo
($)sh
320.533 104.606 mo
(")sh
325.082 104.606 mo
(&)sh
331.33 104.606 mo
($)sh
145.92 -96.1481 mo
196.08 -96.1481 li
@
133.32 -105.748 mo
158.64 -105.748 li
158.64 -86.5481 li
133.32 -86.5481 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
.72 lw
1 lc
1 lj
10 ml
133.32 -86.5481 mo
158.64 -86.5481 li
158.64 -105.748 li
133.32 -105.748 li
133.32 -86.5481 li
cp
.750179 .679652 .670191 .901488 cmyk
@
141.72 -108.988 mo
141.72 -105.748 li
@
150.24 -108.988 mo
150.24 -105.748 li
@
139.56 -110.668 mo
139.56 -111.508 140.52 -112.228 141.72 -112.228 cv
142.92 -112.228 143.88 -111.508 143.88 -110.668 cv
143.88 -110.668 li
143.88 -109.708 142.92 -108.988 141.72 -108.988 cv
140.52 -108.988 139.56 -109.708 139.56 -110.668 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
139.56 -110.668 mo
139.56 -111.508 140.52 -112.228 141.72 -112.228 cv
142.92 -112.228 143.88 -111.508 143.88 -110.668 cv
143.88 -110.668 li
143.88 -109.708 142.92 -108.988 141.72 -108.988 cv
140.52 -108.988 139.56 -109.708 139.56 -110.668 cv
.750179 .679652 .670191 .901488 cmyk
@
148.08 -110.668 mo
148.08 -111.508 149.04 -112.228 150.24 -112.228 cv
151.32 -112.228 152.28 -111.508 152.28 -110.668 cv
152.28 -110.668 li
152.28 -109.708 151.32 -108.988 150.24 -108.988 cv
149.04 -108.988 148.08 -109.708 148.08 -110.668 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
148.08 -110.668 mo
148.08 -111.508 149.04 -112.228 150.24 -112.228 cv
151.32 -112.228 152.28 -111.508 152.28 -110.668 cv
152.28 -110.668 li
152.28 -109.708 151.32 -108.988 150.24 -108.988 cv
149.04 -108.988 148.08 -109.708 148.08 -110.668 cv
.750179 .679652 .670191 .901488 cmyk
@
.24 lw
0 lc
0 lj
2 ml
196.08 -96.1481 mo
242.28 -96.1481 li
@
229.68 -105.748 mo
255 -105.748 li
255 -86.5481 li
229.68 -86.5481 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
.72 lw
1 lc
1 lj
10 ml
229.68 -86.5481 mo
255 -86.5481 li
255 -105.748 li
229.68 -105.748 li
229.68 -86.5481 li
cp
.750179 .679652 .670191 .901488 cmyk
@
238.08 -108.988 mo
238.08 -105.748 li
@
246.6 -108.988 mo
246.6 -105.748 li
@
235.92 -110.668 mo
235.92 -111.508 236.88 -112.228 238.08 -112.228 cv
239.28 -112.228 240.24 -111.508 240.24 -110.668 cv
240.24 -110.668 li
240.24 -109.708 239.28 -108.988 238.08 -108.988 cv
236.88 -108.988 235.92 -109.708 235.92 -110.668 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
235.92 -110.668 mo
235.92 -111.508 236.88 -112.228 238.08 -112.228 cv
239.28 -112.228 240.24 -111.508 240.24 -110.668 cv
240.24 -110.668 li
240.24 -109.708 239.28 -108.988 238.08 -108.988 cv
236.88 -108.988 235.92 -109.708 235.92 -110.668 cv
.750179 .679652 .670191 .901488 cmyk
@
244.44 -110.668 mo
244.44 -111.508 245.4 -112.228 246.6 -112.228 cv
247.68 -112.228 248.64 -111.508 248.64 -110.668 cv
248.64 -110.668 li
248.64 -109.708 247.68 -108.988 246.6 -108.988 cv
245.4 -108.988 244.44 -109.708 244.44 -110.668 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
244.44 -110.668 mo
244.44 -111.508 245.4 -112.228 246.6 -112.228 cv
247.68 -112.228 248.64 -111.508 248.64 -110.668 cv
248.64 -110.668 li
248.64 -109.708 247.68 -108.988 246.6 -108.988 cv
245.4 -108.988 244.44 -109.708 244.44 -110.668 cv
.750179 .679652 .670191 .901488 cmyk
@
183.48 -105.748 mo
208.8 -105.748 li
208.8 -86.5481 li
183.48 -86.5481 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
183.48 -86.5481 mo
208.8 -86.5481 li
208.8 -105.748 li
183.48 -105.748 li
183.48 -86.5481 li
cp
.750179 .679652 .670191 .901488 cmyk
@
191.88 -108.988 mo
191.88 -105.748 li
@
200.4 -108.988 mo
200.4 -105.748 li
@
189.72 -110.668 mo
189.72 -111.508 190.68 -112.228 191.88 -112.228 cv
193.08 -112.228 194.04 -111.508 194.04 -110.668 cv
194.04 -110.668 li
194.04 -109.708 193.08 -108.988 191.88 -108.988 cv
190.68 -108.988 189.72 -109.708 189.72 -110.668 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
189.72 -110.668 mo
189.72 -111.508 190.68 -112.228 191.88 -112.228 cv
193.08 -112.228 194.04 -111.508 194.04 -110.668 cv
194.04 -110.668 li
194.04 -109.708 193.08 -108.988 191.88 -108.988 cv
190.68 -108.988 189.72 -109.708 189.72 -110.668 cv
.750179 .679652 .670191 .901488 cmyk
@
198.24 -110.668 mo
198.24 -111.508 199.2 -112.228 200.4 -112.228 cv
201.48 -112.228 202.44 -111.508 202.44 -110.668 cv
202.44 -110.668 li
202.44 -109.708 201.48 -108.988 200.4 -108.988 cv
199.2 -108.988 198.24 -109.708 198.24 -110.668 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
198.24 -110.668 mo
198.24 -111.508 199.2 -112.228 200.4 -112.228 cv
201.48 -112.228 202.44 -111.508 202.44 -110.668 cv
202.44 -110.668 li
202.44 -109.708 201.48 -108.988 200.4 -108.988 cv
199.2 -108.988 198.24 -109.708 198.24 -110.668 cv
.750179 .679652 .670191 .901488 cmyk
@
gsave
229.68 -105.148 mo
229.68 -84.7481 li
255 -84.7481 li
255 -105.148 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [7.819 0 0 -7.859 0 0 ]msf
244.094 -87.9744 mo
(%)sh
grestore
gsave
229.68 -105.148 mo
229.68 -84.7481 li
255 -84.7481 li
255 -105.148 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [13.524 0 0 -13.594 0 0 ]msf
233.641 -91.5741 mo
(#)sh
grestore
gsave
184.44 -105.148 mo
184.44 -84.7481 li
208.08 -84.7481 li
208.08 -105.148 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [7.869 0 0 -7.871 0 0 ]msf
198.968 -87.9977 mo
(&)sh
grestore
gsave
184.44 -105.148 mo
184.44 -84.7481 li
208.08 -84.7481 li
208.08 -105.148 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [13.611 0 0 -13.614 0 0 ]msf
188.403 -91.5734 mo
(#)sh
grestore
gsave
135.24 -105.148 mo
135.24 -84.7481 li
158.76 -84.7481 li
158.76 -105.148 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [7.829 0 0 -7.871 0 0 ]msf
149.761 -87.9977 mo
(")sh
grestore
gsave
135.24 -105.148 mo
135.24 -84.7481 li
158.76 -84.7481 li
158.76 -105.148 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [13.542 0 0 -13.614 0 0 ]msf
139.198 -91.5734 mo
(#)sh
grestore
148.08 32.0119 mo
148.08 21.4519 170.64 12.8119 198.6 12.8119 cv
226.56 12.8119 249.12 21.4519 249.12 32.0119 cv
249.12 32.0119 li
249.12 42.5719 226.56 51.2119 198.6 51.2119 cv
170.64 51.2119 148.08 42.5719 148.08 32.0119 cv
@
160.2 26.3719 mo
180.12 26.3719 li
180.12 41.2519 li
160.2 41.2519 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
160.2 41.2519 mo
180.12 41.2519 li
180.12 26.3719 li
160.2 26.3719 li
160.2 41.2519 li
cp
.750179 .679652 .670191 .901488 cmyk
@
166.92 23.8519 mo
166.92 26.3719 li
@
173.52 23.8519 mo
173.52 26.3719 li
@
165.24 22.5319 mo
165.24 21.9319 165.96 21.3319 166.92 21.3319 cv
167.76 21.3319 168.48 21.9319 168.48 22.5319 cv
168.48 22.5319 li
168.48 23.2519 167.76 23.8519 166.92 23.8519 cv
165.96 23.8519 165.24 23.2519 165.24 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
165.24 22.5319 mo
165.24 21.9319 165.96 21.3319 166.92 21.3319 cv
167.76 21.3319 168.48 21.9319 168.48 22.5319 cv
168.48 22.5319 li
168.48 23.2519 167.76 23.8519 166.92 23.8519 cv
165.96 23.8519 165.24 23.2519 165.24 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
171.84 22.5319 mo
171.84 21.9319 172.56 21.3319 173.52 21.3319 cv
174.36 21.3319 175.08 21.9319 175.08 22.5319 cv
175.08 22.5319 li
175.08 23.2519 174.36 23.8519 173.52 23.8519 cv
172.56 23.8519 171.84 23.2519 171.84 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
171.84 22.5319 mo
171.84 21.9319 172.56 21.3319 173.52 21.3319 cv
174.36 21.3319 175.08 21.9319 175.08 22.5319 cv
175.08 22.5319 li
175.08 23.2519 174.36 23.8519 173.52 23.8519 cv
172.56 23.8519 171.84 23.2519 171.84 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
189.96 26.3719 mo
209.76 26.3719 li
209.76 41.2519 li
189.96 41.2519 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
189.96 41.2519 mo
209.76 41.2519 li
209.76 26.3719 li
189.96 26.3719 li
189.96 41.2519 li
cp
.750179 .679652 .670191 .901488 cmyk
@
196.56 23.8519 mo
196.56 26.3719 li
@
203.16 23.8519 mo
203.16 26.3719 li
@
194.88 22.5319 mo
194.88 21.9319 195.72 21.3319 196.56 21.3319 cv
197.52 21.3319 198.24 21.9319 198.24 22.5319 cv
198.24 22.5319 li
198.24 23.2519 197.52 23.8519 196.56 23.8519 cv
195.72 23.8519 194.88 23.2519 194.88 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
194.88 22.5319 mo
194.88 21.9319 195.72 21.3319 196.56 21.3319 cv
197.52 21.3319 198.24 21.9319 198.24 22.5319 cv
198.24 22.5319 li
198.24 23.2519 197.52 23.8519 196.56 23.8519 cv
195.72 23.8519 194.88 23.2519 194.88 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
201.48 22.5319 mo
201.48 21.9319 202.32 21.3319 203.16 21.3319 cv
204.12 21.3319 204.84 21.9319 204.84 22.5319 cv
204.84 22.5319 li
204.84 23.2519 204.12 23.8519 203.16 23.8519 cv
202.32 23.8519 201.48 23.2519 201.48 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
201.48 22.5319 mo
201.48 21.9319 202.32 21.3319 203.16 21.3319 cv
204.12 21.3319 204.84 21.9319 204.84 22.5319 cv
204.84 22.5319 li
204.84 23.2519 204.12 23.8519 203.16 23.8519 cv
202.32 23.8519 201.48 23.2519 201.48 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
219.36 26.3719 mo
239.16 26.3719 li
239.16 41.2519 li
219.36 41.2519 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
219.36 41.2519 mo
239.16 41.2519 li
239.16 26.3719 li
219.36 26.3719 li
219.36 41.2519 li
cp
.750179 .679652 .670191 .901488 cmyk
@
225.96 23.8519 mo
225.96 26.3719 li
@
232.56 23.8519 mo
232.56 26.3719 li
@
224.28 22.5319 mo
224.28 21.9319 225 21.3319 225.96 21.3319 cv
226.92 21.3319 227.64 21.9319 227.64 22.5319 cv
227.64 22.5319 li
227.64 23.2519 226.92 23.8519 225.96 23.8519 cv
225 23.8519 224.28 23.2519 224.28 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
224.28 22.5319 mo
224.28 21.9319 225 21.3319 225.96 21.3319 cv
226.92 21.3319 227.64 21.9319 227.64 22.5319 cv
227.64 22.5319 li
227.64 23.2519 226.92 23.8519 225.96 23.8519 cv
225 23.8519 224.28 23.2519 224.28 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
230.88 22.5319 mo
230.88 21.9319 231.6 21.3319 232.56 21.3319 cv
233.52 21.3319 234.24 21.9319 234.24 22.5319 cv
234.24 22.5319 li
234.24 23.2519 233.52 23.8519 232.56 23.8519 cv
231.6 23.8519 230.88 23.2519 230.88 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
230.88 22.5319 mo
230.88 21.9319 231.6 21.3319 232.56 21.3319 cv
233.52 21.3319 234.24 21.9319 234.24 22.5319 cv
234.24 22.5319 li
234.24 23.2519 233.52 23.8519 232.56 23.8519 cv
231.6 23.8519 230.88 23.2519 230.88 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
.24 lw
0 lc
0 lj
2 ml
180.12 33.8119 mo
189.96 33.8119 li
@
209.76 33.4519 mo
219.36 33.8119 li
@
gsave
163.56 26.1319 mo
163.56 42.6919 li
177.96 42.6919 li
177.96 26.1319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [6.406 0 0 -6.378 0 0 ]msf
172.437 40.0629 mo
(")sh
grestore
gsave
163.56 26.1319 mo
163.56 42.6919 li
177.96 42.6919 li
177.96 26.1319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.081 0 0 -11.033 0 0 ]msf
165.96 37.1605 mo
(#)sh
grestore
gsave
135.48 2.37189 mo
135.48 18.9319 li
149.76 18.9319 li
149.76 2.37189 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [6.353 0 0 -6.378 0 0 ]msf
144.969 16.3049 mo
(")sh
grestore
gsave
135.48 2.37189 mo
135.48 18.9319 li
149.76 18.9319 li
149.76 2.37189 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [10.988 0 0 -11.033 0 0 ]msf
137.152 13.3954 mo
($)sh
grestore
gsave
348.84 25.4119 mo
348.84 41.9719 li
364.32 41.9719 li
364.32 25.4119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [6.398 0 0 -6.378 0 0 ]msf
357.744 39.3422 mo
(%)sh
grestore
gsave
348.84 25.4119 mo
348.84 41.9719 li
364.32 41.9719 li
364.32 25.4119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.066 0 0 -11.033 0 0 ]msf
351.235 36.4434 mo
(#)sh
grestore
gsave
274.08 2.37189 mo
274.08 18.9319 li
287.28 18.9319 li
287.28 2.37189 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 3728 9 <00020058ffe8022e0516000b002901244027176e3a3516763a35122b4012
352b40191b34590c0119230116172945215a282830294d0c007006b8039c
401a0c07280c0f0c290f1f1e21141e1e211b0b1e2a28211e10178a16b801
43b40f0970030cb80147b203600fb80123b7296c121e401b351eb8ffc0b3
3a3b341eb8ffc0b32a34341eb8ffc040092324341e401f20341eb8ffc040
13131634301e8f1e021e192a1e171e2a0a7786182b2b103c2b4e10f45d2b
2b2b2b2b2b435c58400b1e401c113f1e400d113f1eb8ffc0b3160d3f1eb8
ffc0b117392b2b2b2b594de4fde4e610ed10f6ed2b103c2b10c0003f870e
2e2b087d10c42b183f00f6ed10f5ed2bfc01f510c9313001715d2b2b435c
58b517400c143f0db8ffdeb61339172213390db8ffdeb50f3917400f392b
2b2b2b2b59012b2b01321615140623222635343613030615141633323736
371706070623222635343713363534262322073501ca2a3a3b29293b3a37
c614130d0f15393a23445c443e29341982201f1b164505163a2a293b3b29
2a3afe73fd43470e1014102d53176847353125255601c06e1c161c0b2700
>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g9 9 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 40 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 215{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [6.358 0 0 -6.378 0 0 ]msf
283.319 16.3049 mo
(\()sh
grestore
gsave
274.08 2.37189 mo
274.08 18.9319 li
287.28 18.9319 li
287.28 2.37189 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [10.998 0 0 -11.033 0 0 ]msf
275.764 13.3954 mo
($)sh
grestore
gsave
194.4 63.3319 mo
194.4 79.8919 li
215.4 79.8919 li
215.4 63.3319 li
cp
eclp
FDAXXC+Times#20New#20Roman*1 [6.397 0 0 -6.389 0 0 ]msf
209.387 77.2709 mo
(!)sh
grestore
gsave
194.4 63.3319 mo
194.4 79.8919 li
215.4 79.8919 li
215.4 63.3319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.066 0 0 -11.052 0 0 ]msf
195.359 74.373 mo
( !)
[6.76125 0 ]xsh
grestore
.72 lw
180.12 41.2519 mo
190.44 50.0119 209.28 49.7719 219.36 41.2519 cv
@
167.52 42.4519 mo
167.88 43.0519 li
168.36 43.6519 li
168.84 44.2519 li
168.72 44.2519 li
169.32 44.8519 li
169.8 45.4519 li
169.8 45.3319 li
170.4 45.9319 li
170.52 45.9319 li
169.68 46.8919 li
168.96 46.2919 li
168.36 45.5719 li
167.88 44.9719 li
167.4 44.3719 li
166.92 43.7719 li
166.56 43.0519 li
167.52 42.4519 li
cp
172.32 47.4919 mo
173.28 48.2119 li
173.28 48.0919 li
174.96 49.1719 li
176.28 50.0119 li
175.8 50.9719 li
174.36 50.2519 li
172.56 49.1719 li
171.6 48.4519 li
172.32 47.4919 li
cp
178.44 51.0919 mo
178.68 51.0919 li
178.56 51.0919 li
180.72 52.0519 li
180.6 52.0519 li
182.76 52.7719 li
182.4 53.9719 li
180.24 53.1319 li
178.08 52.1719 li
177.96 52.1719 li
178.44 51.0919 li
cp
185.04 53.6119 mo
187.32 54.2119 li
189.72 54.8119 li
189.36 55.8919 li
187.08 55.4119 li
184.68 54.6919 li
185.04 53.6119 li
cp
192 55.1719 mo
192.12 55.2919 li
194.64 55.6519 li
196.68 55.8919 li
196.56 57.0919 li
194.52 56.8519 li
192 56.4919 li
191.76 56.3719 li
192 55.1719 li
cp
199.08 56.0119 mo
199.68 56.1319 li
202.32 56.1319 li
202.2 56.1319 li
203.88 56.1319 li
203.88 57.3319 li
202.2 57.3319 li
199.68 57.3319 li
198.96 57.2119 li
199.08 56.0119 li
cp
206.16 56.0119 mo
207.36 55.8919 li
209.88 55.5319 li
210.84 55.4119 li
211.08 56.4919 li
210 56.7319 li
207.48 57.0919 li
206.28 57.2119 li
206.16 56.0119 li
cp
213.24 54.9319 mo
214.8 54.4519 li
217.2 53.7319 li
217.68 53.4919 li
218.16 54.5719 li
217.56 54.8119 li
215.16 55.6519 li
213.48 56.0119 li
213.24 54.9319 li
cp
219.84 52.6519 mo
221.76 51.6919 li
221.76 51.8119 li
223.92 50.4919 li
223.8 50.4919 li
224.04 50.3719 li
224.76 51.4519 li
224.52 51.5719 li
222.24 52.7719 li
220.44 53.7319 li
219.84 52.6519 li
cp
225.96 49.0519 mo
226.92 48.3319 li
227.88 47.4919 li
227.76 47.4919 li
228.72 46.6519 li
229.44 45.9319 li
230.4 46.7719 li
229.56 47.4919 li
228.6 48.4519 li
227.64 49.2919 li
226.68 50.0119 li
225.96 49.0519 li
cp
231 44.1319 mo
231.36 43.7719 li
231.24 43.7719 li
232.08 42.6919 li
232.08 42.8119 li
232.8 41.6119 li
233.88 42.3319 li
233.04 43.4119 li
232.2 44.4919 li
231.96 44.8519 li
231 44.1319 li
cp
f
233.88 41.8519 mo
234.24 42.6919 li
234.24 42.5719 li
234.6 43.4119 li
234.6 43.2919 li
235.08 44.1319 li
235.68 44.8519 li
236.28 45.5719 li
235.44 46.4119 li
234.72 45.5719 li
234.12 44.8519 li
233.52 44.0119 li
233.16 43.0519 li
232.8 42.2119 li
233.88 41.8519 li
cp
238.08 47.1319 mo
238.8 47.6119 li
239.76 48.2119 li
240.84 48.8119 li
241.92 49.4119 li
242.04 49.5319 li
241.56 50.6119 li
241.44 50.4919 li
240.24 49.8919 li
239.16 49.2919 li
238.08 48.5719 li
237.36 48.0919 li
238.08 47.1319 li
cp
244.2 50.4919 mo
244.44 50.6119 li
245.76 51.0919 li
247.08 51.5719 li
248.52 52.0519 li
248.64 52.1719 li
248.28 53.2519 li
248.16 53.2519 li
246.72 52.7719 li
245.28 52.1719 li
243.96 51.6919 li
243.72 51.5719 li
244.2 50.4919 li
cp
250.92 52.7719 mo
251.64 53.0119 li
253.2 53.3719 li
254.76 53.7319 li
255.6 53.8519 li
255.36 55.0519 li
254.52 54.9319 li
252.84 54.5719 li
251.28 54.0919 li
250.68 53.9719 li
250.92 52.7719 li
cp
258 54.3319 mo
258.24 54.4519 li
261.72 54.9319 li
262.68 55.0519 li
262.56 56.2519 li
261.6 56.1319 li
258 55.6519 li
257.76 55.5319 li
258 54.3319 li
cp
265.08 55.4119 mo
265.44 55.4119 li
265.32 55.4119 li
269.16 55.7719 li
269.04 55.7719 li
269.76 55.7719 li
269.76 56.9719 li
269.04 56.9719 li
265.2 56.6119 li
264.84 56.6119 li
265.08 55.4119 li
cp
272.16 55.8919 mo
272.88 56.0119 li
276.72 56.1319 li
276.96 56.1319 li
276.96 57.3319 li
276.72 57.3319 li
272.88 57.2119 li
272.16 57.0919 li
272.16 55.8919 li
cp
279.36 56.1319 mo
280.56 56.1319 li
284.16 56.0119 li
284.16 57.2119 li
280.68 57.3319 li
279.36 57.3319 li
279.36 56.1319 li
cp
286.44 55.7719 mo
288.36 55.6519 li
288.24 55.6519 li
291.24 55.4119 li
291.36 56.6119 li
288.36 56.8519 li
286.56 56.9719 li
286.44 55.7719 li
cp
293.64 55.0519 mo
295.8 54.8119 li
298.32 54.3319 li
298.56 55.5319 li
295.92 56.0119 li
293.76 56.2519 li
293.64 55.0519 li
cp
300.6 53.8519 mo
302.88 53.3719 li
302.76 53.3719 li
305.28 52.7719 li
305.64 53.8519 li
303.12 54.5719 li
300.96 55.0519 li
300.6 53.8519 li
cp
307.56 52.0519 mo
307.68 52.0519 li
309.24 51.4519 li
310.8 50.8519 li
312 50.3719 li
312.48 51.4519 li
311.16 52.0519 li
309.72 52.5319 li
308.16 53.1319 li
307.92 53.2519 li
307.56 52.0519 li
cp
314.16 49.4119 mo
315 48.9319 li
314.88 49.0519 li
316.2 48.3319 li
317.4 47.6119 li
318.24 47.0119 li
318.84 47.9719 li
318.12 48.5719 li
316.8 49.2919 li
315.48 50.0119 li
314.64 50.4919 li
314.16 49.4119 li
cp
320.04 45.5719 mo
320.64 45.0919 li
320.64 45.2119 li
321.6 44.2519 li
321.48 44.2519 li
322.32 43.4119 li
323.16 42.4519 li
323.28 42.2119 li
324.24 42.9319 li
324.12 43.1719 li
323.28 44.1319 li
322.44 45.0919 li
321.36 46.0519 li
320.88 46.5319 li
320.04 45.5719 li
cp
f
325.56 40.7719 mo
325.56 41.9719 li
325.56 41.8519 li
325.8 43.0519 li
325.8 42.9319 li
325.92 44.0119 li
326.28 44.9719 li
326.4 45.2119 li
325.2 45.6919 li
325.08 45.3319 li
324.84 44.2519 li
324.6 43.1719 li
324.36 41.9719 li
324.36 40.7719 li
325.56 40.7719 li
cp
327.36 47.2519 mo
327.48 47.4919 li
327.48 47.3719 li
327.96 48.2119 li
327.96 48.0919 li
328.56 48.8119 li
329.16 49.4119 li
329.88 50.0119 li
329.76 50.0119 li
330.48 50.4919 li
329.88 51.5719 li
329.88 51.4519 li
329.04 50.9719 li
328.32 50.3719 li
327.72 49.6519 li
327 48.9319 li
326.52 48.0919 li
326.4 47.9719 li
327.36 47.2519 li
cp
332.52 51.6919 mo
332.88 51.8119 li
333.72 52.1719 li
333.6 52.0519 li
334.56 52.4119 li
335.4 52.6519 li
336.96 53.0119 li
336.72 54.0919 li
335.16 53.8519 li
334.2 53.4919 li
333.24 53.2519 li
332.4 52.8919 li
332.04 52.7719 li
332.52 51.6919 li
cp
339.24 53.2519 mo
340.92 53.2519 li
342.84 53.1319 li
342.72 53.1319 li
343.92 53.0119 li
344.16 54.2119 li
342.84 54.3319 li
340.92 54.4519 li
339.24 54.4519 li
339.24 53.2519 li
cp
346.32 52.6519 mo
346.32 52.6519 li
346.2 52.6519 li
347.88 52.1719 li
349.44 51.4519 li
349.44 51.5719 li
350.16 51.0919 li
350.16 51.2119 li
350.52 50.9719 li
351.12 51.9319 li
350.76 52.1719 li
349.92 52.6519 li
348.24 53.2519 li
346.56 53.7319 li
346.32 52.6519 li
cp
352.32 49.5319 mo
352.68 49.1719 li
352.68 49.2919 li
353.16 48.5719 li
353.64 47.8519 li
353.64 47.9719 li
354.12 47.1319 li
354.48 46.2919 li
354.72 45.6919 li
355.8 46.1719 li
355.56 46.7719 li
355.2 47.7319 li
354.6 48.5719 li
354.12 49.2919 li
353.52 50.0119 li
353.16 50.3719 li
352.32 49.5319 li
cp
355.44 43.5319 mo
355.44 43.1719 li
355.44 43.2919 li
355.68 41.9719 li
355.92 40.6519 li
357.12 40.8919 li
356.88 42.2119 li
356.64 43.5319 li
356.52 43.7719 li
355.44 43.5319 li
cp
f
gsave
337.56 63.3319 mo
337.56 79.8919 li
357.48 79.8919 li
357.48 63.3319 li
cp
eclp
FDAXXC+Times#20New#20Roman*1 [6.399 0 0 -6.386 0 0 ]msf
351.951 77.2363 mo
( )sh
grestore
gsave
337.56 63.3319 mo
337.56 79.8919 li
357.48 79.8919 li
357.48 63.3319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.069 0 0 -11.046 0 0 ]msf
338.534 74.3571 mo
( !)
[6.84009 0 ]xsh
grestore
gsave
267 63.3319 mo
267 79.8919 li
286.92 79.8919 li
286.92 63.3319 li
cp
eclp
FDAXXC+Times#20New#20Roman*1 [6.399 0 0 -6.386 0 0 ]msf
281.396 77.2363 mo
( )sh
grestore
gsave
267 63.3319 mo
267 79.8919 li
286.92 79.8919 li
286.92 63.3319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.069 0 0 -11.046 0 0 ]msf
267.969 74.3571 mo
( !)
[6.84009 0 ]xsh
grestore
1 lc
1 lj
10 ml
274.44 31.4119 mo
274.44 20.8519 297 12.2119 324.96 12.2119 cv
352.8 12.2119 375.48 20.8519 375.48 31.4119 cv
375.48 31.4119 li
375.48 42.0919 352.8 50.7319 324.96 50.7319 cv
297 50.7319 274.44 42.0919 274.44 31.4119 cv
@
286.56 25.7719 mo
306.36 25.7719 li
306.36 40.7719 li
286.56 40.7719 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
286.56 40.7719 mo
306.36 40.7719 li
306.36 25.7719 li
286.56 25.7719 li
286.56 40.7719 li
cp
.750179 .679652 .670191 .901488 cmyk
@
293.16 23.2519 mo
293.16 25.7719 li
@
299.76 23.2519 mo
299.76 25.7719 li
@
291.48 22.0519 mo
291.48 21.3319 292.32 20.7319 293.16 20.7319 cv
294.12 20.7319 294.84 21.3319 294.84 22.0519 cv
294.84 22.0519 li
294.84 22.7719 294.12 23.2519 293.16 23.2519 cv
292.32 23.2519 291.48 22.7719 291.48 22.0519 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
291.48 22.0519 mo
291.48 21.3319 292.32 20.7319 293.16 20.7319 cv
294.12 20.7319 294.84 21.3319 294.84 22.0519 cv
294.84 22.0519 li
294.84 22.7719 294.12 23.2519 293.16 23.2519 cv
292.32 23.2519 291.48 22.7719 291.48 22.0519 cv
.750179 .679652 .670191 .901488 cmyk
@
298.2 22.0519 mo
298.2 21.3319 298.92 20.7319 299.76 20.7319 cv
300.72 20.7319 301.44 21.3319 301.44 22.0519 cv
301.44 22.0519 li
301.44 22.7719 300.72 23.2519 299.76 23.2519 cv
298.92 23.2519 298.2 22.7719 298.2 22.0519 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
298.2 22.0519 mo
298.2 21.3319 298.92 20.7319 299.76 20.7319 cv
300.72 20.7319 301.44 21.3319 301.44 22.0519 cv
301.44 22.0519 li
301.44 22.7719 300.72 23.2519 299.76 23.2519 cv
298.92 23.2519 298.2 22.7719 298.2 22.0519 cv
.750179 .679652 .670191 .901488 cmyk
@
316.32 25.7719 mo
336.12 25.7719 li
336.12 40.7719 li
316.32 40.7719 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
316.32 40.7719 mo
336.12 40.7719 li
336.12 25.7719 li
316.32 25.7719 li
316.32 40.7719 li
cp
.750179 .679652 .670191 .901488 cmyk
@
322.92 23.2519 mo
322.92 25.7719 li
@
329.52 23.2519 mo
329.52 25.7719 li
@
321.24 22.0519 mo
321.24 21.3319 321.96 20.7319 322.92 20.7319 cv
323.76 20.7319 324.6 21.3319 324.6 22.0519 cv
324.6 22.0519 li
324.6 22.7719 323.76 23.2519 322.92 23.2519 cv
321.96 23.2519 321.24 22.7719 321.24 22.0519 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
321.24 22.0519 mo
321.24 21.3319 321.96 20.7319 322.92 20.7319 cv
323.76 20.7319 324.6 21.3319 324.6 22.0519 cv
324.6 22.0519 li
324.6 22.7719 323.76 23.2519 322.92 23.2519 cv
321.96 23.2519 321.24 22.7719 321.24 22.0519 cv
.750179 .679652 .670191 .901488 cmyk
@
327.84 22.0519 mo
327.84 21.3319 328.56 20.7319 329.52 20.7319 cv
330.36 20.7319 331.2 21.3319 331.2 22.0519 cv
331.2 22.0519 li
331.2 22.7719 330.36 23.2519 329.52 23.2519 cv
328.56 23.2519 327.84 22.7719 327.84 22.0519 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
327.84 22.0519 mo
327.84 21.3319 328.56 20.7319 329.52 20.7319 cv
330.36 20.7319 331.2 21.3319 331.2 22.0519 cv
331.2 22.0519 li
331.2 22.7719 330.36 23.2519 329.52 23.2519 cv
328.56 23.2519 327.84 22.7719 327.84 22.0519 cv
.750179 .679652 .670191 .901488 cmyk
@
345.72 25.6519 mo
365.52 25.6519 li
365.52 40.6519 li
345.72 40.6519 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
345.72 40.6519 mo
365.52 40.6519 li
365.52 25.6519 li
345.72 25.6519 li
345.72 40.6519 li
cp
.750179 .679652 .670191 .901488 cmyk
@
352.32 23.1319 mo
352.32 25.6519 li
@
358.92 23.1319 mo
358.92 25.6519 li
@
350.64 21.9319 mo
350.64 21.2119 351.36 20.7319 352.32 20.7319 cv
353.16 20.7319 353.88 21.2119 353.88 21.9319 cv
353.88 21.9319 li
353.88 22.6519 353.16 23.1319 352.32 23.1319 cv
351.36 23.1319 350.64 22.6519 350.64 21.9319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
350.64 21.9319 mo
350.64 21.2119 351.36 20.7319 352.32 20.7319 cv
353.16 20.7319 353.88 21.2119 353.88 21.9319 cv
353.88 21.9319 li
353.88 22.6519 353.16 23.1319 352.32 23.1319 cv
351.36 23.1319 350.64 22.6519 350.64 21.9319 cv
.750179 .679652 .670191 .901488 cmyk
@
357.24 21.9319 mo
357.24 21.2119 357.96 20.7319 358.92 20.7319 cv
359.76 20.7319 360.48 21.2119 360.48 21.9319 cv
360.48 21.9319 li
360.48 22.6519 359.76 23.1319 358.92 23.1319 cv
357.96 23.1319 357.24 22.6519 357.24 21.9319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
357.24 21.9319 mo
357.24 21.2119 357.96 20.7319 358.92 20.7319 cv
359.76 20.7319 360.48 21.2119 360.48 21.9319 cv
360.48 21.9319 li
360.48 22.6519 359.76 23.1319 358.92 23.1319 cv
357.96 23.1319 357.24 22.6519 357.24 21.9319 cv
.750179 .679652 .670191 .901488 cmyk
@
.24 lw
0 lc
0 lj
2 ml
306.36 33.2119 mo
316.32 33.2119 li
@
.72 lw
306.36 40.7719 mo
307.92 43.0519 331.32 55.2919 345.72 40.6519 cv
@
.24 lw
336.12 33.3319 mo
345.96 33.3319 li
@
.72 lw
1 lc
1 lj
10 ml
400.68 32.0119 mo
400.68 21.4519 423.36 12.8119 451.32 12.8119 cv
479.16 12.8119 501.84 21.4519 501.84 32.0119 cv
501.84 32.0119 li
501.84 42.5719 479.16 51.2119 451.32 51.2119 cv
423.36 51.2119 400.68 42.5719 400.68 32.0119 cv
@
412.92 26.3719 mo
432.72 26.3719 li
432.72 41.2519 li
412.92 41.2519 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
412.92 41.2519 mo
432.72 41.2519 li
432.72 26.3719 li
412.92 26.3719 li
412.92 41.2519 li
cp
.750179 .679652 .670191 .901488 cmyk
@
419.52 23.8519 mo
419.52 26.3719 li
@
426.12 23.8519 mo
426.12 26.3719 li
@
417.84 22.5319 mo
417.84 21.9319 418.56 21.3319 419.52 21.3319 cv
420.48 21.3319 421.2 21.9319 421.2 22.5319 cv
421.2 22.5319 li
421.2 23.2519 420.48 23.8519 419.52 23.8519 cv
418.56 23.8519 417.84 23.2519 417.84 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
417.84 22.5319 mo
417.84 21.9319 418.56 21.3319 419.52 21.3319 cv
420.48 21.3319 421.2 21.9319 421.2 22.5319 cv
421.2 22.5319 li
421.2 23.2519 420.48 23.8519 419.52 23.8519 cv
418.56 23.8519 417.84 23.2519 417.84 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
424.44 22.5319 mo
424.44 21.9319 425.16 21.3319 426.12 21.3319 cv
427.08 21.3319 427.8 21.9319 427.8 22.5319 cv
427.8 22.5319 li
427.8 23.2519 427.08 23.8519 426.12 23.8519 cv
425.16 23.8519 424.44 23.2519 424.44 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
424.44 22.5319 mo
424.44 21.9319 425.16 21.3319 426.12 21.3319 cv
427.08 21.3319 427.8 21.9319 427.8 22.5319 cv
427.8 22.5319 li
427.8 23.2519 427.08 23.8519 426.12 23.8519 cv
425.16 23.8519 424.44 23.2519 424.44 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
442.68 26.3719 mo
462.48 26.3719 li
462.48 41.2519 li
442.68 41.2519 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
442.68 41.2519 mo
462.48 41.2519 li
462.48 26.3719 li
442.68 26.3719 li
442.68 41.2519 li
cp
.750179 .679652 .670191 .901488 cmyk
@
449.28 23.8519 mo
449.28 26.3719 li
@
455.88 23.8519 mo
455.88 26.3719 li
@
447.6 22.5319 mo
447.6 21.9319 448.32 21.3319 449.28 21.3319 cv
450.12 21.3319 450.84 21.9319 450.84 22.5319 cv
450.84 22.5319 li
450.84 23.2519 450.12 23.8519 449.28 23.8519 cv
448.32 23.8519 447.6 23.2519 447.6 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
447.6 22.5319 mo
447.6 21.9319 448.32 21.3319 449.28 21.3319 cv
450.12 21.3319 450.84 21.9319 450.84 22.5319 cv
450.84 22.5319 li
450.84 23.2519 450.12 23.8519 449.28 23.8519 cv
448.32 23.8519 447.6 23.2519 447.6 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
454.2 22.5319 mo
454.2 21.9319 454.92 21.3319 455.88 21.3319 cv
456.72 21.3319 457.44 21.9319 457.44 22.5319 cv
457.44 22.5319 li
457.44 23.2519 456.72 23.8519 455.88 23.8519 cv
454.92 23.8519 454.2 23.2519 454.2 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
454.2 22.5319 mo
454.2 21.9319 454.92 21.3319 455.88 21.3319 cv
456.72 21.3319 457.44 21.9319 457.44 22.5319 cv
457.44 22.5319 li
457.44 23.2519 456.72 23.8519 455.88 23.8519 cv
454.92 23.8519 454.2 23.2519 454.2 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
471.96 26.3719 mo
491.76 26.3719 li
491.76 41.2519 li
471.96 41.2519 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
471.96 41.2519 mo
491.76 41.2519 li
491.76 26.3719 li
471.96 26.3719 li
471.96 41.2519 li
cp
.750179 .679652 .670191 .901488 cmyk
@
478.56 23.8519 mo
478.56 26.3719 li
@
485.16 23.8519 mo
485.16 26.3719 li
@
477 22.5319 mo
477 21.9319 477.72 21.3319 478.56 21.3319 cv
479.52 21.3319 480.24 21.9319 480.24 22.5319 cv
480.24 22.5319 li
480.24 23.2519 479.52 23.8519 478.56 23.8519 cv
477.72 23.8519 477 23.2519 477 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
477 22.5319 mo
477 21.9319 477.72 21.3319 478.56 21.3319 cv
479.52 21.3319 480.24 21.9319 480.24 22.5319 cv
480.24 22.5319 li
480.24 23.2519 479.52 23.8519 478.56 23.8519 cv
477.72 23.8519 477 23.2519 477 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
483.6 22.5319 mo
483.6 21.9319 484.32 21.3319 485.16 21.3319 cv
486.12 21.3319 486.84 21.9319 486.84 22.5319 cv
486.84 22.5319 li
486.84 23.2519 486.12 23.8519 485.16 23.8519 cv
484.32 23.8519 483.6 23.2519 483.6 22.5319 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
483.6 22.5319 mo
483.6 21.9319 484.32 21.3319 485.16 21.3319 cv
486.12 21.3319 486.84 21.9319 486.84 22.5319 cv
486.84 22.5319 li
486.84 23.2519 486.12 23.8519 485.16 23.8519 cv
484.32 23.8519 483.6 23.2519 483.6 22.5319 cv
.750179 .679652 .670191 .901488 cmyk
@
.24 lw
0 lc
0 lj
2 ml
432.72 33.8119 mo
442.68 33.8119 li
@
.72 lw
432.72 41.2519 mo
434.28 43.5319 457.56 55.8919 471.96 41.2519 cv
@
.24 lw
462.48 33.8119 mo
472.32 33.8119 li
@
gsave
474.12 26.1319 mo
474.12 42.6919 li
489.6 42.6919 li
489.6 26.1319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [6.398 0 0 -6.378 0 0 ]msf
483.03 40.0629 mo
(%)sh
grestore
gsave
474.12 26.1319 mo
474.12 42.6919 li
489.6 42.6919 li
489.6 26.1319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.066 0 0 -11.033 0 0 ]msf
476.513 37.1605 mo
(#)sh
grestore
gsave
500.28 3.33188 mo
500.28 19.8919 li
515.76 19.8919 li
515.76 3.33188 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [6.398 0 0 -6.378 0 0 ]msf
509.793 17.2616 mo
(%)sh
grestore
gsave
500.28 3.33188 mo
500.28 19.8919 li
515.76 19.8919 li
515.76 3.33188 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.066 0 0 -11.033 0 0 ]msf
501.954 14.3553 mo
($)sh
grestore
gsave
222.96 25.4119 mo
222.96 41.9719 li
237.36 41.9719 li
237.36 25.4119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [6.406 0 0 -6.378 0 0 ]msf
231.84 39.3422 mo
(&)sh
grestore
gsave
222.96 25.4119 mo
222.96 41.9719 li
237.36 41.9719 li
237.36 25.4119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.081 0 0 -11.033 0 0 ]msf
225.365 36.4434 mo
(#)sh
grestore
gsave
318.6 25.4119 mo
318.6 41.9719 li
333 41.9719 li
333 25.4119 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 4148 10 <0001ffbcffe8038403890046010840630d40120b3f0700072a003d013e14
001601240023014a1b56018919a301a919aa2aa83daf3f10484010351017
63217321c919cb210509230c2a52230304191a1a022a2a2b3e403e3c4028
2122021a1a1f2840142828403e2a1904041135428a46c60011b80395401f
153a0a0a000735c639272e2e260b042a193e218a9f22cf220222c90d02e4
45ba014700400124b21a8228b8019f401d19e43e403b4b343e401d353e3e
47200d400d8f0daf0d040d1a48321947b80114b1de182b4e10e410e65d12
392f2b2b4dedf4edf4e6ed10f45ded11123939003f3c10fde43f3c10fde4
10f4ed11121739870e2e2b0e7d10c40110c90708103c083c870e10c4c431
30005d5d012b5d2b01161716173736363736333216151407062322272623
220706071316163332373637170607062322272603020706232227263534
363332171633323736363726272626232207350167311912295823642618
1d2b330f1c2415182f1018213e5652131a0d151c3727233f613726382115
429c5e3d392821182c2020241a0e0c132fa2193e05174a48171e03893434
2499843057100a2e21260e1909101c3495fea84f1f172e4a12764e2c3f27
0129fef14e321d1625212c20171026fc38f30e4136022400>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g10 10 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 41 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 214{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [6.406 0 0 -6.378 0 0 ]msf
327.718 39.3422 mo
(\))sh
grestore
gsave
318.6 25.4119 mo
318.6 41.9719 li
333 41.9719 li
333 25.4119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.081 0 0 -11.033 0 0 ]msf
321.005 36.4434 mo
(#)sh
grestore
gsave
348.36 24.8119 mo
348.36 42.5719 li
362.76 42.5719 li
362.76 24.8119 li
cp
eclp
%ADOBeginSubsetFont: HIBBAA+Times#20New#20Roman#20Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Times#20New#20Roman#20Italic gcheck setglobal} if
1 4622 11 <0001ff60fe460386038900380113405b9b310131183a3509191a1929193d
19a602b402ba1ab428b832c603c604ca19ca1a0d491b591b691b03043130
2f2f051d2b1e1a311a1104302f2e2d2b281c1b08213105060708090a0b0c
081704358a38c614000724c92b271e0f21b801c040373111400b12340f11
1f110211280c751740170e3f9017a0170250178017b01703201730174017
0317493a3849bf37013f374f375f370337b80323400d04e531401c113f31
401e123f31b8ffc040172529349031a031ef310350318031022031303140
310331b8021cb33932de182b10f65d5d5d2b2b2bedf65d5de410f45d5d5d
2bfde45d2b10e4003ffdec3f3cf4ed011112173911121739111239001239
111239870e7d10c404c43c3130015d5d2b01720116161713363736373637
3635342e0235343633321615140600070606232226353436333217161617
163332373637363703262623220727014b221a0d2c3c723751310b060e3b
2730242c3e6cfeccdb9792341f2f4126140d0813080507060f3749602e38
0e384215360903893a6594fe14489c4c83502010110b0e13332129324940
4fcbfe5cf8ab592f1f274009052f08050a224a623e027a9d44062500>HIBBAA+Times#20New#20Roman#20Italic AddT42Char 
HIBBAA+Times#20New#20Roman#20Italic /CharStrings get begin
/g11 11 def
end
HIBBAA+Times#20New#20Roman#20Italic /Encoding get
dup 42 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXD+Times#20New#20Roman#20Italic*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 213{/.notdef}rp]
FDAXXD+Times#20New#20Roman#20Italic nf
FDAXXD+Times#20New#20Roman#20Italic*1 [6.403 0 0 -6.413 0 0 ]msf
357.697 38.7235 mo
(*)sh
grestore
gsave
348.36 24.8119 mo
348.36 42.5719 li
362.76 42.5719 li
362.76 24.8119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.076 0 0 -11.092 0 0 ]msf
350.755 35.8653 mo
(#)sh
grestore
357.12 40.7719 mo
357.12 41.2519 li
357.24 41.8519 li
357.24 41.7319 li
357.6 42.8119 li
357.48 42.8119 li
358.08 43.7719 li
357.96 43.7719 li
358.68 44.7319 li
358.56 44.6119 li
358.68 44.7319 li
357.84 45.5719 li
357.6 45.4519 li
357 44.3719 li
356.4 43.2919 li
356.04 42.0919 li
356.04 41.3719 li
355.92 40.7719 li
357.12 40.7719 li
cp
360.24 46.4119 mo
361.32 47.1319 li
361.2 47.1319 li
362.4 47.8519 li
363.72 48.5719 li
364.2 48.8119 li
363.72 49.8919 li
363.12 49.6519 li
361.8 48.9319 li
360.6 48.0919 li
359.52 47.3719 li
360.24 46.4119 li
cp
366.48 49.7719 mo
366.6 49.7719 li
368.16 50.2519 li
369.84 50.7319 li
370.92 51.0919 li
370.68 52.1719 li
369.48 51.9319 li
367.8 51.4519 li
366.12 50.8519 li
366 50.8519 li
366.48 49.7719 li
cp
373.32 51.5719 mo
373.44 51.5719 li
375.24 51.9319 li
377.16 52.2919 li
378 52.4119 li
377.76 53.6119 li
377.04 53.4919 li
375.12 53.1319 li
373.2 52.7719 li
373.08 52.7719 li
373.32 51.5719 li
cp
380.28 52.6519 mo
383.28 52.8919 li
385.08 53.0119 li
385.08 54.2119 li
383.16 54.0919 li
380.28 53.8519 li
380.28 52.6519 li
cp
387.48 53.1319 mo
391.56 53.2519 li
392.28 53.2519 li
392.28 54.4519 li
391.56 54.4519 li
387.48 54.3319 li
387.48 53.1319 li
cp
394.68 53.1319 mo
395.76 53.1319 li
399.48 53.0119 li
399.48 54.2119 li
395.76 54.3319 li
394.68 54.3319 li
394.68 53.1319 li
cp
401.76 52.7719 mo
403.56 52.6519 li
405.48 52.4119 li
406.56 52.2919 li
406.68 53.4919 li
405.6 53.6119 li
403.68 53.8519 li
401.88 53.9719 li
401.76 52.7719 li
cp
408.96 51.9319 mo
409.08 51.9319 li
410.76 51.6919 li
412.44 51.3319 li
413.52 50.9719 li
413.88 52.1719 li
412.68 52.4119 li
411 52.7719 li
409.2 53.1319 li
409.08 53.1319 li
408.96 51.9319 li
cp
415.8 50.3719 mo
416.88 49.8919 li
418.08 49.4119 li
419.28 48.6919 li
419.28 48.8119 li
420 48.3319 li
420.6 49.2919 li
419.88 49.7719 li
418.68 50.4919 li
417.24 51.0919 li
416.16 51.4519 li
415.8 50.3719 li
cp
421.8 46.8919 mo
422.28 46.5319 li
423.12 45.5719 li
423.12 45.6919 li
423.84 44.6119 li
424.44 43.5319 li
424.56 43.2919 li
425.64 43.7719 li
425.52 44.1319 li
424.8 45.3319 li
423.96 46.4119 li
423.12 47.3719 li
422.64 47.8519 li
421.8 46.8919 li
cp
425.4 41.1319 mo
425.4 41.1319 li
426.6 41.4919 li
426.6 41.6119 li
425.4 41.1319 li
cp
f
426.6 41.1319 mo
426.72 42.3319 li
426.72 42.2119 li
426.96 43.2919 li
427.32 44.3719 li
427.2 44.2519 li
427.8 45.2119 li
427.68 45.2119 li
427.92 45.4519 li
426.84 46.0519 li
426.72 45.8119 li
426.12 44.7319 li
425.76 43.6519 li
425.52 42.4519 li
425.4 41.2519 li
426.6 41.1319 li
cp
429.36 47.1319 mo
429.84 47.7319 li
430.8 48.4519 li
431.76 49.1719 li
431.76 49.0519 li
432.96 49.7719 li
432.84 49.7719 li
433.08 49.8919 li
432.48 50.9719 li
432.36 50.8519 li
431.16 50.1319 li
430.08 49.4119 li
429 48.5719 li
428.52 47.9719 li
429.36 47.1319 li
cp
435.24 50.8519 mo
435.36 50.9719 li
436.8 51.4519 li
436.68 51.4519 li
438.12 51.9319 li
439.68 52.2919 li
439.56 52.2919 li
439.68 52.2919 li
439.32 53.4919 li
437.76 53.0119 li
436.32 52.5319 li
434.88 52.0519 li
434.76 51.9319 li
435.24 50.8519 li
cp
441.96 52.8919 mo
444.36 53.3719 li
444.36 53.2519 li
446.64 53.6119 li
446.52 54.8119 li
444.12 54.4519 li
441.72 53.9719 li
441.96 52.8919 li
cp
449.04 53.8519 mo
451.08 54.0919 li
453.72 54.2119 li
453.72 55.4119 li
450.96 55.2919 li
448.92 55.0519 li
449.04 53.8519 li
cp
456.12 54.2119 mo
457.8 54.2119 li
460.92 54.0919 li
460.92 55.2919 li
457.8 55.4119 li
456.12 55.4119 li
456.12 54.2119 li
cp
463.32 53.8519 mo
464.28 53.8519 li
465.72 53.6119 li
467.16 53.4919 li
468 53.2519 li
468.24 54.4519 li
467.4 54.5719 li
465.96 54.8119 li
464.4 55.0519 li
463.44 55.0519 li
463.32 53.8519 li
cp
470.28 52.8919 mo
471.48 52.5319 li
472.8 52.1719 li
474 51.8119 li
474.84 51.4519 li
475.2 52.5319 li
474.36 52.8919 li
473.16 53.3719 li
471.84 53.7319 li
470.64 53.9719 li
470.28 52.8919 li
cp
476.76 50.3719 mo
477.12 50.1319 li
478.08 49.5319 li
477.96 49.5319 li
478.8 48.8119 li
479.64 47.9719 li
479.52 47.9719 li
480.12 47.2519 li
481.08 47.9719 li
480.48 48.6919 li
479.64 49.6519 li
478.8 50.3719 li
477.72 51.0919 li
477.48 51.3319 li
476.76 50.3719 li
cp
481.32 45.2119 mo
481.44 45.0919 li
481.92 43.8919 li
482.28 42.5719 li
483.36 42.9319 li
483 44.2519 li
482.52 45.5719 li
482.4 45.8119 li
481.32 45.2119 li
cp
f
gsave
415.56 26.0119 mo
415.56 42.5719 li
429.96 42.5719 li
429.96 26.0119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [6.406 0 0 -6.378 0 0 ]msf
424.199 39.9417 mo
(')sh
grestore
gsave
415.56 26.0119 mo
415.56 42.5719 li
429.96 42.5719 li
429.96 26.0119 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.081 0 0 -11.033 0 0 ]msf
417.975 37.0391 mo
(#)sh
grestore
gsave
388.08 63.3319 mo
388.08 78.2119 li
406.92 78.2119 li
406.92 63.3319 li
cp
eclp
%ADOBeginSubsetFont: PBAAAA+Times#20New#20Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Times#20New#20Roman gcheck setglobal} if
1 3118 8 <0001002c000003ab0568001e0168408207180b3917181c3d3418401c3d34
19401c3d340f1e161629073c074907a9070640205b045a085b175a186b08
741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020f904f917
1515011d0419051b15191619171d180709170b180b1d3419471989178f20
0718190202171a190c19060d031902050618171615140713040db8016840
090940140c3f80090109b80333400c10051a8f19019f19af190219ba0333
0003018db301020c1eb8018d400d0006e24f135f136f137f130413b80107
4013400001001a002040208020036020a020022019bb01f90003000d0140
40145f026f027f028f02bf02cf02df02ef020802191fba018e010100182b
4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d713c3ffd
71b10602435458b78f0901bf09cf0902005d71592be41112173911123901
111239390210b10602435458b47d198d1902005d590e3c8710057dc40ec4
31300171725d005d012b2b2b002b01032135000035342623220607233636
33321615140706070207213236363703ab5ffce0016101209e6e649f2625
19cf9ba5dd304aa6f93e01626c57461a0105fefb2501420198a981a67571
b9c6d4906767a2b5fef03810312d>PBAAAA+Times#20New#20Roman AddT42Char 
PBAAAA+Times#20New#20Roman /CharStrings get begin
/g8 8 def
end
PBAAAA+Times#20New#20Roman /Encoding get
dup 39 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXC+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 216{/.notdef}rp]
FDAXXC+Times#20New#20Roman nf
FDAXXC+Times#20New#20Roman*1 [5.739 0 0 -5.741 0 0 ]msf
401.615 75.8273 mo
(')sh
grestore
gsave
388.08 63.3319 mo
388.08 78.2119 li
406.92 78.2119 li
406.92 63.3319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [9.928 0 0 -9.931 0 0 ]msf
389.058 73.2878 mo
( !)
[6.00018 0 ]xsh
grestore
gsave
444.96 63.3319 mo
444.96 79.8919 li
465.96 79.8919 li
465.96 63.3319 li
cp
eclp
FDAXXC+Times#20New#20Roman*1 [6.397 0 0 -6.389 0 0 ]msf
460.053 77.2709 mo
(')sh
grestore
gsave
444.96 63.3319 mo
444.96 79.8919 li
465.96 79.8919 li
465.96 63.3319 li
cp
eclp
FDAXXD+Times#20New#20Roman#20Italic*1 [11.066 0 0 -11.052 0 0 ]msf
445.927 74.373 mo
( !)
[6.76123 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FDAXXD+Times#20New#20Roman#20Italic*1 uf
/FDAXXD+Times#20New#20Roman#20Italic uf
/HIBBAA+Times#20New#20Roman#20Italic uf
/FDAXXC+Times#20New#20Roman*1 uf
/FDAXXC+Times#20New#20Roman uf
/PBAAAA+Times#20New#20Roman uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
