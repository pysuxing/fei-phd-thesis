%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Visio-Hfunction0.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: leifei
%%CreationDate: 2018/5/21, 10:11:45
%%BoundingBox: 0 0 130 218
%%HiResBoundingBox: 0 0 129.6510 217.4281
%%CropBox: 0 0 129.6510 217.4281
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1152 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-05-17T16:24:41+08:00"
   xmp:CreatorTool=""
   xmp:ModifyDate="2018-05-17T16:32:53+08:00"
   xmp:MetadataDate="2018-05-17T16:32:53+08:00"
   pdf:Keywords=""
   pdf:Producer="福昕PDF打印机 版本 7.2.0.0424"
   xmpMM:DocumentID="uuid:405b9158-9d24-4d1d-96d2-3a9e080c81b3"
   xmpMM:InstanceID="uuid:289711f3-387a-43b3-8f4e-054ab809ba61">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -217.428 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 217.428 li
129.651 217.428 li
129.651 0 li
cp
clp
[1 0 0 1 -166.953 0 ]ct
354.72 76.273 mo
354.84 78.433 li
354.84 80.473 li
354.96 82.633 li
355.2 84.553 li
355.2 84.913 354.96 85.153 354.6 85.273 cv
354.36 85.273 354 85.033 354 84.673 cv
353.76 82.753 li
353.64 80.593 li
353.64 78.433 li
353.52 76.273 li
353.52 75.913 353.88 75.673 354.12 75.673 cv
354.48 75.673 354.72 75.913 354.72 76.273 cv
cp
356.04 90.433 mo
356.04 90.433 li
356.04 90.793 355.8 91.153 355.56 91.153 cv
355.2 91.273 354.84 91.033 354.84 90.673 cv
354.72 90.313 354.96 90.073 355.32 89.953 cv
355.68 89.953 355.92 90.193 356.04 90.433 cv
cp
357.24 96.313 mo
357.48 97.033 li
357.96 98.953 li
358.56 100.873 li
359.16 102.793 li
359.76 104.233 li
359.88 104.593 359.64 104.953 359.4 105.073 cv
359.04 105.193 358.68 104.953 358.56 104.713 cv
358.08 103.273 li
357.48 101.233 li
356.88 99.313 li
356.28 97.273 li
356.16 96.553 li
356.04 96.313 356.16 95.953 356.52 95.833 cv
356.88 95.833 357.24 95.953 357.24 96.313 cv
cp
361.92 109.753 mo
361.92 109.753 li
362.16 110.113 361.92 110.473 361.68 110.593 cv
361.32 110.713 360.96 110.593 360.84 110.233 cv
360.72 109.993 360.84 109.633 361.2 109.513 cv
361.44 109.273 361.8 109.513 361.92 109.753 cv
cp
364.68 115.153 mo
365.04 115.753 li
367.08 119.233 li
369 122.233 li
369.12 122.473 369.12 122.833 368.76 123.073 cv
368.52 123.193 368.16 123.193 367.92 122.833 cv
366 119.833 li
363.96 116.353 li
363.6 115.633 li
363.36 115.393 363.48 115.033 363.84 114.793 cv
364.08 114.673 364.44 114.793 364.68 115.153 cv
cp
372.48 127.033 mo
372.48 127.033 li
372.72 127.273 372.72 127.633 372.36 127.873 cv
372.12 127.993 371.76 127.993 371.52 127.753 cv
371.4 127.513 371.4 127.153 371.64 126.913 cv
371.88 126.673 372.24 126.793 372.48 127.033 cv
cp
376.32 131.593 mo
376.8 131.953 li
379.56 134.833 li
382.32 137.473 li
382.56 137.593 382.56 138.073 382.32 138.313 cv
382.08 138.553 381.72 138.553 381.48 138.313 cv
378.72 135.673 li
375.84 132.793 li
375.48 132.313 li
375.24 132.073 375.24 131.713 375.48 131.473 cv
375.72 131.233 376.08 131.353 376.32 131.593 cv
cp
386.88 141.193 mo
386.88 141.193 li
387.12 141.433 387.12 141.793 387 142.033 cv
386.76 142.273 386.4 142.393 386.16 142.153 cv
385.8 141.913 385.8 141.553 386.04 141.313 cv
386.16 141.073 386.64 141.073 386.88 141.193 cv
cp
391.68 144.673 mo
392.04 145.033 li
395.52 147.193 li
398.76 148.993 li
399.12 149.233 399.24 149.593 399 149.833 cv
398.88 150.193 398.52 150.193 398.28 150.073 cv
394.92 148.153 li
391.44 145.993 li
390.96 145.753 li
390.72 145.513 390.6 145.153 390.84 144.913 cv
391.08 144.553 391.44 144.553 391.68 144.673 cv
cp
404.16 151.633 mo
404.16 151.633 li
404.4 151.753 404.64 152.113 404.52 152.473 cv
404.28 152.713 404.04 152.833 403.68 152.713 cv
403.32 152.593 403.2 152.233 403.32 151.993 cv
403.44 151.633 403.8 151.513 404.16 151.633 cv
cp
409.68 153.913 mo
410.28 154.153 li
412.2 154.753 li
414.24 155.473 li
416.16 156.073 li
417.6 156.433 li
417.96 156.433 418.08 156.793 418.08 157.153 cv
417.96 157.393 417.6 157.633 417.36 157.513 cv
415.92 157.153 li
413.88 156.553 li
411.84 155.953 li
409.92 155.233 li
409.2 154.993 li
408.96 154.873 408.84 154.513 408.96 154.273 cv
408.96 153.913 409.32 153.793 409.68 153.913 cv
cp
423.36 157.633 mo
423.36 157.633 li
423.72 157.753 423.96 157.993 423.96 158.353 cv
423.84 158.713 423.6 158.953 423.24 158.833 cv
422.88 158.833 422.64 158.473 422.76 158.233 cv
422.76 157.873 423.12 157.633 423.36 157.633 cv
cp
429.36 158.593 mo
430.68 158.713 li
432.84 158.953 li
435 159.073 li
437.16 159.073 li
437.64 159.193 li
438 159.193 438.24 159.433 438.24 159.793 cv
438.24 160.033 438 160.393 437.64 160.393 cv
437.16 160.273 li
435 160.273 li
432.72 160.153 li
430.56 159.913 li
429.24 159.793 li
428.88 159.673 428.64 159.433 428.64 159.073 cv
428.76 158.713 429 158.593 429.36 158.593 cv
cp
false sop
.75021 .679683 .670222 .90164 cmyk
f
344.88 44.953 mo
345 45.433 li
345 45.313 li
345.12 45.793 li
345.12 45.673 li
345.48 46.153 li
345.36 46.033 li
345.84 46.513 li
346.32 46.873 li
347.04 47.233 li
347.76 47.713 li
348.72 48.073 li
349.8 48.433 li
350.88 48.793 li
351.24 48.913 li
351.48 49.033 351.72 49.393 351.6 49.633 cv
351.48 49.993 351.12 50.113 350.88 50.113 cv
350.52 49.993 li
349.32 49.633 li
348.24 49.153 li
347.28 48.673 li
346.44 48.313 li
345.6 47.833 li
345 47.353 li
344.52 46.873 li
344.52 46.873 344.52 46.873 344.52 46.753 cv
344.16 46.393 li
344.16 46.273 344.04 46.273 344.04 46.273 cv
343.92 45.793 li
343.8 45.673 343.8 45.673 343.8 45.673 cv
343.8 45.193 li
343.68 44.833 343.92 44.473 344.28 44.473 cv
344.64 44.473 344.88 44.713 344.88 44.953 cv
cp
357 50.353 mo
357 50.353 li
357.24 50.473 357.48 50.713 357.48 51.073 cv
357.36 51.433 357.12 51.553 356.76 51.553 cv
356.4 51.433 356.16 51.193 356.28 50.833 cv
356.28 50.473 356.64 50.353 357 50.353 cv
cp
362.88 51.433 mo
363.6 51.553 li
365.64 51.793 li
367.68 52.033 li
369.84 52.273 li
371.16 52.393 li
371.52 52.393 371.76 52.753 371.64 52.993 cv
371.64 53.353 371.4 53.593 371.04 53.593 cv
369.72 53.473 li
367.56 53.233 li
365.52 52.993 li
363.48 52.633 li
362.64 52.513 li
362.28 52.513 362.16 52.153 362.16 51.913 cv
362.16 51.553 362.52 51.313 362.88 51.433 cv
cp
377.04 52.873 mo
377.04 52.873 li
377.4 52.873 377.64 53.233 377.64 53.473 cv
377.64 53.833 377.4 54.073 377.04 54.073 cv
376.68 54.073 376.44 53.833 376.44 53.473 cv
376.44 53.113 376.8 52.873 377.04 52.873 cv
cp
383.04 53.233 mo
384 53.233 li
386.52 53.353 li
389.16 53.473 li
391.44 53.473 li
391.8 53.473 392.04 53.833 392.04 54.073 cv
392.04 54.433 391.8 54.673 391.44 54.673 cv
389.04 54.673 li
386.52 54.553 li
383.88 54.433 li
383.04 54.433 li
382.68 54.433 382.44 54.193 382.44 53.833 cv
382.44 53.473 382.8 53.233 383.04 53.233 cv
cp
397.44 53.593 mo
397.44 53.593 li
397.8 53.593 398.04 53.833 398.04 54.193 cv
398.04 54.433 397.8 54.793 397.44 54.793 cv
397.08 54.793 396.84 54.553 396.84 54.193 cv
396.84 53.833 397.08 53.593 397.44 53.593 cv
cp
403.44 53.473 mo
405.72 53.473 li
408.48 53.473 li
411.24 53.353 li
411.84 53.353 li
412.2 53.353 412.44 53.593 412.44 53.953 cv
412.44 54.313 412.2 54.553 411.84 54.553 cv
411.24 54.553 li
408.48 54.673 li
405.72 54.673 li
403.44 54.673 li
403.08 54.793 402.84 54.433 402.84 54.193 cv
402.84 53.833 403.08 53.593 403.44 53.473 cv
cp
417.84 53.113 mo
417.84 53.113 li
418.2 53.113 418.44 53.353 418.44 53.713 cv
418.44 54.073 418.2 54.313 417.84 54.313 cv
417.48 54.433 417.24 54.073 417.24 53.833 cv
417.24 53.473 417.48 53.233 417.84 53.113 cv
cp
423.84 52.873 mo
424.08 52.873 li
426.36 52.753 li
428.64 52.633 li
430.92 52.393 li
432.12 52.273 li
432.48 52.273 432.84 52.513 432.84 52.873 cv
432.84 53.233 432.6 53.473 432.24 53.473 cv
431.04 53.593 li
428.76 53.833 li
426.48 53.953 li
424.08 54.073 li
423.84 54.073 li
423.48 54.073 423.24 53.833 423.24 53.473 cv
423.24 53.233 423.48 52.873 423.84 52.873 cv
cp
438.12 51.793 mo
438.12 51.793 li
438.48 51.793 438.72 51.913 438.84 52.273 cv
438.84 52.633 438.6 52.873 438.24 52.993 cv
437.88 52.993 437.64 52.753 437.64 52.393 cv
437.52 52.153 437.76 51.793 438.12 51.793 cv
cp
444 51.073 mo
445.32 50.833 li
446.76 50.593 li
447.96 50.353 li
449.04 50.113 li
450.12 49.873 li
450.96 49.513 li
451.68 49.273 li
452.04 49.153 li
452.4 49.033 452.76 49.153 452.88 49.393 cv
453 49.753 452.88 50.113 452.52 50.233 cv
452.04 50.473 li
451.32 50.713 li
450.36 50.953 li
449.28 51.193 li
448.2 51.553 li
446.88 51.793 li
445.56 52.033 li
444.24 52.153 li
443.88 52.273 443.64 52.033 443.52 51.673 cv
443.52 51.433 443.76 51.073 444 51.073 cv
cp
f
354.48 160.753 mo
355.44 164.473 li
356.64 168.193 li
356.76 168.673 li
356.88 169.033 356.76 169.393 356.4 169.513 cv
356.16 169.633 355.8 169.393 355.68 169.153 cv
355.44 168.553 li
354.36 164.833 li
353.28 160.993 li
353.28 160.633 353.4 160.393 353.76 160.273 cv
354.12 160.153 354.48 160.393 354.48 160.753 cv
cp
359.04 174.313 mo
359.04 174.313 li
359.16 174.553 359.04 174.913 358.68 175.033 cv
358.44 175.153 358.08 175.033 357.84 174.793 cv
357.72 174.433 357.84 174.073 358.2 173.953 cv
358.56 173.833 358.8 173.953 359.04 174.313 cv
cp
361.68 179.593 mo
362.64 181.393 li
364.44 184.273 li
366.12 186.553 li
366.36 186.913 366.24 187.273 366 187.393 cv
365.76 187.633 365.28 187.513 365.16 187.273 cv
363.48 184.873 li
361.56 181.873 li
360.6 180.193 li
360.48 179.833 360.48 179.473 360.84 179.353 cv
361.08 179.233 361.44 179.353 361.68 179.593 cv
cp
369.84 191.113 mo
369.96 191.113 li
370.08 191.473 370.08 191.833 369.84 192.073 cv
369.6 192.193 369.24 192.193 369 191.953 cv
368.76 191.713 368.76 191.353 369 191.113 cv
369.24 190.873 369.72 190.873 369.84 191.113 cv
cp
374.16 195.313 mo
375.48 196.513 li
378 198.433 li
380.64 200.233 li
380.76 200.353 li
381 200.473 381.12 200.833 380.88 201.193 cv
380.76 201.433 380.4 201.553 380.16 201.313 cv
379.92 201.193 li
377.28 199.393 li
374.64 197.353 li
373.32 196.273 li
373.08 196.033 373.08 195.673 373.32 195.433 cv
373.56 195.073 373.92 195.073 374.16 195.313 cv
cp
385.92 203.233 mo
385.92 203.233 li
386.28 203.353 386.4 203.713 386.16 204.073 cv
386.04 204.313 385.68 204.433 385.44 204.313 cv
385.08 204.193 384.96 203.833 385.08 203.473 cv
385.32 203.233 385.68 203.113 385.92 203.233 cv
cp
391.44 205.513 mo
391.92 205.633 li
393.48 206.113 li
394.92 206.593 li
396.48 206.953 li
398.04 207.313 li
399.48 207.553 li
399.72 207.673 399.96 208.033 399.84 208.273 cv
399.84 208.633 399.48 208.873 399.24 208.753 cv
397.8 208.513 li
396.24 208.153 li
394.56 207.793 li
393.12 207.313 li
391.56 206.833 li
390.96 206.593 li
390.72 206.473 390.48 206.233 390.6 205.873 cv
390.72 205.513 391.08 205.393 391.44 205.513 cv
cp
405.24 208.273 mo
405.24 208.273 li
405.6 208.273 405.84 208.633 405.84 208.993 cv
405.84 209.233 405.6 209.473 405.24 209.473 cv
404.88 209.473 404.64 209.233 404.64 208.873 cv
404.64 208.513 405 208.273 405.24 208.273 cv
cp
411.24 208.393 mo
412.56 208.273 li
414.24 208.153 li
415.92 208.033 li
417.6 207.793 li
419.28 207.433 li
419.52 207.433 li
419.76 207.433 420.12 207.553 420.24 207.913 cv
420.24 208.273 420 208.513 419.76 208.633 cv
419.52 208.633 li
417.72 208.993 li
416.04 209.233 li
414.36 209.353 li
412.68 209.473 li
411.24 209.593 li
411 209.593 410.64 209.353 410.64 208.993 cv
410.64 208.633 410.88 208.393 411.24 208.393 cv
cp
425.28 206.113 mo
425.28 206.113 li
425.52 205.993 425.88 206.113 426 206.473 cv
426.12 206.833 425.88 207.073 425.64 207.193 cv
425.28 207.313 424.92 207.193 424.92 206.833 cv
424.8 206.473 424.92 206.233 425.28 206.113 cv
cp
430.92 204.193 mo
431.28 204.073 li
432.96 203.353 li
434.76 202.633 li
436.44 201.793 li
438.12 200.953 li
438.48 200.833 438.84 200.953 438.96 201.193 cv
439.08 201.553 438.96 201.913 438.72 202.033 cv
436.92 202.873 li
435.24 203.713 li
433.44 204.433 li
431.64 205.153 li
431.28 205.273 li
431.04 205.393 430.68 205.273 430.56 204.913 cv
430.44 204.673 430.56 204.313 430.92 204.193 cv
cp
f
354.6 116.713 mo
356.28 117.553 li
358.08 118.393 li
359.76 119.113 li
361.44 119.833 li
362.28 120.073 li
362.52 120.193 362.64 120.553 362.52 120.793 cv
362.4 121.153 362.16 121.273 361.8 121.153 cv
361.08 120.913 li
359.28 120.193 li
357.48 119.473 li
355.8 118.633 li
354.12 117.793 li
353.76 117.673 353.64 117.313 353.76 116.953 cv
353.88 116.713 354.24 116.593 354.6 116.713 cv
cp
367.92 121.873 mo
367.92 121.873 li
368.16 121.993 368.4 122.353 368.28 122.593 cv
368.16 122.953 367.92 123.193 367.56 123.073 cv
367.2 122.953 367.08 122.593 367.08 122.353 cv
367.2 121.993 367.56 121.873 367.92 121.873 cv
cp
373.68 123.193 mo
375.12 123.433 li
376.8 123.673 li
378.48 123.913 li
380.16 124.033 li
381.84 124.033 li
381.96 124.033 li
382.2 124.033 382.56 124.393 382.56 124.753 cv
382.56 124.993 382.2 125.233 381.96 125.233 cv
381.84 125.233 li
380.16 125.233 li
378.36 125.113 li
376.68 124.873 li
375 124.633 li
373.44 124.393 li
373.2 124.393 372.96 124.033 372.96 123.673 cv
373.08 123.433 373.32 123.193 373.68 123.193 cv
cp
387.84 123.913 mo
387.84 123.913 li
388.2 123.913 388.44 124.153 388.56 124.513 cv
388.56 124.873 388.32 125.113 387.96 125.113 cv
387.6 125.233 387.36 124.993 387.36 124.633 cv
387.24 124.273 387.48 124.033 387.84 123.913 cv
cp
393.72 123.193 mo
394.8 123.073 li
396.36 122.713 li
397.92 122.233 li
399.36 121.873 li
400.92 121.393 li
401.76 121.033 li
402.12 121.033 402.48 121.153 402.48 121.513 cv
402.6 121.753 402.48 122.113 402.12 122.233 cv
401.28 122.473 li
399.72 123.073 li
398.16 123.433 li
396.6 123.793 li
395.04 124.153 li
393.96 124.393 li
393.6 124.513 393.36 124.273 393.24 123.913 cv
393.24 123.553 393.48 123.313 393.72 123.193 cv
cp
407.16 118.753 mo
407.16 118.753 li
407.52 118.633 407.88 118.753 408 119.113 cv
408.24 119.353 408.12 119.713 407.76 119.833 cv
407.52 120.073 407.16 119.953 406.92 119.593 cv
406.8 119.353 406.92 118.993 407.16 118.753 cv
cp
412.44 115.993 mo
414.96 114.193 li
417.6 112.273 li
419.04 110.953 li
419.28 110.713 419.76 110.833 419.88 111.073 cv
420.12 111.313 420.12 111.673 419.88 111.913 cv
418.32 113.233 li
415.68 115.153 li
413.04 116.953 li
412.8 117.073 412.44 117.073 412.2 116.833 cv
412.08 116.473 412.08 116.113 412.44 115.993 cv
cp
423.36 106.873 mo
423.36 106.873 li
423.6 106.633 423.96 106.633 424.2 106.753 cv
424.44 106.993 424.44 107.353 424.2 107.593 cv
423.96 107.953 423.6 107.953 423.36 107.713 cv
423.12 107.473 423.12 107.113 423.36 106.873 cv
cp
427.2 102.313 mo
428.76 100.153 li
430.68 97.273 li
431.76 95.353 li
431.88 95.113 432.24 94.993 432.6 95.113 cv
432.84 95.353 432.96 95.713 432.84 95.953 cv
431.64 97.873 li
429.72 100.873 li
428.16 103.033 li
427.92 103.273 427.56 103.393 427.32 103.153 cv
427.08 102.913 426.96 102.553 427.2 102.313 cv
cp
434.4 90.073 mo
434.4 90.073 li
434.52 89.833 434.88 89.593 435.24 89.833 cv
435.6 89.953 435.72 90.313 435.6 90.553 cv
435.48 90.913 435.12 91.033 434.76 90.913 cv
434.52 90.793 434.28 90.433 434.4 90.073 cv
cp
436.68 84.553 mo
436.92 84.193 li
438 80.593 li
439.08 76.753 li
439.2 76.513 439.44 76.273 439.8 76.393 cv
440.16 76.513 440.28 76.753 440.28 77.113 cv
439.2 80.953 li
438 84.553 li
437.88 85.033 li
437.76 85.273 437.4 85.513 437.04 85.393 cv
436.8 85.273 436.56 84.913 436.68 84.553 cv
cp
f
354.12 201.793 mo
358.92 199.393 li
361.56 198.073 li
361.92 197.833 362.28 197.953 362.4 198.313 cv
362.52 198.553 362.4 198.913 362.16 199.153 cv
359.52 200.473 li
354.6 202.873 li
354.24 202.993 353.88 202.873 353.76 202.513 cv
353.64 202.273 353.76 201.913 354.12 201.793 cv
cp
366.84 195.313 mo
366.84 195.313 li
367.2 195.073 367.56 195.193 367.68 195.433 cv
367.8 195.793 367.8 196.153 367.44 196.273 cv
367.2 196.513 366.84 196.393 366.6 196.033 cv
366.48 195.793 366.6 195.433 366.84 195.313 cv
cp
372.12 192.313 mo
373.08 191.833 li
377.64 189.193 li
379.32 188.113 li
379.68 187.993 380.04 187.993 380.16 188.353 cv
380.4 188.593 380.28 188.953 380.04 189.193 cv
378.24 190.273 li
373.68 192.913 li
372.72 193.393 li
372.48 193.513 372.12 193.513 371.88 193.153 cv
371.76 192.913 371.88 192.553 372.12 192.313 cv
cp
384.48 184.993 mo
384.48 184.993 li
384.72 184.753 385.08 184.873 385.32 185.113 cv
385.44 185.473 385.32 185.833 385.08 185.953 cv
384.84 186.193 384.48 186.073 384.24 185.833 cv
384.12 185.473 384.12 185.113 384.48 184.993 cv
cp
389.4 181.753 mo
390.36 181.033 li
394.44 178.273 li
396.36 176.953 li
396.6 176.713 396.96 176.833 397.2 177.073 cv
397.32 177.313 397.32 177.673 397.08 177.913 cv
395.04 179.353 li
391.08 182.113 li
390.12 182.713 li
389.88 182.833 389.52 182.833 389.28 182.473 cv
389.16 182.233 389.16 181.873 389.4 181.753 cv
cp
401.16 173.353 mo
401.16 173.353 li
401.4 173.113 401.76 173.233 402 173.473 cv
402.12 173.713 402.12 174.073 401.88 174.313 cv
401.64 174.553 401.28 174.433 401.04 174.193 cv
400.8 173.953 400.92 173.593 401.16 173.353 cv
cp
405.84 169.633 mo
409.08 166.993 li
412.2 164.233 li
412.44 163.993 412.92 164.113 413.04 164.353 cv
413.28 164.593 413.28 164.953 413.04 165.193 cv
409.8 167.953 li
406.56 170.593 li
406.32 170.833 405.96 170.713 405.72 170.473 cv
405.6 170.233 405.6 169.873 405.84 169.633 cv
cp
416.64 160.273 mo
416.64 160.273 li
416.88 160.033 417.24 159.913 417.48 160.153 cv
417.72 160.393 417.72 160.753 417.48 160.993 cv
417.24 161.233 416.88 161.233 416.64 161.113 cv
416.4 160.873 416.4 160.393 416.64 160.273 cv
cp
420.84 155.953 mo
421.2 155.593 li
422.52 154.153 li
423.84 152.833 li
425.04 151.393 li
426.24 150.073 li
426.48 149.833 li
426.72 149.593 427.08 149.473 427.32 149.713 cv
427.56 149.953 427.56 150.313 427.44 150.553 cv
427.2 150.793 li
426 152.233 li
424.8 153.673 li
423.48 154.993 li
422.16 156.433 li
421.68 156.793 li
421.56 157.033 421.08 157.033 420.84 156.793 cv
420.6 156.553 420.6 156.193 420.84 155.953 cv
cp
430.2 145.153 mo
430.2 145.153 li
430.32 144.793 430.68 144.793 431.04 145.033 cv
431.28 145.153 431.28 145.513 431.16 145.873 cv
430.92 146.113 430.56 146.113 430.32 145.993 cv
430.08 145.753 429.96 145.393 430.2 145.153 cv
cp
433.44 140.233 mo
434.04 139.153 li
434.88 137.833 li
435.48 136.633 li
436.2 135.313 li
436.8 134.113 li
437.28 132.793 li
437.4 132.553 437.76 132.313 438.12 132.433 cv
438.36 132.553 438.48 132.913 438.36 133.273 cv
437.88 134.593 li
437.28 135.913 li
436.56 137.113 li
435.84 138.433 li
435.12 139.873 li
434.52 140.833 li
434.4 141.073 433.92 141.193 433.68 140.953 cv
433.44 140.833 433.32 140.473 433.44 140.233 cv
cp
439.08 127.153 mo
439.08 127.153 li
439.08 126.913 439.44 126.673 439.68 126.673 cv
440.04 126.793 440.28 127.153 440.16 127.393 cv
440.16 127.753 439.8 127.993 439.44 127.873 cv
439.2 127.873 438.96 127.513 439.08 127.153 cv
cp
439.44 121.393 mo
439.32 120.433 li
439.2 119.353 li
438.96 118.393 li
438.84 118.153 li
438.72 117.793 438.96 117.433 439.32 117.433 cv
439.56 117.313 439.92 117.433 440.04 117.793 cv
440.16 118.153 li
440.4 119.233 li
440.52 120.313 li
440.64 121.273 li
440.64 121.633 440.4 121.873 440.16 121.993 cv
439.8 121.993 439.44 121.753 439.44 121.393 cv
cp
f
99.24 30.073 mo
99.24 22.273 105.6 15.913 113.4 15.913 cv
121.2 15.913 127.56 22.273 127.56 30.073 cv
127.56 37.873 121.2 44.233 113.4 44.233 cv
105.6 44.233 99.24 37.873 99.24 30.073 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
1.2 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
99.24 30.073 mo
99.24 22.273 105.6 15.913 113.4 15.913 cv
121.2 15.913 127.56 22.273 127.56 30.073 cv
127.56 37.873 121.2 44.233 113.4 44.233 cv
105.6 44.233 99.24 37.873 99.24 30.073 cv
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: WGJAAA+Times#20New#20Roman Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /WGJAAA+Times#20New#20Roman
Type42DictBegin
[<00010000000b000b000b000b637674200a59331b000000bc000007da6670
676d8309a2560000089800000631676c7966367c7eb6000029480000074c
68656164a795fde300000ecc00000036686865612d08ee1200000f040000
0024686d7478f501391a00000f28000000186c6f63618c14000000000f40
0000001c6d617870ad04da0600000f5c000000206e616d6507f51c680000
0f7c00000a84707265700b07f42f00001a0000000f456764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f000040425554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019234445b01a23444565234520b00325606a20b009234223688a6a6061
20b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b2359
61441cb114008a5279b31940201945208a54582321b03f1b235961442d2c
b110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d
432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b5258
45441b2121592d2c0120b003252349b04060b0206320b000525823b00225
3823b002256538008a63381b212121212159012d2c4bb06451584569b009
43608a103a1b212110592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d
2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802
b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2cb4000100000015b00826b00826b00826b008260f1016134568
3ab001162d2cb4000100000015b00826b00826b00826b008260f10161345
68653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b545820
458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b21
21592d2c014b53234b515ab00225b00425b006254923451869525a58b002
25b00225b00525462345696048592121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c462346608a8a462320468a608a61b8ff8062232010238ab9035803588a
70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2cb0024354584b53234b515a58381b2121591b21
212121592d0000000001000000053333860d83f15f0f3cf5081908000000
0000a2e31dc200000000cf756137fb74fd8c1000080e0000000900010001
00000000000100000721fe4500571000fb74fadf10000001000000000000
000000000000000000060639011c0400004a040000f00400002c04000053
040000200000000000000076000001a80000028c0000045c0000063a0000
074c00010000000600f2003c009d000700020010002f00560000062504eb
000500020000003a02be0000000300000000006a00000000000300000001
001e006a0000000300000002000e01120000000300000003007200e00000
000300000004001e006a0000000300000005001801520000000300000006
0022016a00000003000000070076006a0000000300000008003000ae0000
0003000000090086018c000000030000000d029a02120001000000000000
003504ac0001000000000001000f04e10001000000000002000705350001
0000000000030039051c0001000000000004000f04e10001000000000005
000c05550001000000000006001105610001000000000007003b04e10001
00000000000800180503000100000000000900430572000100000000000d
014d05b50003000104030002000c07020003000104050002001007120003
000104060002000c072200030001040700020010072e0003000104080002
0010073e0003000104090000006a00000003000104090001001e006a0003
000104090002000e01120003000104090003007200e00003000104090004
001e006a00030001040900050018015200030001040900060022016a0003
0001040900070076006a0003000104090008003000ae0003000104090009
0086018c000300010409000d029a021200030001040a0002000c07020003
0001040b00020010074e00030001040c0002000c070200030001040e0002
000c075e0003000104100002000e076e00030001041300020012077c0003
000104140002000c07020003000104150002001007020003000104160002
000c07020003000104190002000e078e00030001041b00020010075e0003
0001041d0002000c070200030001041f0002000c07020003000104240002
000e079c00030001042a0002000e07aa00030001042d0002000e07b80003
0001080a0002000c07020003000108160002000c0702000300010c0a0002
000c0702000300010c0c0002000c070200a9002000320030003100340020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e00540069006d006500730020004e0065007700200052006f006d0061
006e00200069007300200061002000740072006100640065006d00610072
006b0020006f006600200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
004d006f006e006f0074007900700065003a00540069006d006500730020
004e0065007700200052006f006d0061006e00200052006500670075006c
00610072003a00560065007200730069006f006e00200035002e00310031
00200028004d006900630072006f0073006f006600740029005600650072
00730069006f006e00200035002e0032003000540069006d00650073004e
006500770052006f006d0061006e00500053004d0054004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d0020005300740061
006e006c006500790020004d006f007200690073006f006e002c00200056
006900630074006f00720020004c0061007200640065006e007400200031
0039003300320059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
00450055004c004100200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c007500640065006400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e0074002e002000200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002ea9203230313420546865204d6f6e6f747970
6520436f72706f726174696f6e2e20416c6c205269676874732052657365
727665642e54696d6573204e657720526f6d616e20697320612074726164
656d61726b206f6620546865204d6f6e6f7479706520436f72706f726174
696f6e2e4d6f6e6f747970653a54696d6573204e657720526f6d616e2052
6567756c61723a56657273696f6e20352e313120284d6963726f736f6674
2956657273696f6e20352e323054696d65734e6577526f6d616e50534d54
4d6f6e6f7479706520547970652044726177696e67204f6666696365202d
205374616e6c6579204d6f7269736f6e2c20566963746f72204c61726465
6e742031393332596f75206d617920757365207468697320666f6e742061
73207065726d6974746564206279207468652045554c4120666f72207468
652070726f6475637420696e207768696368207468697320666f6e742069
7320696e636c7564656420746f20646973706c617920616e64207072696e
7420636f6e74656e742e2020596f75206d6179206f6e6c79202869292065
6d626564207468697320666f6e7420696e20636f6e74656e742061732070
65726d69747465642062792074686520656d62656464696e672072657374
72696374696f6e7320696e636c7564656420696e207468697320666f6e74
3b20616e6420286969292074656d706f726172696c7920646f776e6c6f61
64207468697320666f6e7420746f2061207072696e746572206f72206f74
686572206f75747075742064657669636520746f2068656c70207072696e
7420636f6e74656e742e004e006f0072006d0061006c006e0079006f0062
0079010d0065006a006e00e9006e006f0072006d0061006c005300740061
006e0064006100720064039a03b103bd03bf03bd03b903ba03ac004e006f
0072006d00610061006c0069004e006f0072006d00e1006c006e0065004e
006f0072006d0061006c0065005300740061006e00640061006100720064
041e0431044b0447043d044b0439004e0061007600610064006e006f0074
006801b001a10300006e00670041007200720075006e00740061b9005403
ecb3032a1f3f411503e4006003e9009f03e500df03e50004001003e40010
03e5003f03e5007003e400ff03e40005ffc003e1b345453240b803e1b32b
2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001fffc0
03dfb2161b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003deb3
2a2d32df410a03de00ef03de000203de03df0028001fffc003dfb3282e32
f0410d03df0001037e000f0101001f00a003dd00b003dd0002004003dab3
2426329fbf03cc000103ca03c90064001fffc003c9b20d1132410a03c703
b70012001f03b603b50064001fffc003b5b30e1132004173038d000100c0
038d00d0038d00e0038d00f0038d0004006f03a7007f03a7008f03a700af
03a70004000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef03a5
0001000f03a5002f03a5006f03a5008f03a50004005403aa0001006b03aa
000103a8036a0022001f038c03940015001f038b03930015001f03a40393
001a001f03a20394001e001f03a10393001e001f039f0394001e001f039b
0394001a001f039a0393001e001f039903940016001f039803940016001f
03970393001b001f03960394001b001f03950393001b001f03760375001a
001f03740375001a001f03a00373b21e1f10411e03930020039300300393
000300200394003003940040039400030000039400010383036c001e001f
03b1036c0032001f036d036c0032001fffc0037db2212332b9ffc0037db3
171932a0410a037d00b0037d00c0037d00d0037d0004ffc0037cb2212332
b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0037c00040030
0373004003730002000003730010037300200373000300e0037300f00373
000200b0037300c0037300d003730003008403730090037300a003730003
0377036a0029001f0389036ab2281f40b80367b33940323fbb0366000100
400366b3191d328fbb0366000100400366b3090a3240b80366b3090e3240
b80366b3090f323fbb0365000100400365b3090c3240b80365b31a1d3240
b80365b3090e326b410e0363007b03630002001403630024036300340363
0044036300040363b2242f1fba034e006d0800400e1f7f027f037f047f05
0430440112bf033200500800001f0012032d003c080040291f5f3c013760
09700980090310092009300940095009056f037f038f03031f032f033f03
4f035f0305b8ffc0b2073a33b8ffc04047063a33900ba00bb00bc00bd00b
05b006c006d006e006f0060520063006400650066006700680069006a006
099006900702600b700b800b03100b200b300b400b500b051f0701a04185
0362000100000362001003620070036200900362000400f0035f00010020
035e0020035f0030035f0040035e00040000035e0000035f0010035f00d0
035e00e0035f00050010030f0020030f0030030f00d0030f00e0030f0005
0000030f0010030f0050030f0060030f0070030f00d0030f00060000030f
0010030f0020030f0030030f00e0030f00f0030f0006030f00270000030e
0030030e000200e0030e00f0030e0002030e004a00e0030d00f0030d0002
030d002700d002fc0001001002fc002002fc005002fc000300d002fc00e0
02fc0002000002fc001002fc002002fc003002fc005002fc006002fc0006
00e002fc00f002fc0002002002fc003002fc004002fc000302fc406127c0
2901b02901a02901902901403c3f413240223f41321212125f235f255f28
5fa5046f236f256f286fa5044f234f254f284fa5043f233f253f283fa504
2f232f252f282fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f4c6f
4c7f4c0337b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a3237
0f413b02af0001005f02af009f02af00df02af0003001f02af002f02af00
3f02af006f02af000402af02af001f02ad002f02ad003f02ad004f02ad00
5f02ad000500df02ad0001000f02ad001f02ad003f02ad005f02ad009f02
ad0005005f02ad00df02ad0002000f02ad001f02ad003f02ad0003004002
acb23a334f414a02ac005f02ac009f02ac0003002f02ac003f02ac000200
0f02ac003f02ac00af02ac000300b002ac00e002ac0002004f02ac005f02
ac00a002ac0003001f02ac002f02ac003f02ac0003000f035a0001000f03
5a001f035a003f035a005f035a0070035a000500cf035700df0357000200
0f0357001f03570070035700af03570004035a035a0357035702ad02ad02
ac02ac032c400d31151f001616000000121108104110020c004a000d01a8
004a000d0198004a000d0189004a000d013f004a000d0124400e4a0df64a
0dbe4a0d864a0d274a0dbe02280041000d01940041000d0121400b410db4
410d4f410d29410d411002170021000d02150021000d02060021000d01eb
0021000d014e0021000d012c4014210df9210df3210df1210d9d210d7121
0d3d210d4110021c001f000d0214001f000d020b001f000d0196001f000d
014a001f000d0126400b1f0dc61f0d571f0d371f0d410d019e0141000d00
420141000d001e0141000d001b0141000d01f2b40f440f0009bb01f20044
000d0201b23c291fb80200b23c291fb801ffb23c411fb801feb23c471fb8
01fdb23c9e1fb801fab23c931fbc01f9010f0101001f01f6b224e41f4115
01f401490401001f01f301490401001f01f1014900ab001f01f001490067
001f01a6003c0125001f01a4b23c811f411501a3010f019a001f01a20022
0801001f01a100500401001f019f0149019a001f019d01490067001f019c
b22c621fb8019bb22c791fbc019a002c0101001f0197b22ce41fb80193b2
2c891fb80192b22c6c1fb8018fb2259e1fb8016ab23c2a1f411101670024
0201001f0163002502ab001f014c010f019a001f01480149006c001f0147
b22c891fb80145b22c9e1fb80144b22c791fb80143b223311fb80127b23c
811fbc012300500101001f011fb223e41f4115011d0023019a001f011c00
230801001f011b00250801001f010e010f0401001f010d00220401001f01
08b223811fb80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc0149
0156001f00e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb1f
c524b80156b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b9014902
01b61faf2c671fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a1f
9925b80201b21f812cbc0401001f006d010f0156400b1f592c3e1f4c3cab
1f4625b80101b21f403cb80125400a1f3a23721f393cab1f38b80149b3ab
1f3124b80401b21f3025b802abb61f2a24e41f2623b80156b21f5537ba02
3500070175402c0774076207560751073b0733072d0720071d071c071408
120810080e080c080a080808060804080208000814b8ffe0402b00000100
140610000001000604000001000410000001001002000001000200000001
000002010802004a00b013034b024b534201b0124b004b5442b0372b4bb8
07ff52b0382b4bb008505b58b101018e59b0382bb00288b801005458b801
ffb101018e851bb0124358b90001012f858d1bb90001017c858d5959014b
b0c063004b6220b0f65323b8010a515ab0052342180016763f183f123e11
3946443e113946443e113946443e113946443e11394660443e1139466044
2b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b
5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b90271026f4544b9
0270026f45445958b9017a0271455258b90271017a4459594bb04753205c
58b9002202704544b9003c027045445958b901b30022455258b9002201b3
4459594bb04c53205c58b9014900224544b1222245445958b901c2014945
5258b9014901c24459594bb06753205c58b9002402714544b90050027145
445958b9021e0024455258b90024021e4459594bb8020153205c58b9010f
00224544b1222245445958b90c00010f455258b9010f0c004459594bb01c
53205c58b125254544b12c2545445958b13725455258b125374459594bb0
ab53205c58b125254544b1232545445958b901590025455258b900250159
4459594bb8010153205c58b125254544b1282545445958b9020800254552
58b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560234560b0
8b766818b080622020b164dc4565234520b003266062636820b003266165
b0dc236544b064234420b161634565234520b003266062636820b0032661
65b063236544b0612344b10063455458b163406544b26140614523614459
b3a67f434b456523456023456560234560b089766818b080622020b1437f
4565234520b003266062636820b003266165b07f236544b043234420b1a6
4b4565234520b003266062636820b003266165b04b236544b0a62344b100
4b455458b14b406544b2a640a645236144594b5242014b5058b108004259
435c58b108004259b3020b0a124358601b2159421610703eb0124358b93b
21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d41
1bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01
a80400000b2b59b0102342b0112342002b00184569444569444569444569
44737373747373737475752b7373747475184569447373742b4bb021534b
b046515a58b03cb03c45b040604459012b2b2b2b75757575757575754358
4010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf2202
5f226f227f228f229f22af2206757559435c58b6403c9f22ef220375592b
2b0174747474454473737474757545447345447374454473747573737373
7300757575737575752b2b757575752b752b435841220063032d00010003
032d0013032d0023032d0033032d0053032d000500c3032d00d3032d00e3
032d00f3032d00040083032d0093032d00a3032d00b3032d0004032d032d
4518694474747575592b4358b900180332b330353238b80332b361663238
b80332b3535a3238b80332b3454e3238b80332b33c413218b80332b23f33
0a410f0332000100ba033200ca033200da033200ea033200fa0332000503
3203324518694474752b2b2b2b2b2b597300732b012b7575002b2b2b7400
2b2b2b732b74012b002b2b017373737474732b2b00732b2b002b2b2b0173
74732b012b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b000173750073730045
69440073730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b
2b73742b2b00000000>
[1869 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 118 1 <0002004affe803b705680010002400bab2610820b80106b2050515b80106
b20d0d1ab8010f4012091a002640260240266026a026e026042611b8010f
400e5f006f007f008f00a00005001925ba011e010100182b4e10f45d4ded
4e105d71f64ded003fed3fed31304379404c012423242224020602010301
020607251c1b1d1b1e1b030613260f250b2618191719020621041162001f
061a6201140e116200160c1a620124012062011b08206201121015620019
0a1562002b2b2b2b012b2b2b2b2a2b2b2b2a2b2a2a811334123736333217
16111402062322272637101716333236373611342726272623220706024a
8c745a609c7c9b88d362c2816dc445397136741e2e302439293a44354834
029ee8014f52419fc5feafecfeb695e5c1f7fee8b1956172ac0139e89b73
30213d53fe9c>WGJAAA+Times#20New#20Roman AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>WGJAAA+Times#20New#20Roman AddT42Char 
WGJAAA+Times#20New#20Roman /CharStrings get begin
/g1 1 def
end
WGJAAA+Times#20New#20Roman /Encoding get
dup 32 /g1 put
pop
end
%ADOEndSubsetFont
/FDAXXI+Times#20New#20Roman /WGJAAA+Times#20New#20Roman findfont ct_VMDictPut
/FDAXXI+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 223{/.notdef}rp]
FDAXXI+Times#20New#20Roman nf
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
109.919 34.2724 mo
( )sh
99.24 72.673 mo
99.24 64.753 105.6 58.393 113.4 58.393 cv
121.2 58.393 127.56 64.753 127.56 72.673 cv
127.56 80.473 121.2 86.833 113.4 86.833 cv
105.6 86.833 99.24 80.473 99.24 72.673 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
99.24 72.673 mo
99.24 64.753 105.6 58.393 113.4 58.393 cv
121.2 58.393 127.56 64.753 127.56 72.673 cv
127.56 80.473 121.2 86.833 113.4 86.833 cv
105.6 86.833 99.24 80.473 99.24 72.673 cv
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: WGJAAA+Times#20New#20Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WGJAAA+Times#20New#20Roman gcheck setglobal} if
1 424 2 <000100f000000306056800160097401440186018a018e018040018401802
76008600020e411301690141000901a00022000301690141000801a00023
000001f8000f016900160141000001f2400e010f0f020902010509080c02
0300ba01f70003014940120e0e0f401135300f7f0f900fa00f040f1917ba
022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c111239011139
00f5edfc01f52b2b3130005d01715d13253311141616171521353e023511
34272626232207f0014a21133c5cfe026038160a07251a254204c7a1fb87
72381e022525021d317a02dc942a201e1f00>WGJAAA+Times#20New#20Roman AddT42Char 
WGJAAA+Times#20New#20Roman /CharStrings get begin
/g2 2 def
end
WGJAAA+Times#20New#20Roman /Encoding get
dup 33 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXI+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 /g2 222{/.notdef}rp]
FDAXXI+Times#20New#20Roman nf
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
109.919 76.7574 mo
(!)sh
99.24 115.153 mo
99.24 107.353 105.6 100.993 113.4 100.993 cv
121.2 100.993 127.56 107.353 127.56 115.153 cv
127.56 122.953 121.2 129.313 113.4 129.313 cv
105.6 129.313 99.24 122.953 99.24 115.153 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
99.24 115.153 mo
99.24 107.353 105.6 100.993 113.4 100.993 cv
121.2 100.993 127.56 107.353 127.56 115.153 cv
127.56 122.953 121.2 129.313 113.4 129.313 cv
105.6 129.313 99.24 122.953 99.24 115.153 cv
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: WGJAAA+Times#20New#20Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WGJAAA+Times#20New#20Roman gcheck setglobal} if
1 652 3 <0001002c000003ab0568001e0168408207180b3917181c3d3418401c3d34
19401c3d340f1e161629073c074907a9070640205b045a085b175a186b08
741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020f904f917
1515011d0419051b15191619171d180709170b180b1d3419471989178f20
0718190202171a190c19060d031902050618171615140713040db8016840
090940140c3f80090109b80333400c10051a8f19019f19af190219ba0333
0003018db301020c1eb8018d400d0006e24f135f136f137f130413b80107
4013400001001a002040208020036020a020022019bb01f90003000d0140
40145f026f027f028f02bf02cf02df02ef020802191fba018e010100182b
4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d713c3ffd
71b10602435458b78f0901bf09cf0902005d71592be41112173911123901
111239390210b10602435458b47d198d1902005d590e3c8710057dc40ec4
31300171725d005d012b2b2b002b01032135000035342623220607233636
33321615140706070207213236363703ab5ffce0016101209e6e649f2625
19cf9ba5dd304aa6f93e01626c57461a0105fefb2501420198a981a67571
b9c6d4906767a2b5fef03810312d>WGJAAA+Times#20New#20Roman AddT42Char 
WGJAAA+Times#20New#20Roman /CharStrings get begin
/g3 3 def
end
WGJAAA+Times#20New#20Roman /Encoding get
dup 34 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXI+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 /g2 /g3 221{/.notdef}rp]
FDAXXI+Times#20New#20Roman nf
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
109.919 119.228 mo
(")sh
99.24 157.633 mo
99.24 149.833 105.6 143.473 113.4 143.473 cv
121.2 143.473 127.56 149.833 127.56 157.633 cv
127.56 165.433 121.2 171.793 113.4 171.793 cv
105.6 171.793 99.24 165.433 99.24 157.633 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
99.24 157.633 mo
99.24 149.833 105.6 143.473 113.4 143.473 cv
121.2 143.473 127.56 149.833 127.56 157.633 cv
127.56 165.433 121.2 171.793 113.4 171.793 cv
105.6 171.793 99.24 165.433 99.24 157.633 cv
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: WGJAAA+Times#20New#20Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WGJAAA+Times#20New#20Roman gcheck setglobal} if
1 1116 4 <00010053ffe8035605680032014cb9000affe0b20c3909b8ffc0403c0c39
4109450a460b4b2204cf09012929382940346034cf34e034f70a07003401
41097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c490829b801
8cb328281000b802e4b3d0300130b80334b5030510160116b8019fb51d40
2b2f341db80143b3100d2928bb01680014000902e3400b50208020029020
a0200220b80333b3b00c010cb80190400b502d802d02902da02d022db803
33b55f077f070207b802e5400a403401a034c034023400b8013eb74013bf
1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d71f45ded
5d71e410f43c003fed2bed723fed5ded12392fed3130437940362e2f1e26
0a0f04062221232124212521040605250e26260a2062012f042d62011e0f
206201210b2762010a092e063062011f0d1d62002b2b103c2b012b2b2b2b
2b2a81818181005d01715d7200712b2b1336363332171615140716161514
070621222635343633321716161716333236353427262726262323353e02
353426232207683ab184a35742ba7d807092feeb89632f21191a11781725
2a6697231a1f2b964e204f9f4881609b68044a89956a4f5a949e31b67bb0
81a844271d2c08053f060b9e6c4f4b381d28411e0a5e844f677fa600>WGJAAA+Times#20New#20Roman AddT42Char 
WGJAAA+Times#20New#20Roman /CharStrings get begin
/g4 4 def
end
WGJAAA+Times#20New#20Roman /Encoding get
dup 35 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXI+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 220{/.notdef}rp]
FDAXXI+Times#20New#20Roman nf
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
109.919 161.84 mo
(#)sh
99.24 200.113 mo
99.24 192.313 105.6 185.953 113.4 185.953 cv
121.2 185.953 127.56 192.313 127.56 200.113 cv
127.56 208.033 121.2 214.393 113.4 214.393 cv
105.6 214.393 99.24 208.033 99.24 200.113 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
99.24 200.113 mo
99.24 192.313 105.6 185.953 113.4 185.953 cv
121.2 185.953 127.56 192.313 127.56 200.113 cv
127.56 208.033 121.2 214.393 113.4 214.393 cv
105.6 214.393 99.24 208.033 99.24 200.113 cv
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: WGJAAA+Times#20New#20Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WGJAAA+Times#20New#20Roman gcheck setglobal} if
1 1594 5 <00020020000003b90568000a000d00d74028160d010f00450d400f03400f
012a0c011507010206010309050601040c0b0d00040c0d04060c0d0db801
1c401207081407070808030407060c08001f0d010dbb019c0006000b019f
400d050106090806060805040c0c04bb0149000300080166400b09090f03
019f03af030203b801f74018013f0001001a000f01600fa00fe00f030f06
40070107190eba018e010100182b4e10f4713c105d71f65d3c4df45d713c
10e610fd3c003f3f392f103c103c10ed10fd723c1139113901111239872e
2b047d10c4011112390f0f0f313000725d015d7172011523112311213501
331123110103b9b6a5fdc202756ea5fe2401f48efe9a0166800382fc8c02
a1fd5f00>WGJAAA+Times#20New#20Roman AddT42Char 
WGJAAA+Times#20New#20Roman /CharStrings get begin
/g5 5 def
end
WGJAAA+Times#20New#20Roman /Encoding get
dup 36 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXI+Times#20New#20Roman*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 219{/.notdef}rp]
FDAXXI+Times#20New#20Roman nf
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
109.919 204.311 mo
($)sh
340.2 166.153 mo
340.2 165.313 340.2 164.713 340.2 164.713 cv
340.2 164.713 340.2 165.313 340.2 166.153 cv
340.2 166.993 340.2 167.593 340.2 167.593 cv
340.2 167.593 340.2 166.993 340.2 166.153 cv
@
36.48 29.833 mo
36.6 22.033 43.08 15.793 50.88 15.913 cv
58.68 16.033 64.92 22.513 64.8 30.313 cv
64.68 38.233 58.2 44.353 50.4 44.233 cv
42.6 44.113 36.36 37.633 36.48 29.833 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
36.48 29.833 mo
36.6 22.033 43.08 15.793 50.88 15.913 cv
58.68 16.033 64.92 22.513 64.8 30.313 cv
64.68 38.233 58.2 44.353 50.4 44.233 cv
42.6 44.113 36.36 37.633 36.48 29.833 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.034 .245 .245 -14.034 0 0 ]msf
47.0364 34.1537 mo
( )sh
36.48 72.313 mo
36.6 64.513 43.08 58.273 50.88 58.393 cv
58.68 58.633 64.92 64.993 64.8 72.913 cv
64.68 80.713 58.2 86.953 50.4 86.833 cv
42.6 86.593 36.36 80.233 36.48 72.313 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
36.48 72.313 mo
36.6 64.513 43.08 58.273 50.88 58.393 cv
58.68 58.633 64.92 64.993 64.8 72.913 cv
64.68 80.713 58.2 86.953 50.4 86.833 cv
42.6 86.593 36.36 80.233 36.48 72.313 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.034 .245 .245 -14.034 0 0 ]msf
47.0388 76.6336 mo
(!)sh
36.48 114.913 mo
36.6 106.993 43.08 100.873 50.88 100.993 cv
58.68 101.113 64.92 107.593 64.8 115.393 cv
64.68 123.193 58.2 129.433 50.4 129.313 cv
42.6 129.193 36.36 122.713 36.48 114.913 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
36.48 114.913 mo
36.6 106.993 43.08 100.873 50.88 100.993 cv
58.68 101.113 64.92 107.593 64.8 115.393 cv
64.68 123.193 58.2 129.433 50.4 129.313 cv
42.6 129.193 36.36 122.713 36.48 114.913 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.034 .245 .245 -14.034 0 0 ]msf
47.039 119.24 mo
(")sh
36.48 157.393 mo
36.6 149.593 43.08 143.353 50.88 143.473 cv
58.68 143.593 64.92 150.073 64.8 157.873 cv
64.68 165.673 58.2 171.913 50.4 171.793 cv
42.6 171.673 36.36 165.193 36.48 157.393 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
36.48 157.393 mo
36.6 149.593 43.08 143.353 50.88 143.473 cv
58.68 143.593 64.92 150.073 64.8 157.873 cv
64.68 165.673 58.2 171.913 50.4 171.793 cv
42.6 171.673 36.36 165.193 36.48 157.393 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.034 .245 .245 -14.034 0 0 ]msf
47.0415 161.72 mo
(#)sh
36.48 199.873 mo
36.6 192.073 43.08 185.833 50.88 185.953 cv
58.68 186.073 64.92 192.553 64.8 200.353 cv
64.68 208.153 58.2 214.393 50.4 214.273 cv
42.6 214.153 36.36 207.673 36.48 199.873 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
36.48 199.873 mo
36.6 192.073 43.08 185.833 50.88 185.953 cv
58.68 186.073 64.92 192.553 64.8 200.353 cv
64.68 208.153 58.2 214.393 50.4 214.273 cv
42.6 214.153 36.36 207.673 36.48 199.873 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.034 .245 .245 -14.034 0 0 ]msf
47.0439 204.199 mo
($)sh
112.68 44.233 mo
113.4 58.393 li
@
113.04 86.833 mo
113.04 100.993 li
@
113.04 129.313 mo
113.04 143.473 li
@
113.16 171.793 mo
113.04 186.073 li
@
127.56 29.353 mo
135.36 29.353 141.72 67.753 141.72 115.153 cv
141.72 162.073 135.48 200.113 127.56 200.113 cv
127.56 200.113 li
@
%ADOBeginSubsetFont: ONKBAA+Times#20New#20Roman#20Bold Initial
ct_T42Dict begin
-0.555 -0.305 2 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /ONKBAA+Times#20New#20Roman#20Bold
Type42DictBegin
[<00010000000b000b000b000b63767420c64ceb89000000bc000008266670
676dc00c20fd000008e4000005f2676c7966f49f376c00003158000014b8
68656164a9a513e300000ed800000036686865613609031200000f100000
0024686d7478f505383800000f340000003c6c6f63614699000000000f70
000000406d6178707803480800000fb0000000206e616d65039d59130000
0fd000000e4270726570a13c7d2400001e14000013416764697200000000
0000000000000000058e001f054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe0031300000124000001240000
00000000000000250084002400e8009600bf005d00cb02030045012e0058
00040118001900020139004b011000170005010a00280023004b00500015
004a00e5010d00af003100ea014600810125004f009c0022004e00160041
009100a00147ffe9008100d3016900ab001700a801400027004c0148ffdf
00510050ffb7012e0000003b0097009a010e001f004c010a0123ffde0022
0073008700ba00d600ff005a009805a0ffe900500052006effb7005c00d1
015a015bff1c0049006e007e009800a100bd00e4018801c00405ff600035
006200720107011301280382ffa8003805d809b5ffc4ffd00010006e00a1
00ba00ec022b0446ffee004000e80401ff680003001300330033006e00a2
00b600dc011801350343000e0034005c005d007c00af0328003b00480089
009c00ba017b01af030effa4001700370063007f00e0017801c0022105d8
05f0ff7a0012002700340052008a00a400c100c300eb011801460154036d
fe3fff4e00010008002b0045006e0084008600ae00af00c200c200c4010f
01210149017b01c101de01e1036e03e6006300a700ed00f600f801280169
017e023f02820532fd81ffb5002600350040004500490057006c00ac0126
0140015b017b019c0277027e027f03b603dc042804efff38ffc30006002f
0040008200aa00b600ce00d300d700e50146014d01d6027e03b30586ff7b
0012002f0068007f008400a500b900f501050109010c0114012001330137
0178017b01c001e1021d02230258036203af058cff79ff8d00210024005d
00650068006a0083008500b700cf00e200eb00ed011a0120012f0137013f
0150018d018f01c402cf0357035c03960440049604ab04c204fc051105c2
fed1fee00013002100240030004d004d005d0066007a007c00b800b800c3
00da0103011b011e012f013d014a0150015f0166017c0190019501a301a6
01b601c701d001e901ef01f90218028c029402bb02c502cf02d0031d032a
0344039f03cc042104da04fb0761fd1dfebffeefff0bff2bff33ff90ff9c
ffdbffed00010008001c0025003f0043005a006b0080008400900095009d
00a700b400cd00d500d600df00df00df00e400f000f600fb010601130119
011b012201230127012c013f015701580177018a019301a401c601e101e4
01fc0200020c02220222022a0236024a025c028202ec02fc030a03230341
0378039703d203fa04790532053205ab05b505f006e4072508ccfc9bfdde
fe00fe69fe96fe9bff3500030006000e00130019003400420048004a0057
006400710071007200760077007a007a0083009c00af00af00b200bb00c8
00cc00cf00cf00db00dc00df00e400e400e400e900eb00f400fd00fe0102
0105010501080108011b01220123013001370143015b0160016501780178
01780178017b0182018901980198019b019e01a101a601d101d201d301df
01e301f502000200022d02410247024a0250025b025d025d025f02630281
028b02b402b402ce02d602db02e202fa03100311031f0327034503670388
038a03b003b403d403d5042604410448046b04c704d1053205480549055f
0563058b05a105a305c205ca05e405ff069306a206b806e8070a07360750
0754078907a907bb07dc07ff08270120014d011b01290000000000000000
00000093015b042f029001ff02b800db00be027403cb029401ab00000000
0000000000000000058a038a0364005f02b803bd029d7c9003e203ac0282
0000044400000000003d010a00cc00bc00cc05d3041505e800c7021a00ee
00000194036102be029902180136033b048504cc0050007905a305a302df
020702af000001eb0064005f0055011900f2045600ef00c800cf058a0143
014602de01ab02c6024a005d00d800a402bb009900a00065013702740364
00b500fa009101b9032001b60025007f00d000ec00e00000000000000000
0000042ffd42023f06180276063a013701b90151ffc70229ffeb023f02e1
018500db03fa01900156014e012f00a600e300bb00d50134011f04fe041b
00d100e4011e009b00cd00e700b300e200ca042400b800f500b90334005a
04e00123012ffdc9fe440574038301f602410002001700500015004f0017
00a80051009800520049006e000e00af017b017b019c006a008300eb00cd
0122000005d306da009a008f00ba0315002503a5028002ff03c804200092
00e0034c009b007d00f8011c013400a8006d006900000420ffe6fea4006a
006a003800380162015a0044006d0048001eff6d00a600a600400040ff5c
ff990559052b00ce014c011500bf0140011800c800960509feed004800b4
009500db0048018b00b3fe6400c000ea01180125013203b003ed05760590
05aa05b405be05cd063100780084009b00cc00e200f4010a0120016300d1
00ea00f7010801420019002c00340041003800480058006c025903bd0043
011a007000d30028003700420050005a0064007300780082008c009c00a5
00bd00ce00f00110015c00be00d801020117012c016300ea01080041004b
0055005f007300a60109018301b300410064001e002a00eb00fa010e0138
0274002c00400082009600b600c000cc00dc00e600f000ff010a0120012c
013b01440156016300f70057006401100136005001b10000ffb60039004e
004403cc00e5002401100042012201a400f0006000e0000e001d003905e3
0102002cfe4eff38026903bd011600ff000e00a00054001b003d01710041
000f005000fd0015014f0035fe47003900ab0080005005a50016002b00ac
0115021504570555007300da005c00ce0072ff58019a0744000040425554
403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a2928272625242322
21201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b09051582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b5320
5c58b002855958b00185592d2c20b0032545b019234445b01a2344456523
4520b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a
40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b31940
201945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f
4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f4323
43650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003
252349b04060b0206320b000525823b002253823b002256538008a63381b
212121212159012d2c4bb06451584569b00943608a103a1b212121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20
b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3e
b02a2a2d2c352d2c76b8029f23701020b8029f4520b0005058b00161593a
2f182d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015
b00826b00826b00826b008260f10161345683ab001162d2cb40001000000
15b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b
515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53
234b515a58381b2121592d2c4b5458381b2121592d2cb0134358031b0259
2d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2cb01243
5c580cb00425b00425060c6423646164b807085158b00425b00425012046
b01060482046b0106048590a21211b2121592d2cb012435c580cb00425b0
0425060c6423646164b807085158b00425b00425012046b8fff060482046
b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d
2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a5838
1b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b21
21592d2c462346608a8a462320468a608a61b8ff8062232010238ab90327
03278a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b202020243604259b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b2021002436042595959592d2cb0024354584b
53234b515a58381b2121591b21212121592d00000001000000053333cc87
988d5f0f3cf50819080000000000a2e3354600000000cf75613bfb89fd8c
10000835000100090001000100000000000100000721fe4500571000fb89
fadf100000010000000000000000000000000000000f0639011c06390053
0239008c05c700510239002b0473003f031d005102aa0026038d004f038d
004b020000000400004a04000087040000320639002b000000000000006c
00000278000002d000000462000005600000075e00000a9e00000b8a0000
0d2800000ecc00000ecc000010a200001174000012bc000014b800010000
000f00f2003c008f000600020010002f00560000088b02c4000500020000
005303ea0000000300000000006a00000000000300000001001e006a0000
000300000002000801120000000300000003006c00e00000000300000004
002800f200000003000000050018014c0000000300000006002c01640000
0003000000070076006a0000000300000008003000ae0000000300000009
00860190000000030000000d029a02160001000000000000003504b00001
000000000001000f04e50001000000000002000405390001000000000003
003605200001000000000004001405290001000000000005000c05560001
000000000006001605620001000000000007003b04e50001000000000008
00180507000100000000000900430578000100000000000d014d05bb0003
000104030002000e07280003000104030004002e07080003000104050002
000a07560003000104050004002a07360003000104060002000607800003
000104060004002607600003000104070002000807a60003000104070004
002807860003000104080002000c07ce0003000104080004002c07ae0003
000104090000006a00000003000104090001001e006a0003000104090002
000801120003000104090003006c00e00003000104090004002800f20003
0001040900050018014c0003000104090006002c01640003000104090007
0076006a0003000104090008003000ae0003000104090009008601900003
00010409000d029a021600030001040a0002000e07fa00030001040a0004
002e07da00030001040b00020012082800030001040b0004003208080003
0001040c00020008085a00030001040c00040028083a00030001040e0002
0010088c00030001040e00040030086c00030001041000020012085a0003
0001041000040032083a0003000104130002000608bc0003000104130004
0026089c0003000104140002000e08e20003000104140004002e08c20003
000104150002001409100003000104150004003408f00003000104160002
000e09440003000104160004002e09240003000104190002001409720003
0001041900040034095200030001041b0002000a09a600030001041b0004
002a098600030001041d0002000607a600030001041d0004002607860003
0001041f0002000a09d000030001041f0004002a09b00003000104240002
000c09fa0003000104240004002c09da00030001042a000200080a260003
0001042a000400280a0600030001042d0002000a0a4e00030001042d0004
002a0a2e00030001080a0002000e07fa00030001080a0004002e07da0003
000108160002000e09440003000108160004002e0924000300010c0a0002
000e07fa000300010c0a0004002e07da000300010c0c00020008085a0003
00010c0c00040028083a00a9002000320030003100340020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00540069
006d006500730020004e0065007700200052006f006d0061006e00200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e004d006f006e
006f0074007900700065003a00540069006d006500730020004e00650077
00200052006f006d0061006e00200042006f006c0064003a005600650072
00730069006f006e00200035002e0031003100200028004d006900630072
006f0073006f00660074002900560065007200730069006f006e00200035
002e0032003000540069006d00650073004e006500770052006f006d0061
006e00500053002d0042006f006c0064004d0054004d006f006e006f0074
00790070006500200054007900700065002000440072006100770069006e
00670020004f006600660069006300650020002d0020005300740061006e
006c006500790020004d006f007200690073006f006e002c002000560069
00630074006f00720020004c0061007200640065006e0074002000310039
003300320059006f00750020006d00610079002000750073006500200074
00680069007300200066006f006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200045
0055004c004100200066006f00720020007400680065002000700072006f
006400750063007400200069006e00200077006800690063006800200074
00680069007300200066006f006e007400200069007300200069006e0063
006c007500640065006400200074006f00200064006900730070006c0061
007900200061006e00640020007000720069006e007400200063006f006e
00740065006e0074002e002000200059006f00750020006d006100790020
006f006e006c0079002000280069002900200065006d0062006500640020
007400680069007300200066006f006e007400200069006e00200063006f
006e00740065006e00740020006100730020007000650072006d00690074
007400650064002000620079002000740068006500200065006d00620065
006400640069006e00670020007200650073007400720069006300740069
006f006e007300200069006e0063006c007500640065006400200069006e
0020007400680069007300200066006f006e0074003b00200061006e0064
00200028006900690029002000740065006d0070006f0072006100720069
006c007900200064006f0077006e006c006f006100640020007400680069
007300200066006f006e007400200074006f002000610020007000720069
006e0074006500720020006f00720020006f00740068006500720020006f
00750074007000750074002000640065007600690063006500200074006f
002000680065006c00700020007000720069006e007400200063006f006e
00740065006e0074002ea9203230313420546865204d6f6e6f7479706520
436f72706f726174696f6e2e20416c6c2052696768747320526573657276
65642e54696d6573204e657720526f6d616e20697320612074726164656d
61726b206f6620546865204d6f6e6f7479706520436f72706f726174696f
6e2e4d6f6e6f747970653a54696d6573204e657720526f6d616e20426f6c
643a56657273696f6e20352e313120284d6963726f736f66742956657273
696f6e20352e323054696d65734e6577526f6d616e50532d426f6c644d54
4d6f6e6f7479706520547970652044726177696e67204f6666696365202d
205374616e6c6579204d6f7269736f6e2c20566963746f72204c61726465
6e742031393332596f75206d617920757365207468697320666f6e742061
73207065726d6974746564206279207468652045554c4120666f72207468
652070726f6475637420696e207768696368207468697320666f6e742069
7320696e636c7564656420746f20646973706c617920616e64207072696e
7420636f6e74656e742e2020596f75206d6179206f6e6c79202869292065
6d626564207468697320666f6e7420696e20636f6e74656e742061732070
65726d69747465642062792074686520656d62656464696e672072657374
72696374696f6e7320696e636c7564656420696e207468697320666f6e74
3b20616e6420286969292074656d706f726172696c7920646f776e6c6f61
64207468697320666f6e7420746f2061207072696e746572206f72206f74
686572206f75747075742064657669636520746f2068656c70207072696e
7420636f6e74656e742e00540069006d006500730020004e006500770020
0052006f006d0061006e0020004e00650067007200650074006100540069
006d006500730020004e0065007700200052006f006d0061006e00200074
0075010d006e00e900540069006d006500730020004e0065007700200052
006f006d0061006e002000660065006400540069006d006500730020004e
0065007700200052006f006d0061006e0020004600650074007400540069
006d006500730020004e0065007700200052006f006d0061006e00200388
03bd03c403bf03bd03b100540069006d006500730020004e006500770020
0052006f006d0061006e0020004e00650067007200690074006100540069
006d006500730020004e0065007700200052006f006d0061006e0020004c
0069006800610076006f00690074007500540069006d006500730020004e
0065007700200052006f006d0061006e0020004700720061007300730065
00740074006f00540069006d006500730020004e0065007700200052006f
006d0061006e0020004600e9006c006b00f6007600e9007200540069006d
006500730020004e0065007700200052006f006d0061006e002000560065
007400540069006d006500730020004e0065007700200052006f006d0061
006e002000480061006c007600660065007400540069006d006500730020
004e0065007700200052006f006d0061006e00200050006f006700720075
00620069006f006e006100540069006d006500730020004e006500770020
0052006f006d0061006e0020004e00650067007200690074006f00540069
006d006500730020004e0065007700200052006f006d0061006e0020041f
043e043b0443043604380440043d044b043900540069006d006500730020
004e0065007700200052006f006d0061006e002000540075010d006e00e9
00540069006d006500730020004e0065007700200052006f006d0061006e
0020004b0061006c0131006e00540069006d006500730020004e00650077
00200052006f006d0061006e0020004b007200650070006b006f00540069
006d006500730020004e0065007700200052006f006d0061006e00200111
00e20323006d00540069006d006500730020004e0065007700200052006f
006d0061006e0020004c006f0064006900610000b15420b8040cb30c0e32
20b8040cb2131732b8040bb328201f0f41100412008004120002000f0412
003f0412005f04120003005f0412000100400412b2783340b80412b27233
40b80412b26e3340b80412b26a3340b80412b2543340bc0412004a0033ff
c00412b317183240b80412b30a0c3280b80412b308093240b80411b25a33
404109041100560033ffc0041100530033ffc00411b2503340b80411b24d
3340bc041100470033ffc00411b344453240b80411b2423340bc0411003e
0033ffc00411b23a331f4124041100200411004004110070041100af0411
00f004110006000f0411002f04110090041100ff04110004002f04110040
0411007f0411008f041100a0041100e004110006ffc00411b208330f411b
0410008f04100002000f0410001f0410002f0410000300600409000100b0
04090001000f0408003f0408004f0408009f04070004040ab2006c1fb9ff
c00403b345453240b80403b32b2e3240b80403b2282932b9ffc00403b21a
1c32bd040302990027001fffc00401b2161b32b9ffc00400b2424232b9ff
c00400b2363832b9ffc00400b32a2d32df410a040000ef04000002040004
010028001fffc00401b3282e32f0bf0401000103fe000f0101001fffc003
fcb310143240b803fdb30f133240411003f9005003f9000200b003b100c0
03b10002006f03f5007f03f50002ffc003afb22d3132b9ffc003afb30a0e
3210411003ef002003ef008003ef000300a003ef0001002003ef004003ef
0002ffc003efb313163240b803e7b20f1132b9ffc003dfb2303432b9ffc0
03dfb310183250411403dc000103c903d20023001f03e203d2001e001f03
c703d2001d001f03c603c8000d001fffc003a4b30f103280411003a30001
03a303790029001f03a5037a0032001f03a8037e001b001fffc003d9b20e
1132b9ffc003d9b2282a32410a03a7037c0032001f037303710034001f03
6c036bb2321f20bb03a40001004003ecb3090b3240b803ecb2101532bd03
e9036b0014001f03e4036bb2171f0fbd036e002f036e0002ffc003b8b309
0d3290410c03b800a003b80002001f03d20001009f03d20001004003d2b2
090b32410a03a903800016001f03cf03810015001f03aa0382b2151fc0bb
03f70001004003f6b3090d3240b803a2b2083340b803a2b30d0e32c04109
03a2000100b003f200c003f20002ffc003f4b3263832004126038c003003
8c0002002003e3003003e30002001003ee003003ee005003ee006f03ee00
7f03ee009f03ee0006000003ed003003ed0002002f03de007003db009003
db009f03de0004ffc00379b20f1032b9ffc00379b2242832b9037d037cb2
321f10bb037e0001ffc0037eb3090e3240b8037cb2121332b9ffc0037cb3
0c0e323fbd03d7004f03d70002004003d8b31718326fbb038e0001004003
90b3181b3240b803d4b2090c32bd037b037a0032001fffc0037ab20e1132
bd038003820016001f03810382b2151fb0be03820001000f038300010040
03ffb30c11327f411403540001006f0354008f035400d0035400ef035400
04000f0354002f0354005f0354000300400350b30e0f320fbb035a000100
400349b20e331fbd0348007f03480002ffc00348b2152232b9ffc00347b2
152232b9ffc0040fb21b1e32beffc0040f002d01000032040e0406b22f1f
51bb034b0001034f034eb2641f40b80351b20e0f32b9ffc0034eb3383a32
30bb034e0001ffc0034eb21f2332b9ffc0034eb2131932b9ffc00346b209
1132b9ffc00343b30a11320fbb03440001ffc0032bb2080e32b9ffc0032b
b2161b32b9ffc0032ab31417321f4110033a0001000f0333000100000337
0020033700300337008003330004ffc00332b31012325041640332000100
4003320060033200a0033200b00332000400100332003003320050033200
e003320004000f0336007f033600ff033600030070033600f00336000200
0f0331003f0331008f033100bf033100e003310005000f03310060033100
02008f03300001006003300090033000020050032f00010010032f004003
2f0060032f0080032f00a0032f00c0032f00f0032f000700cf032d00ff03
2d00020030032d0080032d00b0032d00df032d0004006f032c007f032c00
020012032000fd0800001f007f0299403a017f007f017f027f037f047f05
7f107f11084035252c32406a252c32402e252c324028252c323760097009
800903300940095009031009200902b8ffc0b2073a33b8ffc04012063a33
da4dea4dfa4d0312379006900702cf410c011100df011100ef0111000300
cf011000df011000ef0110408703cf3edf3eef3e03cf4ddf4def4d03cfde
dfdeefde03cf2ddf2def2d03404d1b3a32375f016f017f018f01041f012f
013f014f01045f036f037f038f03041f032f033f034f0304600b700b800b
03300b400b500b03100b200b02900ba00bb00bc00bd00b05b006c006d006
e006f0060550066006700680069006a006061f072f073f07400604f04143
02db000100a002db00b002db0002008002db009002db0002001002db0001
00c002db00d002db0002009002db0001006002db007002db0002004002db
005002db0002002302db003002db000202db002300a002da0001008002da
009002da0002004002da0001002302da003002da000202da0023000002d9
0001007002d9009002d9000202d9401c2230244024021024202402002401
f02401d024e02402b024c02402c0413a02d8000100a002d800b002d80002
008002d8009002d80002002302d8003002d8000202d8002300c002d70001
00a002d700b002d70002008002d7009002d7000200a002d700b002d70002
008002d7009002d70002006002d7007002d70002004002d7005002d70002
002302d7003002d7000202d7b223370f4117029b0001005f029b009f029b
00df029b0003002f029b003f029b006f029b0003001f029b0001029b029b
0040029ab3272c3280b8029ab2263340b8029ab2223340b8029ab21e3340
b8029ab21c3340b8029ab3191a325f410f029a009f029a00df029a000300
0f029a001f029a003f029a0003ffc00299b2443340b80299b23d3340b802
99b23a33df413702990001005f029900af02990002004f0299009f029900
02002f0299003f0299000200af02990001000f0299003f0299000200b002
9900e0029900020070029900a002990002004f0299005f02990002001f02
99002f0299003f02990003029a029a02990299000f027a002f027a400b02
00161600000012110812b802bab269121fb802b4b228101fb802b3b22810
1fb802b2b228101f411302030023000d01ee0023000d01ae0023000d019f
0023000d01940023000d01570023000d010f400b230df9230dc5230da723
0d410a024a0024000d01f00024000d01e90024000d016a400e240de8240d
c6240da3240da2240dbb01e30022000d0121401a220de5220ddd220db722
0daa220d93220d5c220d51220d4c220d410a02280020000d021d0020000d
015e0020000d011c4017200dfc200de1200dcb200dc8200da1200d59200d
3a200d410a01f20034000d019c0034000d01970034000d0135b7340d1f34
0d1d340dba0202000f015bb20f0009bb0202015b000d030ab22a3e1fb803
09b22a3e1fb80221b24d251fb8021cb24d411fb8021bb24d521fb8021ab2
4d721fb80213b24d931f4109020f01b10401001f020e01b10801001f020c
b22a811fb8020bb22a811fb80208b22a5e1fb80205b22a391fb801feb22a
231fb801fbb2661d1fb801fab2661e1fb801f6b266341fb801f5b266341f
bc01f300660201001f01f1b2669e1f410901ea00280801001f01e7002602
ab001f01b8b24d3f1fb801b7b24d931f410901b4003e0125001f01b20040
0401001f01acb22a721fb801a8b22a281fb801a7b22a241fb801a6b22a24
1fb801a3b22a1f1fb801a1b2662e1fb8019eb266931fb8019db266e41fb8
019ab2286c1f4109019900280401001f019800260401001f0173b24d1b1f
b80171b24d241fb80170b24d2f1fb8016fb24d351fb8016bb23ecd1fb801
69b23ee41f4109016701b1019a001f0166002a02ab001f0161b2662a1fb8
015fb2669e1f4109015d0028019a001f015c00350401001f0147b24d391f
b80146b23ecd1f410d0145003e0125001f014401430101001f014201b102
ab001f0140b22a301fb8013eb22a261fb8013db2661d1fb8013cb2662b1f
b80138b228811fb80137b2289e1fbc01360028019a001f0129b24d721fbc
0124002a0201001f0123b22aab1fb8011fb266291fb8011eb266451fb801
1bb228811f41090113003e0125001f0112003e0401001f0111b22a291fb8
0110b22a201fbe010b0066019a001f010a0026019ab61ffd4d721ffb3eb8
0156b21ffa40b80801b21ff728b80801b61fec4d621feb4db80401b21fea
40b802abb61fdf4d721fde3eb802ab400b1fdc2ae41fdb66221fca2ab804
01401b1fc92a2e1fc326791fb828bb1fb34d1e1fb166291fb066621faf66
b80401b21fae26b802abb21fa828b80201400b1fa0664c1f982a2b1f9726
b8019ab61f9266291f8740b802ab401b1f852a791f8226811f754d931f74
4d891f732a1d1f70285e1f6a28b8040140171f692a521f682a201f676629
1f6566671f612a931f6035b80801b61f5e2acd1f5335b80801b21f4b66b8
0156b21f493eb80801b61f4866521f4626b80201b21f3f66b80156400b1f
3b66341f322a931f2e35bb0401001f002d0143b3cd1f5537bc022f000701
8000070172402e07bd077e076207540742072f072707250721071e071408
120810080e080c080a0808080608040802080008000214b8ffe0402b0000
010014061000000100060400000100041000000100100200000100020000
0001000002010802004a00b013034b024b5342b0372b4bb807ff52b0382b
4bb008505b58b101018e59014bb0c063004b6220b0f65323b8010a515ab0
05234201b0124b004b544218b0382bb00288b801005458b801ffb101018e
851bb0124358b90001012c858d1bb900010146858d59590016763f183f12
3e113946443e113946443e113946443e113946443e11394660443e113946
604445442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b18
2b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb02953205c58b9026c
026a4544b9026b026a45445958b90168026c455258b9026c01684459594b
b03b53205c58b9003e026b4544b9004d026b45445958b9025c003e455258
b9003e025c4459594bb03b53205c58b901b1003e4544b13e3e45445958b9
024f01b1455258b901b1024f4459594bb05a53205c58b90143003e4544b1
3e3e45445958b9038b0143455258b90143038b4459594bb09e53205c58b9
002a026c4544b90040026c45445958b9056c002a455258b9002a056c4459
594bb01853205c58b126264544b1662645445958b13226455258b1263244
59594bb05153205c58b126264544b1282645445958b1ad26455258b126ad
4459594bb8010153205c58b126264544b1352645445958b9022800264552
58b9002602284459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b01b33d766e58456523456023456560234560b08b766818b0
80622020b16e764565234520b003266062636820b003266165b076236544
b06e234420b13d584565234520b003266062636820b003266165b0582365
44b03d2344b10058455458b158406544b23d403d4523614459b34e813871
456523456023456560234560b089766818b080622020b138814565234520
b003266062636820b003266165b081236544b038234420b14e7145652345
20b003266062636820b003266165b071236544b04e2344b10071455458b1
71406544b24e404e45236144594b5242014b5058b108004259435c58b108
004259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba
040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba040004
00000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b
2b59b0102342b0112342007418456944456944737373737474757575752b
2b2b73732b2b2b2b2b2b18456944737373742b4544737373737374747445
447374747474747475757545447375454473737474454473737373737474
74740075757575757575757575752b2b74747474747400732b4358b14d4d
451869441bb8ffc0b34d1b3a322b5973002b2b7575752b2b2b2b2b007373
2b435c58b8ffc0b2071633b8ffc0400b061633d54de54df54d03c0410c01
1100d0011100e00111000300c0011000d0011000e00110401e03c03ed03e
e03e03c04dd04de04d03c0ded0dee0de03c02dd02de02d03372b74747474
747473002b2b590173737473747374737473747374752b737573002b2b2b
01732b2b2b2b752b2b2b732b2b2b002b2b742b732b7373742b73732b2b2b
2b2b2b732b732b2b2b742b2b2b73737373732b73732b2b2b73002b2b2b2b
7374732b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b73
74752b2b7373732b2b2b752b2b732b2b2b2b2b2b2b2b2b2b73747573742b
7374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b00
000000>
[5305 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 108 1 <00010053ffe00624056c0033016c40160a10052403250e29781f881f8424
84258d29882a0a23b8ff80b3090a340cb8ff80b3090a3406b8ff80b3090a
342ab8ff804043090a346807680b770b7724b903be04b806b724b726b72a
0a44234629402a8729862a059926972aa706a307a80bc525cb29074a0e18
401b103f7018011ec81d185c2217b8ffc040141b103f7f170111c81d1722
23331d005a021d0101b801144022005a30a92b1e1f01101f0d1718182205
352b030d3522090011101102113e011e1a35b8ffc040090c103435122819
3435bc01530021006e01e000182b2b4ef44d4358b60f091f0902094de95d
1bb1094ded594e102bf63c4ded5d003fed3fed12392f3c12393901123939
0010ecf4ed0110edf4ed2b015d2b2b015d2b3130004b5379b14508437940
32202a060f0b26262725272427030607250c230925000e21104201201f0f
10062a0925000a270d25000f200d420008290525012b2b2b012b103c103c
2b2b2b2a2b8181005d01715d2b2b2b2b0071011123262423220602151412
163332363711342626232335211506060706151106042322262627263510
0021321716163332363705852543fef49f98ca545ccd8d31673616453123
02934b3b100982fee797c1ffc3374601ae014665512cc5121c3014056bfe
22c4ccabfecea1c3feda8a1514011a502f262525051f24134afee63a3b69
ab6b8aab013201a610084b293900>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 632 2 <0001008c02d201b3056b000c0026b3000a0401b8017ab407010a8704bc01
3a000d007a011800182b10f6ed003fed0111123931300123032635343633
32161514070139306914553e474d1702d2017e473c41575c362d5b00>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
ONKBAA+Times#20New#20Roman#20Bold /CharStrings get begin
/g1 1 def
/g2 2 def
end
ONKBAA+Times#20New#20Roman#20Bold /Encoding get
dup 32 /g1 put
dup 33 /g2 put
pop
end
%ADOEndSubsetFont
/FDAXXJ+Times#20New#20Roman#20Bold /ONKBAA+Times#20New#20Roman#20Bold findfont ct_VMDictPut
/FDAXXJ+Times#20New#20Roman#20Bold*1 
[32{/.notdef}rp /g1 /g2 222{/.notdef}rp]
FDAXXJ+Times#20New#20Roman#20Bold nf
FDAXXJ+Times#20New#20Roman#20Bold*1 [14.04 0 0 -14.04 0 0 ]msf
44.9982 13.0299 mo
( )sh
55.9213 13.0299 mo
(!)sh
354.36 31.513 mo
354.36 23.713 348 17.353 340.2 17.353 cv
332.4 17.353 326.04 23.713 326.04 31.513 cv
326.04 39.313 332.4 45.673 340.2 45.673 cv
348 45.673 354.36 39.313 354.36 31.513 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 31.513 mo
354.36 23.713 348 17.353 340.2 17.353 cv
332.4 17.353 326.04 23.713 326.04 31.513 cv
326.04 39.313 332.4 45.673 340.2 45.673 cv
348 45.673 354.36 39.313 354.36 31.513 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
332.644 34.5136 mo
(   )
[4.98001 4.97998 0 ]xsh
354.36 73.993 mo
354.36 66.193 348 59.833 340.2 59.833 cv
332.4 59.833 326.04 66.193 326.04 73.993 cv
326.04 81.913 332.4 88.153 340.2 88.153 cv
348 88.153 354.36 81.913 354.36 73.993 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 73.993 mo
354.36 66.193 348 59.833 340.2 59.833 cv
332.4 59.833 326.04 66.193 326.04 73.993 cv
326.04 81.913 332.4 88.153 340.2 88.153 cv
348 88.153 354.36 81.913 354.36 73.993 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
332.644 76.993 mo
(!!!)
[4.98001 4.97998 0 ]xsh
354.36 116.593 mo
354.36 108.673 348 102.433 340.2 102.433 cv
332.4 102.433 326.04 108.673 326.04 116.593 cv
326.04 124.393 332.4 130.753 340.2 130.753 cv
348 130.753 354.36 124.393 354.36 116.593 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 116.593 mo
354.36 108.673 348 102.433 340.2 102.433 cv
332.4 102.433 326.04 108.673 326.04 116.593 cv
326.04 124.393 332.4 130.753 340.2 130.753 cv
348 130.753 354.36 124.393 354.36 116.593 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
332.644 119.472 mo
(""")
[4.98001 4.97998 0 ]xsh
354.36 159.073 mo
354.36 151.273 348 144.913 340.2 144.913 cv
332.4 144.913 326.04 151.273 326.04 159.073 cv
326.04 166.873 332.4 173.233 340.2 173.233 cv
348 173.233 354.36 166.873 354.36 159.073 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 159.073 mo
354.36 151.273 348 144.913 340.2 144.913 cv
332.4 144.913 326.04 151.273 326.04 159.073 cv
326.04 166.873 332.4 173.233 340.2 173.233 cv
348 173.233 354.36 166.873 354.36 159.073 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
332.644 161.952 mo
(###)
[4.98001 4.97998 0 ]xsh
354.36 201.553 mo
354.36 193.753 348 187.393 340.2 187.393 cv
332.4 187.393 326.04 193.753 326.04 201.553 cv
326.04 209.353 332.4 215.713 340.2 215.713 cv
348 215.713 354.36 209.353 354.36 201.553 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 201.553 mo
354.36 193.753 348 187.393 340.2 187.393 cv
332.4 187.393 326.04 193.753 326.04 201.553 cv
326.04 209.353 332.4 215.713 340.2 215.713 cv
348 215.713 354.36 209.353 354.36 201.553 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
332.644 204.551 mo
($$$)
[4.98001 4.97998 0 ]xsh
411 31.513 mo
411 23.713 404.64 17.353 396.84 17.353 cv
389.04 17.353 382.68 23.713 382.68 31.513 cv
382.68 39.313 389.04 45.673 396.84 45.673 cv
404.64 45.673 411 39.313 411 31.513 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
411 31.513 mo
411 23.713 404.64 17.353 396.84 17.353 cv
389.04 17.353 382.68 23.713 382.68 31.513 cv
382.68 39.313 389.04 45.673 396.84 45.673 cv
404.64 45.673 411 39.313 411 31.513 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
389.287 34.5136 mo
(   )
[5.04004 4.97998 0 ]xsh
411 73.993 mo
411 66.193 404.64 59.833 396.84 59.833 cv
389.04 59.833 382.68 66.193 382.68 73.993 cv
382.68 81.913 389.04 88.153 396.84 88.153 cv
404.64 88.153 411 81.913 411 73.993 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
411 73.993 mo
411 66.193 404.64 59.833 396.84 59.833 cv
389.04 59.833 382.68 66.193 382.68 73.993 cv
382.68 81.913 389.04 88.153 396.84 88.153 cv
404.64 88.153 411 81.913 411 73.993 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
389.287 76.993 mo
("!!)
[5.04004 4.97998 0 ]xsh
411 116.593 mo
411 108.673 404.64 102.433 396.84 102.433 cv
389.04 102.433 382.68 108.673 382.68 116.593 cv
382.68 124.393 389.04 130.753 396.84 130.753 cv
404.64 130.753 411 124.393 411 116.593 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
411 116.593 mo
411 108.673 404.64 102.433 396.84 102.433 cv
389.04 102.433 382.68 108.673 382.68 116.593 cv
382.68 124.393 389.04 130.753 396.84 130.753 cv
404.64 130.753 411 124.393 411 116.593 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
389.287 119.472 mo
($"")
[5.04004 4.97998 0 ]xsh
411 159.073 mo
411 151.273 404.64 144.913 396.84 144.913 cv
389.04 144.913 382.68 151.273 382.68 159.073 cv
382.68 166.873 389.04 173.233 396.84 173.233 cv
404.64 173.233 411 166.873 411 159.073 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
411 159.073 mo
411 151.273 404.64 144.913 396.84 144.913 cv
389.04 144.913 382.68 151.273 382.68 159.073 cv
382.68 166.873 389.04 173.233 396.84 173.233 cv
404.64 173.233 411 166.873 411 159.073 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
389.287 161.952 mo
(!##)
[5.04004 4.97998 0 ]xsh
411 201.553 mo
411 193.753 404.64 187.393 396.84 187.393 cv
389.04 187.393 382.68 193.753 382.68 201.553 cv
382.68 209.353 389.04 215.713 396.84 215.713 cv
404.64 215.713 411 209.353 411 201.553 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
411 201.553 mo
411 193.753 404.64 187.393 396.84 187.393 cv
389.04 187.393 382.68 193.753 382.68 201.553 cv
382.68 209.353 389.04 215.713 396.84 215.713 cv
404.64 215.713 411 209.353 411 201.553 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
389.287 204.551 mo
(#$$)
[5.04004 4.97998 0 ]xsh
340.92 45.673 mo
340.2 59.833 li
@
340.56 88.153 mo
340.56 102.433 li
@
340.56 130.753 mo
340.56 144.913 li
@
340.44 173.233 mo
340.56 187.393 li
@
326.04 30.793 mo
318.24 30.793 311.88 69.193 311.88 116.593 cv
311.88 163.513 318.12 201.553 326.04 201.553 cv
326.04 201.553 li
@
354.36 73.393 mo
383.28 163.153 li
@
354.24 118.033 mo
382.68 74.713 li
@
354.36 159.073 mo
382.68 202.753 li
@
354.36 201.553 mo
382.68 115.753 li
@
354.24 31.513 mo
382.8 31.513 li
@
396.48 187.033 mo
396.84 172.753 li
@
397.08 144.433 mo
396.84 130.273 li
@
398.04 101.953 mo
397.8 87.793 li
@
397.32 59.473 mo
396.84 45.313 li
@
411 32.833 mo
418.8 32.833 425.16 70.273 425.16 116.593 cv
425.16 162.553 418.8 199.873 410.88 199.873 cv
410.88 199.873 li
@
%ADOBeginSubsetFont: ONKBAA+Times#20New#20Roman#20Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ONKBAA+Times#20New#20Roman#20Bold gcheck setglobal} if
1 720 3 <00010051ffe10557056b0024011db90016ff80b3090a341cb8ff80b3090a
3406b8ff80b3090a340db8ff804059090a340c1a091b36134d1a86168b1a
8f1b891c086b116b12791179128911a706a80da517c717cb1b0a06160026
4316411c80168517861b841cb704bb1e0a2f26681f7706760d761b8613ba
0f07370e1112241d005a021d0101b80114401d005a21a911120e056a1d03
0e6a1509015f2f1101111a7026012612256eb9013200182b4e1043584009
0f0a1f0a020a4d1919f44de95d1bb30a4d1919f44ded594e105df65d4de4
003fed3fed113939ecf4ed0110edf4ed0010c931304b5379b13208437940
24161c060d0c2617250809070902061b260d160a2500061c0a25000b180e
2500091a0525012b2b012b2b2b2a2b2b8181015d71005d71012b2b2b2b01
112326262322060706151412163332363715060623222402353412243332
1716333236370557272cf0987fd4313f5cc49c80d57672f7a5d9feafb7cb
0159c28f9f5c19202f07056bfe2ab8c4927697b9b6fed599708975776bae
0146b8c2015cc03e242f3300>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 1122 4 <0001002b00000224054c001000c0401c128011173f601201b012010f0500
0600101f0510061010060b241f06b801eeb42201241f05b801eeb4230c24
1f10b801ee40162300100006050a000f011f0102012a0c0b4011173f0bb8
ffc0b23a350bb8ffc0b32d34340bb8ffc0b32023340bb8ffc04023131734
b00b018f0b01000b100b020b7b1f12a012b012032f123f128f12c012e012
0512b8ffc0b331343412b8ffc0b62d2e34114ec0182b102b2b5d71f65d5d
712b2b2b2b2b3cfd5d3c003f3c3f3c2b2b2b015d3130015d712b01111416
1715213536373635113426273501b32e43fe073e1e142e42054cfb766337
0424240222176303c86237042500>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 1376 5 <0001003fffe4043103a700220192b90024ffc040a64b355024d02402090c
1b0c2a0c490c04390c9a1ca91cb81c04ef07ee080222400b0d3421400b0d
340f0500131f05101304df0701ff070101241f0523230f241f1323231e24
1f2223230506050a1965090b0a0b0022221414130600062a0f011f010201
2a1e064045473406403d35064043350640393a3406403031340640272834
064022243406402b2d3406401e1f340640101134cf06010f06012006cf06
02000610060206b801bb400a244021413f24403e3524b8ffc0b3393a3424
b8ffc0b330313424b8ffc0b32c2e3424b8ffc0b22a3524b8ffc0b3272834
24b8ffc0b31e1f3424b8ffc04019131534c024011f24b024022f24702402
24141f1501152a0f0eb8ffc0b321413f0eb8ffc0b3373a340eb8ffc0b32f
31340eb8ffc0b22a350eb8ffc040131d2434f00e012f0ec00ed00e030e19
234e81182b4e10f45d712b2b2b2b2b3c4dfd5d3c105d71722b2b2b2b2b2b
2b2b2bf45d5d71722b2b2b2b2b2b2b2b2b2b3cfd5ded3c003f3c103c103c
3f3c3ced3f103c2b2b2b5d71015d3130012b2b00715d015d722b01111416
171521350606232226263511342627352111141616333237363711342627
3503cc283dfe834386534f7b2a273e017d13291b241d2838273e03a7fd24
6b3507247d50496182a201736a340825fd81643a1e131a4f01f46a340825
>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 1886 6 <00010051ffe402d403c3003202aa405c0b3015103f04100d2914101d2904
06141614c625c626d910ea10f910072910252a3810362a870b95239524a9
0ba323b80bb4230b050c050d0829150c470b4b0c06400b400c0212321f00
9b021f010140140c3f01400b123f9f010101b801454013009b122f400b12
342ff32b181f199b1b1f1a1ab8ffc0b60b123f901a011ab8016b401e199b
16f3121205262b07121e26120b120f011f01020140121534015b1221b8ff
e0b40914065521b8ffe0400a09140255002110210221b8ffc0400b0b0f34
002110210221220eb8ffc0403a32193f1f0e010e1a0f34012f344f345f34
6f347f34af340634120820091406550820091402550f081f080208400b0f
340f081f080208221a2928b8ffc0b632193f0f280128b8ffc040090c0e34
2819333871182b4e10f42b712b4de4ed5d2b712b2b435c58b508201b103f
08b8ffc0401732193f084014213f083c15233f083c16253f08400b123f2b
2b2b2b2b2b594e105d71f6722b4ded5d2b712b2b435c58b52120140c3f21
b8ffe040091b103f215e32193f21b8ffc0b314213f21b8ffc0b315233f21
b8ffc0b316253f21b8ffc0b20b123f2b2b2b2b2b2b2b59e42b71435c5840
19014028183f01401c113f0140101b3f01400e173f01400d163f2b2b2b2b
2b59003fed435c58b51e1e1e0f3f1eb8ffe2b30c143f1eb8ffe2b30d163f
1eb8ffe2b20e173f2b2b2b2b593fed435c58b90005ffb540121e0f3f051e
0c143f051e0d163f05140e173f2b2b2b2b5910ecf4ed5d2b0110edf4ed00
10ec2b435c58400f2f400a113f2f40090f3f2f40140c3f2b2b2b59f4ed5d
2b2b0110edf4ed435c58b5252d1c113f0bb8ffd0b31c113f0bb8ffe04009
190f3f252d170e3f0bb8ffd34009170e3f252d160d3f25b8fff1b3171f3f
25b8ffe4b718203f0c1c19213f002b2b2b2b2b2b2b2b2b59007131300071
5d015d5d002b011323262623220615141716041615140606232227262322
07230333161633323635342627262726353436333217163332363702940f
223d8341293a142001265d4e8e5643701e0b21162110222d9d46303d3c68
992d42958d4c471b1112161803c1fec18e6837241b1929c78b564e96502a
0b32015084843b2a3046476a3852636caf250f0f2300>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 2718 7 <00010026fff3029604fd00190098400e8f0b8f0c028f0b8f0c020b0c0019
b801b6401901041414031583020106200b300b400b030b7209650e0b0203
b8010e401d050bb60c1a1b010404000f051f0502052a1316157914141340
0c143f13b8ffc040101d22342f13c013d0130313191a4e55182b4e10f45d
2b2b3c4d10f43c10fd5d3c3c103c4e10f64ded10f43c003ffde45d3f3cfd
3c3c103c10f43c0110c93130017100710111331523111416163332371706
23222627263511233536363701b8dede0f2610413a1e51b6597b110a7a7e
b14204fdfeaa63fdbf512f1d6316c0633d229601f92359c47900>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 2954 8 <0002004fffe4035d03c3001500200135405806124b145d146f1468156518
791407250aa702c602c911d102d103d80dd815f303f80d0a7f1501224013
1534560366036f2277037f228303860eea0de815092a08ff16010809092b
00081008200803085d05201600014616b80128b41b26130705b8011eb30c
0b0916b8ffc0400b32193f1640192234166900b8ffc0b632193f0f000100
b8ffc0b30b0e3400b8ffc040181135001a2f223f225f22ef22042220290f
011f0102013210b8ffc0b332193f10b8ffc0b31e123f10b8ffc0b3263034
10b8ffc0400c0c0e34d01001101921388e182b4e10f45d2b2b2b2b4dfd5d
e44e105df62b2b712b4ded2b2b3c003fed3fedf4fd3c103c10f45de40110
c97131304379401e111e1d251817191702061c121f1e001a14161e011e11
1b1e0117151b1e01002b2b012b2b2a2b81015d2b00715d01710121161716
33323637170606232227263534123332160734262726232207061515035d
fdff095a45613c6238224cb879d06b56fdaa8ed1ee2325152334213b01f5
ba6c534357169b81a081bfea0115e9a2a1781f1233599b23>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 3368 9 <0001004b0000036e03c300290127400a0b260b390b140c103f0bb8ffc0b3
2224340bb8ffe7b31b1f342bb8ffc0b33134342bb8ff80b21f352bb8ffc0
b31d1e342bb8ffc0b30f10342bb8ffc04027141634102b01960b902b020b
190d11340f1d001e00291f1d101e10290601151617170022a21f1eb801ee
b42217c61f1db801eeb42323241f29b801ee401d230a320f401e3c3f0f40
1c373f0f67050304070029061e1d0a0f5d000aba015f0004015fb79007d0
07e0070307b801ba400b00290f171f1702172a2322b8ffc0b24b3522b8ff
c0b330343422b8ffc0b31b203422b8ffc04014121634c022017022010022
10220222da2a4e55182b10f65d5d712b2b2b2b3cfd5df4f45deded10e400
3f3c3f3c3f3c3ced2b2bed2b2b2b070e103c3c3c015d3130002b015d712b
2b2b2b2b2b2b002b2b011536363332161514062322262726232207060706
15151714171616171521353636351134272626273501c95d8c413843412e
354e070a0d1d1a29152001070c2f38fe073d2b080a263003a7d4915f453f
434a44040616223f6175d73839101b1903242405397a020550161c1a0525
>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 

1 0 10 <> ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 3788 11 <0002004affe403b505680016002b014a4019091b061f062509291707181b
1520152518290907080177081db8010ab2120527b8010ab3060d1217b803
0a4025004024263400402b2e34004033363400403b3d3440005000a00003
001a2d120f221f220222b8030a400e8f0d010d401315340d192cf5f1182b
4e10f62b724ded5d43584017224024273422402b2e34224033363422403b
3d346f2201712b2b2b2b594e10f6712b2b2b2b4ded4358b90017ffc0b324
273417b8ffc0b32b2e3417b8ffc0b333363417b8ffc0b53b3d3460170171
2b2b2b2b59003fed3fed313043794062012a20211f2102060f0e100e0206
2423252302060b0c0a0c090c080c040615161416020619181a181b180306
02010301040103062a2b292b02061e1122620026072262001c1317620128
05176201210e1d6201230c27620018161d62012b012762002b2b2b2b012b
2b2b2b2a2a2a2a2a2a2a2a81007101710114070e02232226272627263534
373636333216171605102726272623220706061110171616333237363703
b53922739256629e3d2c212b3e33d07476cd3043fecc040a2619382b1925
1a140f382e32192a0602a6cbb06c8a51645d447199a3ddb999a3a188bbdc
01643b8b31201823b1fdeffee062473020387500>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
1 4258 12 <0001008700000363056800170083bc000e01ad0135000801a5b6225f076f
070201410d01ad0135000701f90023001601a5000f01f700150135001602
02400e0f08000508070c000f011f010201b8030940100e0e500f6f0faf0f
03100f010f19180ebe0200000802c60018021701df00182b10f6e44e10f4
5d5d3c4d10fd5d3c003f3c3f1239f5edfc01f52b015d2b31300111141616
33331521353332363635113426262322072725029b16464d1ffd3624574a
1a12312033491201f30568fbab7d452c252528468002bf5e2f212024e400
>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
ONKBAA+Times#20New#20Roman#20Bold /CharStrings get begin
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
/g8 8 def
/g9 9 def
/g10 10 def
/g11 11 def
/g12 12 def
end
ONKBAA+Times#20New#20Roman#20Bold /Encoding get
dup 34 /g3 put
dup 35 /g4 put
dup 36 /g5 put
dup 37 /g6 put
dup 38 /g7 put
dup 39 /g8 put
dup 40 /g9 put
dup 41 /g10 put
dup 42 /g11 put
dup 43 /g12 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXJ+Times#20New#20Roman#20Bold*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 212{/.notdef}rp]
FDAXXJ+Times#20New#20Roman#20Bold nf
FDAXXJ+Times#20New#20Roman#20Bold*1 [14.04 0 0 -14.04 0 0 ]msf
298.561 13.0299 mo
("#$%&'\(\))
[10.1369 3.78339 7.80621 5.46167 4.67523 6.23376 6.23376 0 ]xsh
346.325 13.0299 mo
(*)sh
369.364 13.0299 mo
("#$%&'\(\))
[10.2003 3.84015 7.80624 5.39417 4.67523 6.23376 6.23376 0 ]xsh
417.255 13.0299 mo
(+)sh
467.76 31.513 mo
467.76 23.713 461.4 17.353 453.6 17.353 cv
445.68 17.353 439.32 23.713 439.32 31.513 cv
439.32 39.313 445.68 45.673 453.6 45.673 cv
461.4 45.673 467.76 39.313 467.76 31.513 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
467.76 31.513 mo
467.76 23.713 461.4 17.353 453.6 17.353 cv
445.68 17.353 439.32 23.713 439.32 31.513 cv
439.32 39.313 445.68 45.673 453.6 45.673 cv
461.4 45.673 467.76 39.313 467.76 31.513 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
446.049 34.5136 mo
(   )
[4.98001 4.97998 0 ]xsh
467.76 73.993 mo
467.76 66.193 461.4 59.833 453.6 59.833 cv
445.68 59.833 439.32 66.193 439.32 73.993 cv
439.32 81.913 445.68 88.153 453.6 88.153 cv
461.4 88.153 467.76 81.913 467.76 73.993 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
467.76 73.993 mo
467.76 66.193 461.4 59.833 453.6 59.833 cv
445.68 59.833 439.32 66.193 439.32 73.993 cv
439.32 81.913 445.68 88.153 453.6 88.153 cv
461.4 88.153 467.76 81.913 467.76 73.993 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
446.049 76.993 mo
(""!)
[4.98001 4.97998 0 ]xsh
467.76 116.593 mo
467.76 108.673 461.4 102.433 453.6 102.433 cv
445.68 102.433 439.32 108.673 439.32 116.593 cv
439.32 124.393 445.68 130.753 453.6 130.753 cv
461.4 130.753 467.76 124.393 467.76 116.593 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
467.76 116.593 mo
467.76 108.673 461.4 102.433 453.6 102.433 cv
445.68 102.433 439.32 108.673 439.32 116.593 cv
439.32 124.393 445.68 130.753 453.6 130.753 cv
461.4 130.753 467.76 124.393 467.76 116.593 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
446.049 119.472 mo
($$")
[4.98001 4.97998 0 ]xsh
467.76 159.073 mo
467.76 151.273 461.4 144.913 453.6 144.913 cv
445.68 144.913 439.32 151.273 439.32 159.073 cv
439.32 166.873 445.68 173.233 453.6 173.233 cv
461.4 173.233 467.76 166.873 467.76 159.073 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
467.76 159.073 mo
467.76 151.273 461.4 144.913 453.6 144.913 cv
445.68 144.913 439.32 151.273 439.32 159.073 cv
439.32 166.873 445.68 173.233 453.6 173.233 cv
461.4 173.233 467.76 166.873 467.76 159.073 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
446.049 161.952 mo
(!!#)
[4.98001 4.97998 0 ]xsh
467.76 201.553 mo
467.76 193.753 461.4 187.393 453.6 187.393 cv
445.68 187.393 439.32 193.753 439.32 201.553 cv
439.32 209.353 445.68 215.713 453.6 215.713 cv
461.4 215.713 467.76 209.353 467.76 201.553 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
467.76 201.553 mo
467.76 193.753 461.4 187.393 453.6 187.393 cv
445.68 187.393 439.32 193.753 439.32 201.553 cv
439.32 209.353 445.68 215.713 453.6 215.713 cv
461.4 215.713 467.76 209.353 467.76 201.553 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [9.96 0 0 -9.96 0 0 ]msf
446.049 204.551 mo
(##$)
[4.98001 4.97998 0 ]xsh
453.12 187.033 mo
453.6 172.753 li
@
453.84 144.433 mo
453.6 130.273 li
@
454.68 101.953 mo
454.44 87.793 li
@
453.96 59.473 mo
453.6 45.313 li
@
467.64 32.833 mo
475.56 32.833 481.92 70.273 481.92 116.593 cv
481.92 162.553 475.44 199.873 467.64 199.873 cv
467.64 199.873 li
@
%ADOBeginSubsetFont: ONKBAA+Times#20New#20Roman#20Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ONKBAA+Times#20New#20Roman#20Bold gcheck setglobal} if
1 4468 13 <000100320000039c0568001c00e840248802ae02ac0303270c9503020a0b
0a0b0100051b12a016b41602161c020217010a0b081cb80160b6122f17b0
170217b80122b2011208b8ffc0b30b0d3408b80324b40e05010c03b801f4
401b000510050205dc12d30f1c01bf1c011c1a1e0f0101bf010101191dba
0158019000182b4e10e45d7110f65d714df4fd5de4003f3fed2b435c5840
130840160d3f0840170e3f0840190f3f08400d392b2b2b2b5910fd5d435c
58b90017ffc0b3160d3f17b8ffc0b3170e3f17b8ffc0b31b103f17b8ffc0
b21c113f2b2b2b2b59e4113939111239011112395d1139123911393910c9
3130015d005d212135001235342623220727363633321616151407060121
32363637330350fce2016f9d825e9a552536dc9067aa604a65feac01256c
412a22241601b5012e90698b9a0dc0b860a7498589b9feb5122b4500>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
ONKBAA+Times#20New#20Roman#20Bold /CharStrings get begin
/g13 13 def
end
ONKBAA+Times#20New#20Roman#20Bold /Encoding get
dup 44 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXJ+Times#20New#20Roman#20Bold*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 211{/.notdef}rp]
FDAXXJ+Times#20New#20Roman#20Bold nf
FDAXXJ+Times#20New#20Roman#20Bold*1 [14.04 0 0 -14.04 0 0 ]msf
437.402 13.0299 mo
("#$%&'\(\))
[10.1369 3.90314 7.80624 5.39438 4.67523 6.23373 6.13138 0 ]xsh
485.293 13.0299 mo
(,)sh
382.68 31.513 mo
354.36 31.513 li
@
411.12 74.833 mo
440.88 165.433 li
@
411 119.353 mo
439.56 75.913 li
@
411.12 160.393 mo
439.44 202.993 li
@
411.12 202.993 mo
439.32 115.753 li
@
439.32 31.513 mo
411 31.513 li
@
36.48 73.273 mo
24.24 73.273 14.28 91.993 14.28 115.153 cv
14.28 139.633 24.24 159.433 36.6 159.433 cv
36.6 159.433 li
@
36.6 116.473 mo
24.24 116.473 14.28 134.953 14.28 157.633 cv
14.28 180.793 24.24 199.513 36.48 199.513 cv
36.48 199.513 li
@
36.6 31.753 mo
24.24 31.753 14.28 49.993 14.28 72.673 cv
14.28 96.913 23.4 116.713 34.68 116.713 cv
34.68 116.713 li
@
35.52 31.753 mo
29.04 32.233 23.64 53.953 23.4 81.313 cv
23.4 125.353 29.52 160.993 36.96 160.993 cv
36.96 160.993 li
@
36.84 73.153 mo
29.64 73.153 23.88 107.953 23.88 150.913 cv
23.88 178.153 29.04 200.113 35.52 200.113 cv
35.52 200.113 li
@
64.8 30.073 mo
93.6 30.073 li
@
99.24 30.073 mo
91.8 33.793 li
93 31.513 93 28.753 91.8 26.353 cv
99.24 30.073 li
cp
ef
64.8 72.673 mo
95.76 111.433 li
@
99.24 115.753 mo
91.68 112.273 li
94.32 111.793 96.48 109.993 97.56 107.593 cv
99.24 115.753 li
cp
ef
64.8 115.753 mo
97.2 196.153 li
@
99.36 201.433 mo
93.12 195.913 li
95.64 196.033 98.28 195.073 99.96 193.153 cv
99.36 201.433 li
cp
ef
64.8 159.073 mo
97.2 77.833 li
@
99.24 72.673 mo
99.96 80.953 li
98.16 78.913 95.64 77.953 93 78.193 cv
99.24 72.673 li
cp
ef
64.8 201.433 mo
95.88 161.353 li
@
99.24 156.913 mo
97.68 165.073 li
96.48 162.673 94.32 160.993 91.8 160.513 cv
99.24 156.913 li
cp
ef
249.48 30.073 mo
249.48 22.273 255.84 15.913 263.64 15.913 cv
271.44 15.913 277.8 22.273 277.8 30.073 cv
277.8 37.873 271.44 44.233 263.64 44.233 cv
255.84 44.233 249.48 37.873 249.48 30.073 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
249.48 30.073 mo
249.48 22.273 255.84 15.913 263.64 15.913 cv
271.44 15.913 277.8 22.273 277.8 30.073 cv
277.8 37.873 271.44 44.233 263.64 44.233 cv
255.84 44.233 249.48 37.873 249.48 30.073 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
260.049 34.2724 mo
( )sh
249.48 72.673 mo
249.48 64.753 255.84 58.393 263.64 58.393 cv
271.44 58.393 277.8 64.753 277.8 72.673 cv
277.8 80.473 271.44 86.833 263.64 86.833 cv
255.84 86.833 249.48 80.473 249.48 72.673 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
249.48 72.673 mo
249.48 64.753 255.84 58.393 263.64 58.393 cv
271.44 58.393 277.8 64.753 277.8 72.673 cv
277.8 80.473 271.44 86.833 263.64 86.833 cv
255.84 86.833 249.48 80.473 249.48 72.673 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
260.049 76.7574 mo
(")sh
249.48 115.153 mo
249.48 107.353 255.84 100.993 263.64 100.993 cv
271.44 100.993 277.8 107.353 277.8 115.153 cv
277.8 122.953 271.44 129.313 263.64 129.313 cv
255.84 129.313 249.48 122.953 249.48 115.153 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
249.48 115.153 mo
249.48 107.353 255.84 100.993 263.64 100.993 cv
271.44 100.993 277.8 107.353 277.8 115.153 cv
277.8 122.953 271.44 129.313 263.64 129.313 cv
255.84 129.313 249.48 122.953 249.48 115.153 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
260.049 119.228 mo
($)sh
249.48 157.633 mo
249.48 149.833 255.84 143.473 263.64 143.473 cv
271.44 143.473 277.8 149.833 277.8 157.633 cv
277.8 165.433 271.44 171.793 263.64 171.793 cv
255.84 171.793 249.48 165.433 249.48 157.633 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
249.48 157.633 mo
249.48 149.833 255.84 143.473 263.64 143.473 cv
271.44 143.473 277.8 149.833 277.8 157.633 cv
277.8 165.433 271.44 171.793 263.64 171.793 cv
255.84 171.793 249.48 165.433 249.48 157.633 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
260.049 161.84 mo
(!)sh
249.48 200.113 mo
249.48 192.313 255.84 185.953 263.64 185.953 cv
271.44 185.953 277.8 192.313 277.8 200.113 cv
277.8 208.033 271.44 214.393 263.64 214.393 cv
255.84 214.393 249.48 208.033 249.48 200.113 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
249.48 200.113 mo
249.48 192.313 255.84 185.953 263.64 185.953 cv
271.44 185.953 277.8 192.313 277.8 200.113 cv
277.8 208.033 271.44 214.393 263.64 214.393 cv
255.84 214.393 249.48 208.033 249.48 200.113 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
260.049 204.311 mo
(#)sh
262.92 44.233 mo
263.64 58.393 li
@
263.28 86.833 mo
263.28 100.993 li
@
263.28 129.313 mo
263.28 143.473 li
@
263.4 171.793 mo
263.16 186.073 li
@
277.8 29.353 mo
285.6 29.353 291.96 67.753 291.96 115.153 cv
291.96 162.073 285.6 200.113 277.8 200.113 cv
277.8 200.113 li
@
%ADOBeginSubsetFont: ONKBAA+Times#20New#20Roman#20Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ONKBAA+Times#20New#20Roman#20Bold gcheck setglobal} if
1 4796 14 <0001002b00000614054c0043013f401243222300212010201d0822221840
120b3f18b8ffc0400e371c3f00181018a0180320201d18b802d9b7223220
1d2a22223ab8ffc04013120b3f3a40371c3f0f3a1f3aaf3a0342201d3ab8
02d9b6220740120b3f07b8ffc0400e371c3f00071007a0070301201d07b8
02d9b72311201d17222329b8ffc04013120b3f2940371c3f0f291f29af29
0323201d29b802d9405e2333201d39222322212843000f001f003f000300
072a2929181817023a393908080708230042104202423e320f33010f3301
5f3301337d004560450240455045a045b0450445200f011f0102013e1100
1001001001501001107d443d76182b4e10f45d71723c4dfd5d3c4d105d71
f65d71723c4dfd5d3c003f3c103c103c3f3c103c103c1239722f3cfd3c2b
2b015d2b2b2b2b015d2b2b2b015d2b2b2b2b015d2b2b2b0310053c3c103c
3c3130011114161633331521353332373637363511342626232335211523
220706070615112111342626232335211523220706070615111416163333
152135333237363736351102301743392dfd3b2d3b241a0e0b1643392d02
c52d3b241a0f0b01df1644392c02c42c3c231a0f0b1644392cfd3c2c3c23
1a0f0b028cfe5c6834272525150e221866037c6834272525150e221866fe
8001806834272525150e221866fc846834272525150e22186601a400>ONKBAA+Times#20New#20Roman#20Bold AddT42Char 
ONKBAA+Times#20New#20Roman#20Bold /CharStrings get begin
/g14 14 def
end
ONKBAA+Times#20New#20Roman#20Bold /Encoding get
dup 45 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDAXXJ+Times#20New#20Roman#20Bold*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 210{/.notdef}rp]
FDAXXJ+Times#20New#20Roman#20Bold nf
FDAXXJ+Times#20New#20Roman#20Bold*1 [14.04 0 0 -14.04 0 0 ]msf
227.883 13.0299 mo
(-)sh
215.04 30.073 mo
243.84 30.073 li
@
249.48 30.073 mo
242.04 33.793 li
243.24 31.513 243.24 28.753 242.04 26.353 cv
249.48 30.073 li
cp
ef
215.04 72.673 mo
243.84 72.673 li
@
249.48 72.673 mo
242.04 76.393 li
243.24 73.993 243.24 71.233 242.04 68.953 cv
249.48 72.673 li
cp
ef
215.04 115.753 mo
243.84 115.873 li
@
249.48 115.873 mo
242.04 119.593 li
243.24 117.193 243.24 114.433 242.04 112.153 cv
249.48 115.873 li
cp
ef
215.04 159.073 mo
243.96 159.433 li
@
249.6 159.553 mo
242.16 163.153 li
243.36 160.873 243.36 158.113 242.28 155.713 cv
249.6 159.553 li
cp
ef
215.04 201.433 mo
243.12 201.193 li
@
248.76 201.193 mo
241.32 204.913 li
242.52 202.633 242.52 199.873 241.32 197.473 cv
248.76 201.193 li
cp
ef
214.08 30.073 mo
214.08 22.273 207.72 15.913 199.92 15.913 cv
192 15.913 185.76 22.273 185.76 30.073 cv
185.76 37.873 192 44.233 199.92 44.233 cv
207.72 44.233 214.08 37.873 214.08 30.073 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
214.08 30.073 mo
214.08 22.273 207.72 15.913 199.92 15.913 cv
192 15.913 185.76 22.273 185.76 30.073 cv
185.76 37.873 192 44.233 199.92 44.233 cv
207.72 44.233 214.08 37.873 214.08 30.073 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
196.321 34.2724 mo
( )sh
214.08 72.673 mo
214.08 64.753 207.72 58.393 199.92 58.393 cv
192 58.393 185.76 64.753 185.76 72.673 cv
185.76 80.473 192 86.833 199.92 86.833 cv
207.72 86.833 214.08 80.473 214.08 72.673 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
214.08 72.673 mo
214.08 64.753 207.72 58.393 199.92 58.393 cv
192 58.393 185.76 64.753 185.76 72.673 cv
185.76 80.473 192 86.833 199.92 86.833 cv
207.72 86.833 214.08 80.473 214.08 72.673 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
196.321 76.7574 mo
(!)sh
214.08 115.153 mo
214.08 107.353 207.72 100.993 199.92 100.993 cv
192 100.993 185.76 107.353 185.76 115.153 cv
185.76 122.953 192 129.313 199.92 129.313 cv
207.72 129.313 214.08 122.953 214.08 115.153 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
214.08 115.153 mo
214.08 107.353 207.72 100.993 199.92 100.993 cv
192 100.993 185.76 107.353 185.76 115.153 cv
185.76 122.953 192 129.313 199.92 129.313 cv
207.72 129.313 214.08 122.953 214.08 115.153 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
196.321 119.228 mo
(")sh
214.08 157.633 mo
214.08 149.833 207.72 143.473 199.92 143.473 cv
192 143.473 185.76 149.833 185.76 157.633 cv
185.76 165.433 192 171.793 199.92 171.793 cv
207.72 171.793 214.08 165.433 214.08 157.633 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
214.08 157.633 mo
214.08 149.833 207.72 143.473 199.92 143.473 cv
192 143.473 185.76 149.833 185.76 157.633 cv
185.76 165.433 192 171.793 199.92 171.793 cv
207.72 171.793 214.08 165.433 214.08 157.633 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
196.321 161.84 mo
(#)sh
214.08 200.113 mo
214.08 192.313 207.72 185.953 199.92 185.953 cv
192 185.953 185.76 192.313 185.76 200.113 cv
185.76 208.033 192 214.393 199.92 214.393 cv
207.72 214.393 214.08 208.033 214.08 200.113 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
214.08 200.113 mo
214.08 192.313 207.72 185.953 199.92 185.953 cv
192 185.953 185.76 192.313 185.76 200.113 cv
185.76 208.033 192 214.393 199.92 214.393 cv
207.72 214.393 214.08 208.033 214.08 200.113 cv
.75021 .679683 .670222 .90164 cmyk
@
FDAXXI+Times#20New#20Roman*1 [14.04 0 0 -14.04 0 0 ]msf
196.321 204.311 mo
($)sh
200.64 44.233 mo
199.92 58.393 li
@
200.28 86.833 mo
200.28 100.993 li
@
200.28 129.313 mo
200.28 143.473 li
@
200.16 171.793 mo
200.28 186.073 li
@
185.76 29.353 mo
177.84 29.353 171.48 67.753 171.48 115.153 cv
171.48 162.073 177.84 200.113 185.76 200.113 cv
185.76 200.113 li
@
FDAXXJ+Times#20New#20Roman#20Bold*1 [14.04 0 0 -14.04 0 0 ]msf
109.315 13.0299 mo
( )sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FDAXXJ+Times#20New#20Roman#20Bold*1 uf
/FDAXXJ+Times#20New#20Roman#20Bold uf
/ONKBAA+Times#20New#20Roman#20Bold uf
/FDAXXI+Times#20New#20Roman*1 uf
/FDAXXI+Times#20New#20Roman uf
/WGJAAA+Times#20New#20Roman uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
