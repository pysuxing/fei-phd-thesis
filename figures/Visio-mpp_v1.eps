%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Visio-mpp_v0.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: leifei
%%CreationDate: 2018/9/11, 23:43:47
%%BoundingBox: 0 0 341 312
%%HiResBoundingBox: 0 0 340.3034 311.1919
%%CropBox: 0 0 340.3034 311.1919
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1152 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-09-11T23:42:43+08:00"
   xmp:CreatorTool=""
   xmp:ModifyDate="2018-09-11T23:43:08+08:00"
   xmp:MetadataDate="2018-09-11T23:43:08+08:00"
   pdf:Keywords=""
   pdf:Producer="福昕PDF打印机 版本 7.2.0.0424"
   xmpMM:DocumentID="uuid:9980a743-81ea-4f42-9f80-5c7515fa404e"
   xmpMM:InstanceID="uuid:6c4c5128-e458-455e-b3eb-d05876e891c7">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -311.192 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 311.192 li
340.303 311.192 li
340.303 0 li
cp
clp
[1 0 0 1 -93.3576 0 ]ct
246.6 281.631 mo
254.52 281.631 260.76 275.271 260.76 267.471 cv
260.76 180.951 li
260.76 173.151 254.52 166.791 246.6 166.791 cv
121.92 166.791 li
114.12 166.791 107.76 173.151 107.76 180.951 cv
107.76 267.471 li
107.76 275.271 114.12 281.631 121.92 281.631 cv
246.6 281.631 li
cp
false sop
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
1.2 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
246.6 281.631 mo
254.52 281.631 260.76 275.271 260.76 267.471 cv
260.76 180.951 li
260.76 173.151 254.52 166.791 246.6 166.791 cv
121.92 166.791 li
114.12 166.791 107.76 173.151 107.76 180.951 cv
107.76 267.471 li
107.76 275.271 114.12 281.631 121.92 281.631 cv
246.6 281.631 li
cp
.75021 .679683 .670222 .90164 cmyk
@
253.68 253.911 mo
253.68 241.791 248.64 231.951 242.4 231.951 cv
236.16 231.951 231 241.791 231 253.911 cv
231 266.151 236.16 275.871 242.4 275.871 cv
248.64 275.871 253.68 266.151 253.68 253.911 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
253.08 254.991 mo
253.08 253.911 li
253.08 251.751 li
252.84 249.591 li
252.6 247.551 li
252.48 246.711 li
252.48 246.471 252.6 246.111 252.96 246.111 cv
253.32 245.991 253.56 246.231 253.68 246.591 cv
253.8 247.311 li
254.04 249.471 li
254.28 251.751 li
254.28 254.031 li
254.28 254.991 li
254.28 255.351 254.04 255.591 253.68 255.591 cv
253.32 255.591 253.08 255.351 253.08 254.991 cv
cp
250.92 241.071 mo
250.56 240.231 li
249.84 238.671 li
249.12 237.351 li
248.28 236.151 li
247.32 235.071 li
246.84 234.591 li
246.6 234.351 li
246.36 234.111 246.36 233.751 246.6 233.511 cv
246.72 233.271 247.2 233.271 247.44 233.391 cv
247.68 233.751 li
248.28 234.231 li
249.24 235.431 li
250.08 236.751 li
250.92 238.191 li
251.76 239.751 li
252 240.711 li
252.12 240.951 252 241.311 251.76 241.431 cv
251.4 241.551 251.04 241.431 250.92 241.071 cv
cp
241.56 232.671 mo
241.32 232.671 li
240.84 232.791 li
240.24 233.031 li
239.76 233.271 li
239.28 233.511 li
238.8 233.871 li
238.32 234.231 li
237.84 234.591 li
237.36 235.071 li
236.52 236.151 li
235.68 237.351 li
235.68 237.471 li
235.44 237.711 235.08 237.831 234.84 237.711 cv
234.48 237.471 234.48 237.111 234.6 236.871 cv
234.72 236.631 li
235.56 235.311 li
236.52 234.231 li
237.12 233.751 li
237.6 233.271 li
238.2 232.791 li
238.68 232.431 li
239.28 232.191 li
239.88 231.831 li
240.48 231.711 li
241.2 231.471 li
241.44 231.471 li
241.68 231.471 242.04 231.711 242.04 231.951 cv
242.16 232.311 241.92 232.671 241.56 232.671 cv
cp
233.28 242.751 mo
233.04 243.711 li
232.56 245.511 li
232.2 247.551 li
231.84 249.591 li
231.72 250.911 li
231.72 251.271 231.48 251.511 231.12 251.511 cv
230.76 251.391 230.52 251.151 230.64 250.791 cv
230.64 249.471 li
231 247.311 li
231.36 245.271 li
231.84 243.351 li
232.08 242.391 li
232.2 242.151 232.56 241.911 232.92 242.031 cv
233.16 242.151 233.4 242.511 233.28 242.751 cv
cp
231.72 256.791 mo
231.84 258.351 li
232.2 260.391 li
232.56 262.431 li
233.04 264.351 li
233.16 264.951 li
233.28 265.191 233.16 265.551 232.8 265.671 cv
232.44 265.791 232.2 265.551 232.08 265.311 cv
231.84 264.591 li
231.36 262.671 li
231 260.631 li
230.64 258.471 li
230.52 256.911 li
230.52 256.551 230.76 256.311 231.12 256.311 cv
231.48 256.191 231.72 256.431 231.72 256.791 cv
cp
235.56 270.351 mo
235.68 270.591 li
236.52 271.791 li
237.48 272.871 li
237.84 273.351 li
238.32 273.711 li
238.8 274.071 li
239.4 274.431 li
239.88 274.671 li
240.36 274.911 li
240.84 275.151 li
241.32 275.271 li
241.68 275.271 241.92 275.631 241.8 275.871 cv
241.8 276.231 241.44 276.471 241.2 276.471 cv
241.08 276.351 li
240.48 276.231 li
239.88 275.991 li
239.28 275.751 li
238.68 275.391 li
238.08 275.031 li
237.6 274.671 li
237 274.191 li
236.52 273.711 li
235.56 272.511 li
234.72 271.191 li
234.48 270.951 li
234.36 270.591 234.36 270.231 234.72 270.111 cv
234.96 269.871 235.32 269.991 235.56 270.351 cv
cp
246.48 273.711 mo
246.96 273.351 li
247.32 272.871 li
248.28 271.791 li
249.12 270.591 li
249.84 269.151 li
250.56 267.711 li
250.8 266.991 li
250.92 266.751 251.28 266.631 251.64 266.751 cv
251.88 266.871 252.12 267.111 252 267.471 cv
251.64 268.191 li
250.92 269.751 li
250.08 271.311 li
249.24 272.631 li
248.16 273.711 li
247.68 274.191 li
247.2 274.671 li
246.96 274.911 246.6 274.791 246.36 274.551 cv
246.12 274.311 246.12 273.951 246.48 273.711 cv
cp
252.48 261.351 mo
252.6 260.391 li
252.96 258.351 li
253.08 256.191 li
253.08 255.831 253.44 255.591 253.68 255.591 cv
254.04 255.591 254.28 255.951 254.28 256.311 cv
254.04 258.471 li
253.8 260.631 li
253.56 261.591 li
253.56 261.951 253.2 262.191 252.96 262.071 cv
252.6 262.071 252.36 261.711 252.48 261.351 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
129.6 191.991 mo
129.6 256.431 li
@
122.28 224.271 mo
122.28 220.191 125.52 216.951 129.6 216.951 cv
133.56 216.951 136.8 220.191 136.8 224.271 cv
136.8 224.271 li
136.8 228.231 133.56 231.471 129.6 231.471 cv
125.52 231.471 122.28 228.231 122.28 224.271 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
122.28 224.271 mo
122.28 220.191 125.52 216.951 129.6 216.951 cv
133.56 216.951 136.8 220.191 136.8 224.271 cv
136.8 224.271 li
136.8 228.231 133.56 231.471 129.6 231.471 cv
125.52 231.471 122.28 228.231 122.28 224.271 cv
.75021 .679683 .670222 .90164 cmyk
@
122.28 204.111 mo
122.28 200.031 125.52 196.791 129.6 196.791 cv
133.56 196.791 136.8 200.031 136.8 204.111 cv
136.8 204.111 li
136.8 208.071 133.56 211.311 129.6 211.311 cv
125.52 211.311 122.28 208.071 122.28 204.111 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
122.28 204.111 mo
122.28 200.031 125.52 196.791 129.6 196.791 cv
133.56 196.791 136.8 200.031 136.8 204.111 cv
136.8 204.111 li
136.8 208.071 133.56 211.311 129.6 211.311 cv
125.52 211.311 122.28 208.071 122.28 204.111 cv
.75021 .679683 .670222 .90164 cmyk
@
122.28 244.431 mo
122.28 240.351 125.52 237.111 129.6 237.111 cv
133.56 237.111 136.8 240.351 136.8 244.431 cv
136.8 244.431 li
136.8 248.391 133.56 251.631 129.6 251.631 cv
125.52 251.631 122.28 248.391 122.28 244.431 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
122.28 244.431 mo
122.28 240.351 125.52 237.111 129.6 237.111 cv
133.56 237.111 136.8 240.351 136.8 244.431 cv
136.8 244.431 li
136.8 248.391 133.56 251.631 129.6 251.631 cv
125.52 251.631 122.28 248.391 122.28 244.431 cv
.75021 .679683 .670222 .90164 cmyk
@
122.28 184.671 mo
122.28 180.711 125.52 177.471 129.6 177.471 cv
133.56 177.471 136.8 180.711 136.8 184.671 cv
136.8 184.671 li
136.8 188.751 133.56 191.991 129.6 191.991 cv
125.52 191.991 122.28 188.751 122.28 184.671 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
122.28 184.671 mo
122.28 180.711 125.52 177.471 129.6 177.471 cv
133.56 177.471 136.8 180.711 136.8 184.671 cv
136.8 184.671 li
136.8 188.751 133.56 191.991 129.6 191.991 cv
125.52 191.991 122.28 188.751 122.28 184.671 cv
.75021 .679683 .670222 .90164 cmyk
@
122.28 263.751 mo
122.28 259.671 125.52 256.431 129.6 256.431 cv
133.56 256.431 136.8 259.671 136.8 263.751 cv
136.8 263.751 li
136.8 267.711 133.56 270.951 129.6 270.951 cv
125.52 270.951 122.28 267.711 122.28 263.751 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
122.28 263.751 mo
122.28 259.671 125.52 256.431 129.6 256.431 cv
133.56 256.431 136.8 259.671 136.8 263.751 cv
136.8 263.751 li
136.8 267.711 133.56 270.951 129.6 270.951 cv
125.52 270.951 122.28 267.711 122.28 263.751 cv
.75021 .679683 .670222 .90164 cmyk
@
122.28 184.671 mo
117.36 184.671 113.4 202.431 113.4 224.271 cv
113.4 245.991 117.36 263.751 122.28 263.751 cv
122.28 263.751 li
@
158.64 191.991 mo
158.64 256.431 li
@
151.32 224.271 mo
151.32 220.191 154.56 216.951 158.64 216.951 cv
162.6 216.951 165.84 220.191 165.84 224.271 cv
165.84 224.271 li
165.84 228.231 162.6 231.471 158.64 231.471 cv
154.56 231.471 151.32 228.231 151.32 224.271 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
151.32 224.271 mo
151.32 220.191 154.56 216.951 158.64 216.951 cv
162.6 216.951 165.84 220.191 165.84 224.271 cv
165.84 224.271 li
165.84 228.231 162.6 231.471 158.64 231.471 cv
154.56 231.471 151.32 228.231 151.32 224.271 cv
.75021 .679683 .670222 .90164 cmyk
@
151.32 204.111 mo
151.32 200.031 154.56 196.791 158.64 196.791 cv
162.6 196.791 165.84 200.031 165.84 204.111 cv
165.84 204.111 li
165.84 208.071 162.6 211.311 158.64 211.311 cv
154.56 211.311 151.32 208.071 151.32 204.111 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
151.32 204.111 mo
151.32 200.031 154.56 196.791 158.64 196.791 cv
162.6 196.791 165.84 200.031 165.84 204.111 cv
165.84 204.111 li
165.84 208.071 162.6 211.311 158.64 211.311 cv
154.56 211.311 151.32 208.071 151.32 204.111 cv
.75021 .679683 .670222 .90164 cmyk
@
151.32 244.431 mo
151.32 240.351 154.56 237.111 158.64 237.111 cv
162.6 237.111 165.84 240.351 165.84 244.431 cv
165.84 244.431 li
165.84 248.391 162.6 251.631 158.64 251.631 cv
154.56 251.631 151.32 248.391 151.32 244.431 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
151.32 244.431 mo
151.32 240.351 154.56 237.111 158.64 237.111 cv
162.6 237.111 165.84 240.351 165.84 244.431 cv
165.84 244.431 li
165.84 248.391 162.6 251.631 158.64 251.631 cv
154.56 251.631 151.32 248.391 151.32 244.431 cv
.75021 .679683 .670222 .90164 cmyk
@
151.32 184.671 mo
151.32 180.711 154.56 177.471 158.64 177.471 cv
162.6 177.471 165.84 180.711 165.84 184.671 cv
165.84 184.671 li
165.84 188.751 162.6 191.991 158.64 191.991 cv
154.56 191.991 151.32 188.751 151.32 184.671 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
151.32 184.671 mo
151.32 180.711 154.56 177.471 158.64 177.471 cv
162.6 177.471 165.84 180.711 165.84 184.671 cv
165.84 184.671 li
165.84 188.751 162.6 191.991 158.64 191.991 cv
154.56 191.991 151.32 188.751 151.32 184.671 cv
.75021 .679683 .670222 .90164 cmyk
@
151.32 263.751 mo
151.32 259.671 154.56 256.431 158.64 256.431 cv
162.6 256.431 165.84 259.671 165.84 263.751 cv
165.84 263.751 li
165.84 267.711 162.6 270.951 158.64 270.951 cv
154.56 270.951 151.32 267.711 151.32 263.751 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
151.32 263.751 mo
151.32 259.671 154.56 256.431 158.64 256.431 cv
162.6 256.431 165.84 259.671 165.84 263.751 cv
165.84 263.751 li
165.84 267.711 162.6 270.951 158.64 270.951 cv
154.56 270.951 151.32 267.711 151.32 263.751 cv
.75021 .679683 .670222 .90164 cmyk
@
151.32 184.671 mo
146.4 184.671 142.44 202.431 142.44 224.271 cv
142.44 245.991 146.4 263.751 151.32 263.751 cv
151.32 263.751 li
@
186.96 191.991 mo
186.96 256.431 li
@
179.64 224.271 mo
179.64 220.191 182.88 216.951 186.96 216.951 cv
190.92 216.951 194.16 220.191 194.16 224.271 cv
194.16 224.271 li
194.16 228.231 190.92 231.471 186.96 231.471 cv
182.88 231.471 179.64 228.231 179.64 224.271 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
179.64 224.271 mo
179.64 220.191 182.88 216.951 186.96 216.951 cv
190.92 216.951 194.16 220.191 194.16 224.271 cv
194.16 224.271 li
194.16 228.231 190.92 231.471 186.96 231.471 cv
182.88 231.471 179.64 228.231 179.64 224.271 cv
.75021 .679683 .670222 .90164 cmyk
@
179.64 204.111 mo
179.64 200.031 182.88 196.791 186.96 196.791 cv
190.92 196.791 194.16 200.031 194.16 204.111 cv
194.16 204.111 li
194.16 208.071 190.92 211.311 186.96 211.311 cv
182.88 211.311 179.64 208.071 179.64 204.111 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
179.64 204.111 mo
179.64 200.031 182.88 196.791 186.96 196.791 cv
190.92 196.791 194.16 200.031 194.16 204.111 cv
194.16 204.111 li
194.16 208.071 190.92 211.311 186.96 211.311 cv
182.88 211.311 179.64 208.071 179.64 204.111 cv
.75021 .679683 .670222 .90164 cmyk
@
179.64 244.431 mo
179.64 240.351 182.88 237.111 186.96 237.111 cv
190.92 237.111 194.16 240.351 194.16 244.431 cv
194.16 244.431 li
194.16 248.391 190.92 251.631 186.96 251.631 cv
182.88 251.631 179.64 248.391 179.64 244.431 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
179.64 244.431 mo
179.64 240.351 182.88 237.111 186.96 237.111 cv
190.92 237.111 194.16 240.351 194.16 244.431 cv
194.16 244.431 li
194.16 248.391 190.92 251.631 186.96 251.631 cv
182.88 251.631 179.64 248.391 179.64 244.431 cv
.75021 .679683 .670222 .90164 cmyk
@
179.64 184.671 mo
179.64 180.711 182.88 177.471 186.96 177.471 cv
190.92 177.471 194.16 180.711 194.16 184.671 cv
194.16 184.671 li
194.16 188.751 190.92 191.991 186.96 191.991 cv
182.88 191.991 179.64 188.751 179.64 184.671 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
179.64 184.671 mo
179.64 180.711 182.88 177.471 186.96 177.471 cv
190.92 177.471 194.16 180.711 194.16 184.671 cv
194.16 184.671 li
194.16 188.751 190.92 191.991 186.96 191.991 cv
182.88 191.991 179.64 188.751 179.64 184.671 cv
.75021 .679683 .670222 .90164 cmyk
@
179.64 263.751 mo
179.64 259.671 182.88 256.431 186.96 256.431 cv
190.92 256.431 194.16 259.671 194.16 263.751 cv
194.16 263.751 li
194.16 267.711 190.92 270.951 186.96 270.951 cv
182.88 270.951 179.64 267.711 179.64 263.751 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
179.64 263.751 mo
179.64 259.671 182.88 256.431 186.96 256.431 cv
190.92 256.431 194.16 259.671 194.16 263.751 cv
194.16 263.751 li
194.16 267.711 190.92 270.951 186.96 270.951 cv
182.88 270.951 179.64 267.711 179.64 263.751 cv
.75021 .679683 .670222 .90164 cmyk
@
179.64 184.671 mo
174.84 184.671 170.76 202.431 170.76 224.271 cv
170.76 245.991 174.84 263.751 179.64 263.751 cv
179.64 263.751 li
@
214.56 191.991 mo
214.56 256.431 li
@
207.36 224.271 mo
207.36 220.191 210.6 216.951 214.56 216.951 cv
218.64 216.951 221.88 220.191 221.88 224.271 cv
221.88 224.271 li
221.88 228.231 218.64 231.471 214.56 231.471 cv
210.6 231.471 207.36 228.231 207.36 224.271 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
207.36 224.271 mo
207.36 220.191 210.6 216.951 214.56 216.951 cv
218.64 216.951 221.88 220.191 221.88 224.271 cv
221.88 224.271 li
221.88 228.231 218.64 231.471 214.56 231.471 cv
210.6 231.471 207.36 228.231 207.36 224.271 cv
.75021 .679683 .670222 .90164 cmyk
@
207.36 204.111 mo
207.36 200.031 210.6 196.791 214.56 196.791 cv
218.64 196.791 221.88 200.031 221.88 204.111 cv
221.88 204.111 li
221.88 208.071 218.64 211.311 214.56 211.311 cv
210.6 211.311 207.36 208.071 207.36 204.111 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
207.36 204.111 mo
207.36 200.031 210.6 196.791 214.56 196.791 cv
218.64 196.791 221.88 200.031 221.88 204.111 cv
221.88 204.111 li
221.88 208.071 218.64 211.311 214.56 211.311 cv
210.6 211.311 207.36 208.071 207.36 204.111 cv
.75021 .679683 .670222 .90164 cmyk
@
207.36 244.431 mo
207.36 240.351 210.6 237.111 214.56 237.111 cv
218.64 237.111 221.88 240.351 221.88 244.431 cv
221.88 244.431 li
221.88 248.391 218.64 251.631 214.56 251.631 cv
210.6 251.631 207.36 248.391 207.36 244.431 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
207.36 244.431 mo
207.36 240.351 210.6 237.111 214.56 237.111 cv
218.64 237.111 221.88 240.351 221.88 244.431 cv
221.88 244.431 li
221.88 248.391 218.64 251.631 214.56 251.631 cv
210.6 251.631 207.36 248.391 207.36 244.431 cv
.75021 .679683 .670222 .90164 cmyk
@
207.36 184.671 mo
207.36 180.711 210.6 177.471 214.56 177.471 cv
218.64 177.471 221.88 180.711 221.88 184.671 cv
221.88 184.671 li
221.88 188.751 218.64 191.991 214.56 191.991 cv
210.6 191.991 207.36 188.751 207.36 184.671 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
207.36 184.671 mo
207.36 180.711 210.6 177.471 214.56 177.471 cv
218.64 177.471 221.88 180.711 221.88 184.671 cv
221.88 184.671 li
221.88 188.751 218.64 191.991 214.56 191.991 cv
210.6 191.991 207.36 188.751 207.36 184.671 cv
.75021 .679683 .670222 .90164 cmyk
@
207.36 263.751 mo
207.36 259.671 210.6 256.431 214.56 256.431 cv
218.64 256.431 221.88 259.671 221.88 263.751 cv
221.88 263.751 li
221.88 267.711 218.64 270.951 214.56 270.951 cv
210.6 270.951 207.36 267.711 207.36 263.751 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
207.36 263.751 mo
207.36 259.671 210.6 256.431 214.56 256.431 cv
218.64 256.431 221.88 259.671 221.88 263.751 cv
221.88 263.751 li
221.88 267.711 218.64 270.951 214.56 270.951 cv
210.6 270.951 207.36 267.711 207.36 263.751 cv
.75021 .679683 .670222 .90164 cmyk
@
207.36 184.671 mo
202.44 184.671 198.48 202.431 198.48 224.271 cv
198.48 245.991 202.44 263.751 207.36 263.751 cv
207.36 263.751 li
@
242.88 191.991 mo
242.88 256.431 li
@
235.68 224.271 mo
235.68 220.191 238.92 216.951 242.88 216.951 cv
246.96 216.951 250.2 220.191 250.2 224.271 cv
250.2 224.271 li
250.2 228.231 246.96 231.471 242.88 231.471 cv
238.92 231.471 235.68 228.231 235.68 224.271 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
235.68 224.271 mo
235.68 220.191 238.92 216.951 242.88 216.951 cv
246.96 216.951 250.2 220.191 250.2 224.271 cv
250.2 224.271 li
250.2 228.231 246.96 231.471 242.88 231.471 cv
238.92 231.471 235.68 228.231 235.68 224.271 cv
.75021 .679683 .670222 .90164 cmyk
@
235.68 204.111 mo
235.68 200.031 238.92 196.791 242.88 196.791 cv
246.96 196.791 250.2 200.031 250.2 204.111 cv
250.2 204.111 li
250.2 208.071 246.96 211.311 242.88 211.311 cv
238.92 211.311 235.68 208.071 235.68 204.111 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
235.68 204.111 mo
235.68 200.031 238.92 196.791 242.88 196.791 cv
246.96 196.791 250.2 200.031 250.2 204.111 cv
250.2 204.111 li
250.2 208.071 246.96 211.311 242.88 211.311 cv
238.92 211.311 235.68 208.071 235.68 204.111 cv
.75021 .679683 .670222 .90164 cmyk
@
235.68 244.431 mo
235.68 240.351 238.92 237.111 242.88 237.111 cv
246.96 237.111 250.2 240.351 250.2 244.431 cv
250.2 244.431 li
250.2 248.391 246.96 251.631 242.88 251.631 cv
238.92 251.631 235.68 248.391 235.68 244.431 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
235.68 244.431 mo
235.68 240.351 238.92 237.111 242.88 237.111 cv
246.96 237.111 250.2 240.351 250.2 244.431 cv
250.2 244.431 li
250.2 248.391 246.96 251.631 242.88 251.631 cv
238.92 251.631 235.68 248.391 235.68 244.431 cv
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: ZUNBAA+#cb#ce#cc#e5 Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /ZUNBAA+#cb#ce#cc#e5
Type42DictBegin
[<00010000000b000b000b000b63767420c08e2377000000bc000002be6670
676d3baa1b4a0000037c0000000d676c79663adcdaef00000bac000005ec
6865616428cb75db0000038c0000003668686561e6020000000003c40000
0024686d747854038001000003e8000000206c6f6361e816000000000408
000000246d617870573ec4010000042c000000206e616d6582e6b8740000
044c000006aa707265700a04dbfc00000af8000000b26764697200000000
0000000000000000ffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffff00ab0002007000020004fffeffdfffff00060008
000a000c000e00100012001400160018001a001c001e000e0010ffff0006
0008000a000c000e00100012001400160018001a001a001cffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffff001e
001e00c90000001c001c0002ffea00550033003800c1000a00400037003d
0032003c00dcffdd0057004d000b001f000b001f00920037007a0070006c
006f00200020001a00160006000800060008000f0000b0282c4b52584544
1b2121592d00000000010000000507aef20fa2645f0f3cf5000b01000000
0000b798428000000000c5bb4440fffeffdb010000dc0000000c00020001
000000000001000000dcffdc00240100fffe000001000001000000000000
000000000000000000080100000000800002008000040080000c0080001d
0080000d0080000f00800009000000000000000000000118000002480000
02fa0000037a00000484000005a4000005ec000100000008016c00310000
000000010000002f0029000001613dbb000000000000001e016e00010000
000000000027000000010000000000010006002700010000000000020007
002d00010000000000030006002700010000000000040006002700010000
00000005000c00340001000000000006000600270001000000000007002c
00400003000104090000004e006c0003000104090001000c00ba00030001
04090002000e00c60003000104090003000c00ba0003000104090004000c
00ba0003000104090005001800d40003000104090006000c00ba00030001
04090007005800ec000300010409000d02aa0144000300010409000e0052
03ee0003000108040000008204400003000108040001000404c200030001
08040002000e00c60003000108040003000404c200030001080400040004
04c20003000108040005001800d40003000108040006000404c200030001
08040007005800ec0003000108040008003e04c60003000108040009003e
04c6000300010804000b00380504000300010804000c00380504a920436f
70797269676874205a484f4e47594920456c656374726f6e696320436f2e
203230303153696d53756e526567756c617256657273696f6e20352e3033
54726164656d61726b206f66205a484f4e47594920456c656374726f6e69
6320436f2e2c204265696a696e6700a900200043006f0070007900720069
0067006800740020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e0020003200300030
003100530069006d00530075006e0052006500670075006c006100720056
0065007200730069006f006e00200035002e003000330054007200610064
0065006d00610072006b0020006f00660020005a0048004f004e00470059
004900200045006c0065006300740072006f006e0069006300200043006f
002e002c0020004200650069006a0069006e00670059006f00750020006d
0061007900200075007300650020007400680069007300200066006f006e
007400200074006f00200064006900730070006c0061007900200061006e
00640020007000720069006e007400200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
007900200074006800650020006c006900630065006e0073006500200074
00650072006d007300200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c0075006400650064002e00200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002e0068007400740070003a002f002f00770077
0077002e006d006900630072006f0073006f00660074002e0063006f006d
002f007400790070006f006700720061007000680079002f0066006f006e
0074007300a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e00200032003000300031000d000a5b574f53
6570636e753153174eac4e2d66134e2d680775355b504fe1606f6280672f
67099650516c53f863d04f9b30025b8b4f53004200650069006a0069006e
00670020005a0068006f006e00670059006900200045006c006500630074
0072006f006e00690063007300200043006f002e0068007400740070003a
002f002f007700770077002e007a0068006f006e00670079006900630074
0073002e0063006f006d002e0063006e0000411a01110110003200280110
010e00280028010f010e00280028010c010d00460028010d010e00280028
010e010d00180028010c010db346285001b801ff858d001db0324b5258b0
801d59b801064568b801062344b801044568b801042344b801054568b801
044560b801052344b801024568b801044560b801022344b801034568b801
024560b801032344b801004568b801044560b801002344b801014568b801
004560b801012344012b2b2b2b2b2b2b000000>
[1517 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 0 1 <000200020004007b00b3001b001f00ba40304b0e770f870fc71ed80dd60f
e704e90df90e09590d780d880d971ea80db80dc80e07280e280f2b1c03d7
06011e011d02b80119b70d0d0e1f000e1c1bb8010db4100f100001b80118
40091f1e1c1d1e03080f0eb80100b40617140309bb011800160008010440
21350f750ff910030d0e0f10041f155f15df1503df15014f158f15df15ff
150415082fdd5d717217395d003f3cfd173c3fc41217392f3cfd3c870e2e
fdc0c005c0c0872e0efdc005c0c0015d3130015d5d5d37230706163b0115
23353332363f02171e013b011523353332362f01230733512d0902040703
2503040601270f26020604032b040603021f01152a4426090b0606050699
059e0605060607078553>ZUNBAA+#cb#ce#cc#e5 AddT42Char 

1 0 0 <> ZUNBAA+#cb#ce#cc#e5 AddT42Char 
ZUNBAA+#cb#ce#cc#e5 /CharStrings get begin
/g1 1 def
end
ZUNBAA+#cb#ce#cc#e5 /Encoding get
dup 32 /g1 put
pop
end
%ADOEndSubsetFont
/FFGDND+#cb#ce#cc#e5 /ZUNBAA+#cb#ce#cc#e5 findfont ct_VMDictPut
/FFGDND+#cb#ce#cc#e5*1 
[32{/.notdef}rp /g1 223{/.notdef}rp]
FFGDND+#cb#ce#cc#e5 nf
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
240.846 246.715 mo
( )sh
235.68 184.671 mo
235.68 180.711 238.92 177.471 242.88 177.471 cv
246.96 177.471 250.2 180.711 250.2 184.671 cv
250.2 184.671 li
250.2 188.751 246.96 191.991 242.88 191.991 cv
238.92 191.991 235.68 188.751 235.68 184.671 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
235.68 184.671 mo
235.68 180.711 238.92 177.471 242.88 177.471 cv
246.96 177.471 250.2 180.711 250.2 184.671 cv
250.2 184.671 li
250.2 188.751 246.96 191.991 242.88 191.991 cv
238.92 191.991 235.68 188.751 235.68 184.671 cv
.75021 .679683 .670222 .90164 cmyk
@
235.68 263.751 mo
235.68 259.671 238.92 256.431 242.88 256.431 cv
246.96 256.431 250.2 259.671 250.2 263.751 cv
250.2 263.751 li
250.2 267.711 246.96 270.951 242.88 270.951 cv
238.92 270.951 235.68 267.711 235.68 263.751 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
235.68 263.751 mo
235.68 259.671 238.92 256.431 242.88 256.431 cv
246.96 256.431 250.2 259.671 250.2 263.751 cv
250.2 263.751 li
250.2 267.711 246.96 270.951 242.88 270.951 cv
238.92 270.951 235.68 267.711 235.68 263.751 cv
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: ZUNBAA+#cb#ce#cc#e5 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUNBAA+#cb#ce#cc#e5 gcheck setglobal} if
1 280 2 <000300040004007700af00180024003000ab402b370e831b873099169926
a926ba26c30ed30ed613d61be50ee613e61b0e161b01200e6f1a71170312
2d202db80118b520200b00280abf0118000b010000190001011800000104
b312150525bb010e000f001c010e4010df15013015b015df15ff15041505
2d21b8010db2050a00b80115400e500501d00501b005d005f00503052f5d
7172f43c10fd3c10dc5d71edd4fd111239003ffd3c3ffd3c1112392ffd11
12393130015d00715d37353332363d0134262b0135333216151406071e01
151406232732363534262b01151416333734262b0122061d013332360408
05040405063a18170c1317101c1803111314141705043014100c04051a0b
14040604048f04040613140e1207071a10141806151316154b04047e120f
04043e12>ZUNBAA+#cb#ce#cc#e5 AddT42Char 
ZUNBAA+#cb#ce#cc#e5 /CharStrings get begin
/g2 2 def
end
ZUNBAA+#cb#ce#cc#e5 /Encoding get
dup 33 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFGDND+#cb#ce#cc#e5*1 
[32{/.notdef}rp /g1 /g2 222{/.notdef}rp]
FFGDND+#cb#ce#cc#e5 nf
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
240.846 266.035 mo
(!)sh
235.68 184.671 mo
230.76 184.671 226.8 202.431 226.8 224.271 cv
226.8 245.991 230.76 263.751 235.68 263.751 cv
235.68 263.751 li
@
121.92 27.9507 mo
114.12 27.9507 107.76 34.3107 107.76 42.1107 cv
107.76 128.511 li
107.76 136.431 114.12 142.671 121.92 142.671 cv
246.6 142.671 li
254.52 142.671 260.76 136.431 260.76 128.511 cv
260.76 42.1107 li
260.76 34.3107 254.52 27.9507 246.6 27.9507 cv
121.92 27.9507 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
121.92 27.9507 mo
114.12 27.9507 107.76 34.3107 107.76 42.1107 cv
107.76 128.511 li
107.76 136.431 114.12 142.671 121.92 142.671 cv
246.6 142.671 li
254.52 142.671 260.76 136.431 260.76 128.511 cv
260.76 42.1107 li
260.76 34.3107 254.52 27.9507 246.6 27.9507 cv
121.92 27.9507 li
cp
.75021 .679683 .670222 .90164 cmyk
@
240.36 84.7107 mo
240.36 80.6307 243.6 77.3907 247.56 77.3907 cv
251.52 77.2707 254.88 80.5107 254.88 84.5907 cv
254.88 84.5907 li
254.88 88.5507 251.64 91.7906 247.68 91.9107 cv
243.6 91.9107 240.36 88.6707 240.36 84.7107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
240.36 84.7107 mo
240.36 80.6307 243.6 77.3907 247.56 77.3907 cv
251.52 77.2707 254.88 80.5107 254.88 84.5907 cv
254.88 84.5907 li
254.88 88.5507 251.64 91.7907 247.68 91.9107 cv
243.6 91.9107 240.36 88.6707 240.36 84.7107 cv
.75021 .679683 .670222 .90164 cmyk
@
240.24 64.4307 mo
240.24 60.4707 243.36 57.2307 247.44 57.2307 cv
251.4 57.1107 254.64 60.3507 254.76 64.4307 cv
254.76 64.4307 li
254.76 68.3907 251.52 71.6307 247.56 71.7507 cv
243.48 71.7507 240.24 68.5107 240.24 64.4307 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
240.24 64.4307 mo
240.24 60.4707 243.36 57.2307 247.44 57.2307 cv
251.4 57.1107 254.64 60.3507 254.76 64.4307 cv
254.76 64.4307 li
254.76 68.3907 251.52 71.6307 247.56 71.7507 cv
243.48 71.7507 240.24 68.5107 240.24 64.4307 cv
.75021 .679683 .670222 .90164 cmyk
@
240.48 104.871 mo
240.48 100.791 243.72 97.5507 247.68 97.5507 cv
251.76 97.4307 255 100.671 255 104.751 cv
255 104.751 li
255 108.711 251.76 111.951 247.8 112.071 cv
243.84 112.071 240.48 108.831 240.48 104.871 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
240.48 104.871 mo
240.48 100.791 243.72 97.5507 247.68 97.5507 cv
251.76 97.4307 255 100.671 255 104.751 cv
255 104.751 li
255 108.711 251.76 111.951 247.8 112.071 cv
243.84 112.071 240.48 108.831 240.48 104.871 cv
.75021 .679683 .670222 .90164 cmyk
@
240.12 45.1107 mo
240 41.1507 243.24 37.7906 247.32 37.7906 cv
251.28 37.7906 254.52 41.0307 254.64 44.9907 cv
254.64 44.9907 li
254.64 49.0707 251.4 52.3107 247.44 52.3107 cv
243.36 52.3107 240.12 49.1907 240.12 45.1107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
240.12 45.1107 mo
240 41.1507 243.24 37.7907 247.32 37.7907 cv
251.28 37.7907 254.52 41.0307 254.64 44.9907 cv
254.64 44.9907 li
254.64 49.0707 251.4 52.3107 247.44 52.3107 cv
243.36 52.3107 240.12 49.1907 240.12 45.1107 cv
.75021 .679683 .670222 .90164 cmyk
@
240.6 124.191 mo
240.6 120.111 243.84 116.871 247.8 116.871 cv
251.88 116.871 255.12 120.111 255.12 124.071 cv
255.12 124.071 li
255.12 128.031 252 131.391 247.92 131.391 cv
243.96 131.391 240.6 128.151 240.6 124.191 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
240.6 124.191 mo
240.6 120.111 243.84 116.871 247.8 116.871 cv
251.88 116.871 255.12 120.111 255.12 124.071 cv
255.12 124.071 li
255.12 128.031 252 131.391 247.92 131.391 cv
243.96 131.391 240.6 128.151 240.6 124.191 cv
.75021 .679683 .670222 .90164 cmyk
@
240.12 45.1107 mo
236.52 45.1107 233.64 54.2307 233.76 65.3907 cv
233.88 76.0707 236.76 84.7107 240.36 84.7107 cv
240.36 84.7107 li
@
240.24 64.4307 mo
236.64 64.5507 233.76 73.5507 233.88 84.7107 cv
234 95.8707 236.88 104.871 240.48 104.871 cv
240.48 104.871 li
@
240.36 84.7107 mo
236.76 84.7107 234 95.5107 234.12 108.951 cv
234.12 117.351 237.12 124.191 240.6 124.191 cv
240.6 124.191 li
@
240.12 45.1107 mo
234.72 45.1107 230.52 59.2707 230.64 76.6707 cv
230.76 92.2707 235.2 104.871 240.48 104.871 cv
240.48 104.871 li
@
240.24 64.4307 mo
234.84 64.5507 230.64 79.3107 230.76 97.6707 cv
230.88 112.311 235.32 124.191 240.6 124.191 cv
240.6 124.191 li
@
208.2 84.7107 mo
208.2 80.6307 211.44 77.3907 215.4 77.3907 cv
219.36 77.2707 222.72 80.5107 222.72 84.5907 cv
222.72 84.5907 li
222.72 88.5507 219.48 91.7906 215.52 91.9107 cv
211.44 91.9107 208.2 88.6707 208.2 84.7107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.2 84.7107 mo
208.2 80.6307 211.44 77.3907 215.4 77.3907 cv
219.36 77.2707 222.72 80.5107 222.72 84.5907 cv
222.72 84.5907 li
222.72 88.5507 219.48 91.7907 215.52 91.9107 cv
211.44 91.9107 208.2 88.6707 208.2 84.7107 cv
.75021 .679683 .670222 .90164 cmyk
@
208.08 64.4307 mo
208.08 60.4707 211.2 57.2307 215.28 57.2307 cv
219.24 57.1107 222.6 60.3507 222.6 64.4307 cv
222.6 64.4307 li
222.6 68.3907 219.36 71.6307 215.4 71.7507 cv
211.32 71.7507 208.08 68.5107 208.08 64.4307 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.08 64.4307 mo
208.08 60.4707 211.2 57.2307 215.28 57.2307 cv
219.24 57.1107 222.6 60.3507 222.6 64.4307 cv
222.6 64.4307 li
222.6 68.3907 219.36 71.6307 215.4 71.7507 cv
211.32 71.7507 208.08 68.5107 208.08 64.4307 cv
.75021 .679683 .670222 .90164 cmyk
@
208.32 104.871 mo
208.32 100.791 211.56 97.5507 215.52 97.5507 cv
219.6 97.4307 222.84 100.671 222.84 104.751 cv
222.84 104.751 li
222.84 108.711 219.6 111.951 215.64 112.071 cv
211.68 112.071 208.32 108.831 208.32 104.871 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.32 104.871 mo
208.32 100.791 211.56 97.5507 215.52 97.5507 cv
219.6 97.4307 222.84 100.671 222.84 104.751 cv
222.84 104.751 li
222.84 108.711 219.6 111.951 215.64 112.071 cv
211.68 112.071 208.32 108.831 208.32 104.871 cv
.75021 .679683 .670222 .90164 cmyk
@
207.96 45.1107 mo
207.84 41.1507 211.08 37.7906 215.16 37.7906 cv
219.12 37.7906 222.36 41.0307 222.48 44.9907 cv
222.48 44.9907 li
222.48 49.0707 219.24 52.3107 215.28 52.3107 cv
211.2 52.3107 207.96 49.1907 207.96 45.1107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
207.96 45.1107 mo
207.84 41.1507 211.08 37.7907 215.16 37.7907 cv
219.12 37.7907 222.36 41.0307 222.48 44.9907 cv
222.48 44.9907 li
222.48 49.0707 219.24 52.3107 215.28 52.3107 cv
211.2 52.3107 207.96 49.1907 207.96 45.1107 cv
.75021 .679683 .670222 .90164 cmyk
@
208.44 124.191 mo
208.44 120.111 211.68 116.871 215.64 116.871 cv
219.72 116.871 222.96 120.111 222.96 124.071 cv
222.96 124.071 li
222.96 128.031 219.84 131.391 215.76 131.391 cv
211.8 131.391 208.44 128.151 208.44 124.191 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
208.44 124.191 mo
208.44 120.111 211.68 116.871 215.64 116.871 cv
219.72 116.871 222.96 120.111 222.96 124.071 cv
222.96 124.071 li
222.96 128.031 219.84 131.391 215.76 131.391 cv
211.8 131.391 208.44 128.151 208.44 124.191 cv
.75021 .679683 .670222 .90164 cmyk
@
207.96 45.1107 mo
204.36 45.1107 201.48 54.2307 201.6 65.3907 cv
201.72 76.0707 204.6 84.7107 208.2 84.7107 cv
208.2 84.7107 li
@
208.08 64.4307 mo
204.48 64.5507 201.72 73.5507 201.72 84.7107 cv
201.84 95.8707 204.72 104.871 208.32 104.871 cv
208.32 104.871 li
@
208.2 84.7107 mo
204.6 84.7107 201.84 95.5107 201.96 108.951 cv
201.96 117.351 204.96 124.191 208.44 124.191 cv
208.44 124.191 li
@
207.96 45.1107 mo
202.56 45.1107 198.36 59.2707 198.48 76.6707 cv
198.6 92.2707 203.04 104.871 208.32 104.871 cv
208.32 104.871 li
@
208.08 64.4307 mo
202.68 64.5507 198.48 79.3107 198.6 97.6707 cv
198.72 112.311 203.16 124.191 208.44 124.191 cv
208.44 124.191 li
@
177.96 84.7107 mo
177.96 80.6307 181.2 77.3907 185.16 77.3907 cv
189.24 77.2707 192.48 80.5107 192.48 84.5907 cv
192.48 84.5907 li
192.48 88.5507 189.36 91.7906 185.28 91.9107 cv
181.32 91.9107 178.08 88.6707 177.96 84.7107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
177.96 84.7107 mo
177.96 80.6307 181.2 77.3907 185.16 77.3907 cv
189.24 77.2707 192.48 80.5107 192.48 84.5907 cv
192.48 84.5907 li
192.48 88.5507 189.36 91.7907 185.28 91.9107 cv
181.32 91.9107 178.08 88.6707 177.96 84.7107 cv
.75021 .679683 .670222 .90164 cmyk
@
177.84 64.4307 mo
177.84 60.4707 181.08 57.2307 185.04 57.2307 cv
189.12 57.1107 192.36 60.3507 192.36 64.4307 cv
192.36 64.4307 li
192.36 68.3907 189.12 71.6307 185.16 71.7507 cv
181.2 71.7507 177.84 68.5107 177.84 64.4307 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
177.84 64.4307 mo
177.84 60.4707 181.08 57.2307 185.04 57.2307 cv
189.12 57.1107 192.36 60.3507 192.36 64.4307 cv
192.36 64.4307 li
192.36 68.3907 189.12 71.6307 185.16 71.7507 cv
181.2 71.7507 177.84 68.5107 177.84 64.4307 cv
.75021 .679683 .670222 .90164 cmyk
@
178.08 104.871 mo
178.08 100.791 181.32 97.5507 185.4 97.5507 cv
189.36 97.4307 192.6 100.671 192.6 104.751 cv
192.6 104.751 li
192.72 108.711 189.48 111.951 185.4 112.071 cv
181.44 112.071 178.2 108.831 178.08 104.871 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
178.08 104.871 mo
178.08 100.791 181.32 97.5507 185.4 97.5507 cv
189.36 97.4307 192.6 100.671 192.6 104.751 cv
192.6 104.751 li
192.72 108.711 189.48 111.951 185.4 112.071 cv
181.44 112.071 178.2 108.831 178.08 104.871 cv
.75021 .679683 .670222 .90164 cmyk
@
177.72 45.1107 mo
177.72 41.1507 180.96 37.7906 184.92 37.7906 cv
188.88 37.7906 192.24 41.0307 192.24 44.9907 cv
192.24 44.9907 li
192.24 49.0707 189 52.3107 185.04 52.3107 cv
180.96 52.3107 177.72 49.1907 177.72 45.1107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
177.72 45.1107 mo
177.72 41.1507 180.96 37.7907 184.92 37.7907 cv
188.88 37.7907 192.24 41.0307 192.24 44.9907 cv
192.24 44.9907 li
192.24 49.0707 189 52.3107 185.04 52.3107 cv
180.96 52.3107 177.72 49.1907 177.72 45.1107 cv
.75021 .679683 .670222 .90164 cmyk
@
178.32 124.191 mo
178.2 120.111 181.44 116.871 185.52 116.871 cv
189.48 116.871 192.72 120.111 192.84 124.071 cv
192.84 124.071 li
192.84 128.031 189.6 131.391 185.52 131.391 cv
181.56 131.391 178.32 128.151 178.32 124.191 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
178.32 124.191 mo
178.2 120.111 181.44 116.871 185.52 116.871 cv
189.48 116.871 192.72 120.111 192.84 124.071 cv
192.84 124.071 li
192.84 128.031 189.6 131.391 185.52 131.391 cv
181.56 131.391 178.32 128.151 178.32 124.191 cv
.75021 .679683 .670222 .90164 cmyk
@
177.72 45.1107 mo
174.12 45.1107 171.36 54.2307 171.36 65.3907 cv
171.48 76.0707 174.48 84.7107 177.96 84.7107 cv
177.96 84.7107 li
@
177.84 64.4307 mo
174.24 64.5507 171.48 73.5507 171.6 84.7107 cv
171.6 95.8707 174.6 104.871 178.08 104.871 cv
178.08 104.871 li
@
177.96 84.7107 mo
174.48 84.7107 171.6 95.5107 171.72 108.951 cv
171.72 117.351 174.72 124.191 178.32 124.191 cv
178.32 124.191 li
@
177.72 45.1107 mo
172.32 45.1107 168.12 59.2707 168.24 76.6707 cv
168.36 92.2707 172.8 104.871 178.08 104.871 cv
178.08 104.871 li
@
177.84 64.4307 mo
172.56 64.5507 168.24 79.3107 168.36 97.6707 cv
168.48 112.311 172.92 124.191 178.32 124.191 cv
178.32 124.191 li
@
149.64 84.7107 mo
149.64 80.6307 152.88 77.3907 156.84 77.3907 cv
160.92 77.2707 164.16 80.5107 164.16 84.5907 cv
164.16 84.5907 li
164.16 88.5507 160.92 91.7906 156.96 91.9107 cv
153 91.9107 149.64 88.6707 149.64 84.7107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
149.64 84.7107 mo
149.64 80.6307 152.88 77.3907 156.84 77.3907 cv
160.92 77.2707 164.16 80.5107 164.16 84.5907 cv
164.16 84.5907 li
164.16 88.5507 160.92 91.7907 156.96 91.9107 cv
153 91.9107 149.64 88.6707 149.64 84.7107 cv
.75021 .679683 .670222 .90164 cmyk
@
149.52 64.4307 mo
149.52 60.4707 152.76 57.2307 156.72 57.2307 cv
160.68 57.1107 164.04 60.3507 164.04 64.4307 cv
164.04 64.4307 li
164.04 68.3907 160.8 71.6307 156.84 71.7507 cv
152.76 71.7507 149.52 68.5107 149.52 64.4307 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
149.52 64.4307 mo
149.52 60.4707 152.76 57.2307 156.72 57.2307 cv
160.68 57.1107 164.04 60.3507 164.04 64.4307 cv
164.04 64.4307 li
164.04 68.3907 160.8 71.6307 156.84 71.7507 cv
152.76 71.7507 149.52 68.5107 149.52 64.4307 cv
.75021 .679683 .670222 .90164 cmyk
@
149.76 104.871 mo
149.76 100.791 153 97.5507 156.96 97.5507 cv
161.04 97.4307 164.28 100.671 164.28 104.751 cv
164.28 104.751 li
164.28 108.711 161.16 111.951 157.08 112.071 cv
153.12 112.071 149.88 108.831 149.76 104.871 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
149.76 104.871 mo
149.76 100.791 153 97.5507 156.96 97.5507 cv
161.04 97.4307 164.28 100.671 164.28 104.751 cv
164.28 104.751 li
164.28 108.711 161.16 111.951 157.08 112.071 cv
153.12 112.071 149.88 108.831 149.76 104.871 cv
.75021 .679683 .670222 .90164 cmyk
@
149.4 45.1107 mo
149.4 41.1507 152.52 37.7906 156.6 37.7906 cv
160.56 37.7906 163.92 41.0307 163.92 44.9907 cv
163.92 44.9907 li
163.92 49.0707 160.68 52.3107 156.72 52.3107 cv
152.64 52.3107 149.4 49.1907 149.4 45.1107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
149.4 45.1107 mo
149.4 41.1507 152.52 37.7907 156.6 37.7907 cv
160.56 37.7907 163.92 41.0307 163.92 44.9907 cv
163.92 44.9907 li
163.92 49.0707 160.68 52.3107 156.72 52.3107 cv
152.64 52.3107 149.4 49.1907 149.4 45.1107 cv
.75021 .679683 .670222 .90164 cmyk
@
149.88 124.191 mo
149.88 120.111 153.12 116.871 157.08 116.871 cv
161.16 116.871 164.4 120.111 164.4 124.071 cv
164.4 124.071 li
164.52 128.031 161.28 131.391 157.2 131.391 cv
153.24 131.391 150 128.151 149.88 124.191 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
149.88 124.191 mo
149.88 120.111 153.12 116.871 157.08 116.871 cv
161.16 116.871 164.4 120.111 164.4 124.071 cv
164.4 124.071 li
164.52 128.031 161.28 131.391 157.2 131.391 cv
153.24 131.391 150 128.151 149.88 124.191 cv
.75021 .679683 .670222 .90164 cmyk
@
149.4 45.1107 mo
145.8 45.1107 143.04 54.2307 143.04 65.3907 cv
143.16 76.0707 146.04 84.7107 149.64 84.7107 cv
149.64 84.7107 li
@
149.52 64.4307 mo
145.92 64.5507 143.16 73.5507 143.16 84.7107 cv
143.28 95.8707 146.28 104.871 149.76 104.871 cv
149.76 104.871 li
@
149.64 84.7107 mo
146.04 84.7107 143.28 95.5107 143.4 108.951 cv
143.4 117.351 146.4 124.191 149.88 124.191 cv
149.88 124.191 li
@
149.4 45.1107 mo
144 45.1107 139.8 59.2707 139.92 76.6707 cv
140.04 92.2707 144.48 104.871 149.76 104.871 cv
149.76 104.871 li
@
149.52 64.4307 mo
144.12 64.5507 139.92 79.3107 140.04 97.6707 cv
140.16 112.311 144.6 124.191 149.88 124.191 cv
149.88 124.191 li
@
121.32 84.7107 mo
121.32 80.6307 124.56 77.3907 128.52 77.3907 cv
132.48 77.2707 135.84 80.5107 135.84 84.5907 cv
135.84 84.5907 li
135.84 88.5507 132.6 91.7906 128.64 91.9107 cv
124.56 91.9107 121.32 88.6707 121.32 84.7107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
121.32 84.7107 mo
121.32 80.6307 124.56 77.3907 128.52 77.3907 cv
132.48 77.2707 135.84 80.5107 135.84 84.5907 cv
135.84 84.5907 li
135.84 88.5507 132.6 91.7907 128.64 91.9107 cv
124.56 91.9107 121.32 88.6707 121.32 84.7107 cv
.75021 .679683 .670222 .90164 cmyk
@
121.2 64.4307 mo
121.2 60.4707 124.32 57.2307 128.4 57.2307 cv
132.36 57.1107 135.6 60.3507 135.72 64.4307 cv
135.72 64.4307 li
135.72 68.3907 132.48 71.6307 128.52 71.7507 cv
124.44 71.7507 121.2 68.5107 121.2 64.4307 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
121.2 64.4307 mo
121.2 60.4707 124.32 57.2307 128.4 57.2307 cv
132.36 57.1107 135.6 60.3507 135.72 64.4307 cv
135.72 64.4307 li
135.72 68.3907 132.48 71.6307 128.52 71.7507 cv
124.44 71.7507 121.2 68.5107 121.2 64.4307 cv
.75021 .679683 .670222 .90164 cmyk
@
121.44 104.871 mo
121.44 100.791 124.68 97.5507 128.64 97.5507 cv
132.72 97.4307 135.96 100.671 135.96 104.751 cv
135.96 104.751 li
135.96 108.711 132.72 111.951 128.76 112.071 cv
124.8 112.071 121.44 108.831 121.44 104.871 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
121.44 104.871 mo
121.44 100.791 124.68 97.5507 128.64 97.5507 cv
132.72 97.4307 135.96 100.671 135.96 104.751 cv
135.96 104.751 li
135.96 108.711 132.72 111.951 128.76 112.071 cv
124.8 112.071 121.44 108.831 121.44 104.871 cv
.75021 .679683 .670222 .90164 cmyk
@
121.08 45.1107 mo
120.96 41.1507 124.2 37.7906 128.28 37.7906 cv
132.24 37.7906 135.48 41.0307 135.6 44.9907 cv
135.6 44.9907 li
135.6 49.0707 132.36 52.3107 128.4 52.3107 cv
124.32 52.3107 121.08 49.1907 121.08 45.1107 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
121.08 45.1107 mo
120.96 41.1507 124.2 37.7907 128.28 37.7907 cv
132.24 37.7907 135.48 41.0307 135.6 44.9907 cv
135.6 44.9907 li
135.6 49.0707 132.36 52.3107 128.4 52.3107 cv
124.32 52.3107 121.08 49.1907 121.08 45.1107 cv
.75021 .679683 .670222 .90164 cmyk
@
121.56 124.191 mo
121.56 120.111 124.8 116.871 128.76 116.871 cv
132.84 116.871 136.08 120.111 136.08 124.071 cv
136.08 124.071 li
136.08 128.031 132.96 131.391 128.88 131.391 cv
124.92 131.391 121.56 128.151 121.56 124.191 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
121.56 124.191 mo
121.56 120.111 124.8 116.871 128.76 116.871 cv
132.84 116.871 136.08 120.111 136.08 124.071 cv
136.08 124.071 li
136.08 128.031 132.96 131.391 128.88 131.391 cv
124.92 131.391 121.56 128.151 121.56 124.191 cv
.75021 .679683 .670222 .90164 cmyk
@
121.08 45.1107 mo
117.48 45.1107 114.6 54.2307 114.72 65.3907 cv
114.84 76.0707 117.72 84.7107 121.32 84.7107 cv
121.32 84.7107 li
@
121.2 64.4307 mo
117.6 64.5507 114.72 73.5507 114.84 84.7107 cv
114.96 95.8707 117.84 104.871 121.44 104.871 cv
121.44 104.871 li
@
121.32 84.7107 mo
117.72 84.7107 114.96 95.5107 115.08 108.951 cv
115.08 117.351 118.08 124.191 121.56 124.191 cv
121.56 124.191 li
@
121.08 45.1107 mo
115.68 45.1107 111.48 59.2707 111.6 76.6707 cv
111.72 92.2707 116.16 104.871 121.44 104.871 cv
121.44 104.871 li
@
121.2 64.4307 mo
115.8 64.5507 111.6 79.3107 111.72 97.6707 cv
111.84 112.311 116.28 124.191 121.56 124.191 cv
121.56 124.191 li
@
130.44 142.671 mo
130.44 166.791 li
@
158.76 142.671 mo
158.76 166.791 li
@
184.32 142.671 mo
184.32 166.791 li
@
215.52 142.671 mo
215.52 166.791 li
@
243.84 142.671 mo
243.84 166.791 li
@
184.32 142.671 mo
130.44 166.791 li
158.76 143.391 li
@
243.84 143.391 mo
130.44 166.071 li
215.52 143.391 li
@
130.44 143.391 mo
158.16 166.791 li
184.32 142.671 li
@
159.36 165.711 mo
214.44 143.751 li
@
158.76 166.791 mo
243.84 144.351 li
@
184.32 166.791 mo
158.76 143.991 li
@
184.32 166.791 mo
242.64 144.711 li
215.52 166.551 li
@
215.52 166.791 mo
184.32 142.671 li
@
215.52 166.551 mo
158.76 144.351 li
@
214.08 166.791 mo
131.16 144.111 li
@
131.28 144.111 mo
184.32 166.791 li
@
243.84 166.791 mo
215.52 142.671 li
@
242.88 166.071 mo
184.32 142.671 li
@
242.64 166.791 mo
158.28 143.871 li
@
243.84 166.551 mo
129.24 142.671 li
@
247.56 234.471 mo
253.56 228.591 li
253.8 228.351 254.16 228.351 254.4 228.591 cv
254.64 228.831 254.64 229.191 254.4 229.431 cv
248.4 235.311 li
248.16 235.551 247.8 235.551 247.56 235.311 cv
247.32 235.071 247.32 234.711 247.56 234.471 cv
cp
257.76 224.271 mo
263.76 218.391 li
264 218.151 264.36 218.151 264.6 218.391 cv
264.84 218.631 264.84 218.991 264.6 219.231 cv
258.6 225.111 li
258.36 225.351 258 225.351 257.76 225.111 cv
257.52 224.871 257.52 224.511 257.76 224.271 cv
cp
267.96 214.071 mo
273.96 208.191 li
274.08 207.951 274.56 207.951 274.8 208.191 cv
275.04 208.431 275.04 208.791 274.8 209.031 cv
268.8 214.911 li
268.56 215.151 268.2 215.151 267.96 214.911 cv
267.72 214.791 267.72 214.311 267.96 214.071 cv
cp
f
244.08 275.031 mo
252.48 275.031 li
252.84 275.031 253.08 275.391 253.08 275.631 cv
253.08 275.991 252.84 276.231 252.48 276.231 cv
244.08 276.231 li
243.84 276.231 243.48 275.991 243.48 275.631 cv
243.48 275.391 243.84 275.031 244.08 275.031 cv
cp
258.48 275.031 mo
266.88 275.031 li
267.24 275.031 267.48 275.391 267.48 275.631 cv
267.48 275.991 267.24 276.231 266.88 276.231 cv
258.48 276.231 li
258.24 276.231 257.88 275.991 257.88 275.631 cv
257.88 275.391 258.24 275.031 258.48 275.031 cv
cp
272.88 275.031 mo
281.28 275.031 li
281.64 275.031 281.88 275.391 281.88 275.631 cv
281.88 275.991 281.64 276.231 281.28 276.231 cv
272.88 276.231 li
272.64 276.231 272.28 275.991 272.28 275.631 cv
272.28 275.391 272.64 275.031 272.88 275.031 cv
cp
f
%ADOBeginSubsetFont: EBWAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /EBWAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b63767420e0c29c09000000bc0000051c6670
676d1560f55c000005d80000091a676c7966b8104b16000041b80000220e
68656164eaba77ed00000ef400000036686865615f04ac0b00000f2c0000
0024686d7478440b386100000f50000000706c6f6361a1c8000000000fc0
000000746d61787025263d1100001034000000206e616d65222caf120000
105400000d5370726570624595a100001da8000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d0000000100000005bae14106557f
5f0f3cf50019080000000000bbeb7ccc00000000cf7409dbfbfafd8b09ec
07b6000000090002000100000000000100000600fe0001c40aa0fbfafaa0
09ec00010000000000000000000000000000001c040e000003ad00470434
00940434009903fb005d02ca0099043400990438005a0434006001cf0000
04a10023045a00ac03e6000f043400990362005a032100510434009902ae
002105b80035050c005b03d5005c01c4008b03c40035040e0048040e00ae
040e0072040e0067040e00300000000000000142000002e6000004060000
053400000676000007680000088a000009a600000ad400000ad400000bf0
00000d5c00000e2a00000f320000104a000011d600001308000014000000
15b0000016fe0000185c000018ae00001a8800001bee00001d5c00001e9c
000020840000220e00010000001c0120001000c3000700020010002f0065
000011902410000400010000002d02220000000300000000006400000000
000300000001000e00640000000300000002000e00720000000300000003
002400800000000300000004000e00640000000300000005001800a40000
000300000006000e00640000000300000007007600bc0000000300000008
002a000e000000030000000900200132000000030000000a02a001520000
00030000000b005603f2000000030000000c002a0448000000030000000d
02980472000000030000000e006c070a0001000000000000003207760001
000000000001000707a80001000000000002000707af0001000000000003
001207b60001000000000004000707a80001000000000005000c07c80001
000000000006000707a80001000000000007003b07d40001000000000008
0015077d00010000000000090010080f000100000000000a0150081f0001
00000000000b002b096f000100000000000c0015099a000100000000000d
014c09af000100000000000e00360afb0003000104090000006400000003
000104090001000e00640003000104090002000e00720003000104090003
002400800003000104090004000e00640003000104090005001800a40003
000104090006000e00640003000104090007007600bc0003000104090008
002a000e000300010409000900200132000300010409000a02a001520003
00010409000b005603f2000300010409000c002a0448000300010409000d
02980472000300010409000e006c070a00a9002000320030003100340020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690052006500670075006c00610072004d00690063
0072006f0073006f00660074003a002000430061006c0069006200720069
00560065007200730069006f006e00200035002e0037003300430061006c
006900620072006900200069007300200061002000740072006100640065
006d00610072006b0020006f006600200074006800650020004d00690063
0072006f0073006f00660074002000670072006f007500700020006f0066
00200063006f006d00700061006e006900650073002e004c007500630028
006100730029002000640065002000470072006f006f007400430061006c
0069006200720069002000690073002000610020006d006f006400650072
006e002000730061006e0073002000730065007200690066002000660061
006d0069006c00790020007700690074006800200073007500620074006c
006500200072006f0075006e00640069006e006700730020006f006e0020
007300740065006d007300200061006e006400200063006f0072006e0065
00720073002e002000490074002000660065006100740075007200650073
0020007200650061006c0020006900740061006c006900630073002c0020
0073006d0061006c006c00200063006100700073002c00200061006e0064
0020006d0075006c007400690070006c00650020006e0075006d00650072
0061006c00200073006500740073002e0020004900740073002000700072
006f0070006f007200740069006f006e007300200061006c006c006f0077
0020006800690067006800200069006d007000610063007400200069006e
002000740069006700680074006c007900200073006500740020006c0069
006e006500730020006f0066002000620069006700200061006e00640020
0073006d0061006c006c0020007400650078007400200061006c0069006b
0065002e002000430061006c0069006200720069002700730020006d0061
006e0079002000630075007200760065007300200061006e006400200074
006800650020006e00650077002000720061007300740065007200690073
006500720020007400650061006d00200075007000200069006e00200062
00690067006700650072002000730069007a0065007300200074006f0020
00720065007600650061006c002000610020007700610072006d00200061
006e006400200073006f0066007400200063006800610072006100630074
00650072002e0068007400740070003a002f002f007700770077002e006d
006900630072006f0073006f00660074002e0063006f006d002f00740079
0070006f006700720061007000680079002f006300740066006f006e0074
00730068007400740070003a002f002f0066006f006e0074006600610062
00720069006b002e0063006f006d0059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200061
00730020007000650072006d006900740074006500640020006200790020
007400680065002000450055004c004100200066006f0072002000740068
0065002000700072006f006400750063007400200069006e002000770068
0069006300680020007400680069007300200066006f006e007400200069
007300200069006e0063006c007500640065006400200074006f00200064
006900730070006c0061007900200061006e00640020007000720069006e
007400200063006f006e00740065006e0074002e00200059006f00750020
006d006100790020006f006e006c0079002000280069002900200065006d
0062006500640020007400680069007300200066006f006e007400200069
006e00200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
0065006d00620065006400640069006e0067002000720065007300740072
0069006300740069006f006e007300200069006e0063006c007500640065
006400200069006e0020007400680069007300200066006f006e0074003b
00200061006e006400200028006900690029002000740065006d0070006f
0072006100720069006c007900200064006f0077006e006c006f00610064
0020007400680069007300200066006f006e007400200074006f00200061
0020007000720069006e0074006500720020006f00720020006f00740068
006500720020006f00750074007000750074002000640065007600690063
006500200074006f002000680065006c00700020007000720069006e0074
00200063006f006e00740065006e0074002e0068007400740070003a002f
002f007700770077002e006d006900630072006f0073006f00660074002e
0063006f006d002f007400790070006f006700720061007000680079002f
0066006f006e00740073002f00640065006600610075006c0074002e0061
007300700078a92032303134204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e43616c69
627269526567756c61724d6963726f736f66743a2043616c696272695665
7273696f6e20352e373343616c6962726920697320612074726164656d61
726b206f6620746865204d6963726f736f66742067726f7570206f662063
6f6d70616e6965732e4c7563286173292064652047726f6f7443616c6962
72692069732061206d6f6465726e2073616e732073657269662066616d69
6c79207769746820737562746c6520726f756e64696e6773206f6e207374
656d7320616e6420636f726e6572732e2049742066656174757265732072
65616c206974616c6963732c20736d616c6c20636170732c20616e64206d
756c7469706c65206e756d6572616c20736574732e204974732070726f70
6f7274696f6e7320616c6c6f77206869676820696d7061637420696e2074
696768746c7920736574206c696e6573206f662062696720616e6420736d
616c6c207465787420616c696b652e2043616c696272692773206d616e79
2063757276657320616e6420746865206e65772072617374657269736572
207465616d20757020696e206269676765722073697a657320746f207265
7665616c2061207761726d20616e6420736f667420636861726163746572
2e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f
6772617068792f6374666f6e7473687474703a2f2f666f6e746661627269
6b2e636f6d596f75206d617920757365207468697320666f6e7420617320
7065726d6974746564206279207468652045554c4120666f722074686520
70726f6475637420696e207768696368207468697320666f6e7420697320
696e636c7564656420746f20646973706c617920616e64207072696e7420
636f6e74656e742e20596f75206d6179206f6e6c792028692920656d6265
64207468697320666f6e7420696e20636f6e74656e74206173207065726d
69747465642062792074686520656d62656464696e672072657374726963
74696f6e7320696e636c7564656420696e207468697320666f6e743b2061
6e6420286969292074656d706f726172696c7920646f776e6c6f61642074
68697320666f6e7420746f2061207072696e746572206f72206f74686572
206f75747075742064657669636520746f2068656c70207072696e742063
6f6e74656e742e687474703a2f2f7777772e6d6963726f736f66742e636f
6d2f7479706f6772617068792f666f6e74732f64656661756c742e617370
7800b2090320b80284b40918014a20b80283b40918014a20b80282b40918
014a20b80281b40918014a20b80280b40918014a20b8027fb40918014a20
b8027eb40918014a20b8027db40918014a20b8027cb40918014a20b8027b
b40918014a20b8027ab40918014a20b80279b40918014a20b80278b40918
014a20b80277b40918014a20b80276b40918014a20b80275b40918014a20
b80274b40918014a20b80273b40918014a20b80271b40918014a20b80270
b40918014a20b8026fb40918014a20b8026eb40918014a20b8026db40918
014a20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20
b80269b40918014a20b80268b40918014a20b80267b40918014a20b80266
b40918014a20b80265b40918014a20b80264b40918014a20b80263b40918
014a20b80262b40918014a20b80261b40918014a20b80260b40918014a20
b8025fb40918014a20b8025eb40918014a20b8025db40918014a20b8025c
b40918014a20b8025bb40918014a20b8025ab40918014a20b80259b40918
014a20b80258b40918014a20b80257b40918014a20b80256b40918014a20
b80255b40918014a20b80254b40918014a20b80253b40918014a20b80252
b40918014a20b80251b40918014a20b80250b40918014a20b8024fb40918
014a20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20
b8024bb40918014a20b8024ab40918014a20b80249b40918014a20b80248
b40918014a20b80247b40918014a20b80246b40918014a20b80245b40918
014a20b80244b40918014a20b80243b40918014a20b80242b40918014a20
b80241b40918014a20b80240b40918014a20b8023fb40918014a20b8023e
b40918014a20b8023db40918014a20b8023cb40918014a20b8023bb40918
014a20b8023ab40918014a20b80239b40918014a20b80238b40918014a20
b80237b40918014a20b80236b40918014a20b80235b40918014a20b80234
b40918014a20b80233b40918014a20b80232b40918014a20b80231b40918
014a20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20
b8022db40918014a20b8022cb40918014a20b8022bb40918014a20b8022a
b40918014a20b80229b40918014a20b80228b40918014a20b80227b40918
014a20b80226b40918014a20b80225b40918014a20b80224b40918014a20
b80223b40918014a20b80222b40918014a20b80221b40918014a20b80220
b40918014a20b8021fb40918014a20b8021eb40918014a20b8021db40918
014a20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20
b80219b40918014a20b80218b40918014a20b80217b40918014a20b80216
b40918014a20b80215b40918014a20b80214b40918014a20b80213b40918
014a20b80212b40918014a20b80211b40918014a20b80210b40918014a20
b8020fb40918014a20b8020eb40918014a20b8020db40918014a20b8020c
b40918014a20b8020bb40918014a20b8020ab40918014a20b80209b40918
014a20b80208b40918014a20b80207b40918014a20b80206b40918014a20
b80205b40918014a20b80204b40918014a20b80203b40918014a20b80202
b40918014a20b80201b40918014a20b80200b40918014a20b801ffb40918
014a20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20
b801fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8
b40918014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918
014a20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20
b801f1b40918014a20b801f0b40918014a20b801efb40918014a20b801ee
b40918014a20b801edb40918014a20b801ecb40918014a20b801ebb40918
014a20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20
b801e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4
b40918014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918
014a20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20
b801ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801da
b40918014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918
014a20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20
b801d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0
b40918014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918
014a20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20
b801c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6
b40918014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918
014a20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20
b801bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bc
b40918014a20b801bbb40918014a20b801bab40918014a20b801b9b40918
014a20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20
b801b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2
b40918014a20b801b1b40918014a20b801b0b40918014a20b801afb40918
014a20b801aeb40918014a20b801adb40918014a20b801acb40918014a20
b801abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8
b40918014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918
014a20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20
b801a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019e
b40918014a20b8019db40918014a20b8019cb40918014a20b8019bb40918
014a20b8019ab40918014a20b80199b40918014a20b80198b40918014a20
b80197b40918014a20b80196b40918014a20b80195b40918014a20b80194
b40918014a20b80193b40918014a20b80192b40918014a20b80191b40918
014a20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20
b8018db40918014a20b8018cb40918014a20b8018bb40918014a20b8018a
b40918014a20b80189b40918014a20b80188b40918014a20b80187b40918
014a20b80186b40918014a20b80185b40918014a20b80184b40918014a20
b80183b40918014a20b80182b40918014a20b80181b40918014a20b80180
b40918014a20b8017fb40918014a20b8017eb40918014a20b8017db40918
014a20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20
b80179b40918014a20b80178b40918014a20b80177b40918014a20b80176
b40918014a20b80175b40918014a20b80174b40918014a20b80173b40918
014a20b80172b40918014a20b80171b40918014a20b80170b40918014a20
b8016fb40918014a20b8016eb40918014a20b8016db40918014a20b8016c
b40918014a20b8016bb40918014a20b8016ab40918014a20b80169b40918
014a20b80168b40918014a20b80167b40918014a20b80166b40918014a20
b80165b40918014a20b80164b40918014a20b80163b40918014a20b80162
b40918014a20b80161b40918014a20b80160b40918014a20b8015fb40918
014a20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20
b8015bb40918014a20b8015ab40918014a20b80159b40918014a20b80158
b40918014a20b80157b40918014a20b80156b40918014a20b80155b40918
014a20b80154b40918014a20b80153b40918014a20b80152b40918014a20
b80150b40918014a20b8014fb40918014a20b8014eb40918014a20b8014c
b40918014a20b8014bb40918014a20b8014ab40918014a20b80149b40918
014a20b80148b40918014a20b80147b40918014a20b80146b40918014a20
b80145b40918014a20b80144b40918014a20b80143b30918014ab80284b2
1e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e
1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8
027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277
b21d431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d
431fb80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421f
b8026eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb802
6ab21c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b2
1c441fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c45
1fb80261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8
025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259
b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c
451fb80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451f
b80250b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb802
4cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b2
1b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c
1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8
023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023b
b21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b
4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1f
b80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb802
2eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab2
1b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b49
1fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb8
0221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021d
b21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a
4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1f
b80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb802
10b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb2
1a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f
1fb80207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb8
0203b219501fb80202b219511fb80201b219511fb80200b219511fb801ff
b219511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219
511fb801fab219501fb801f9b219511fb801f8b219511fb801f7b219511f
b801f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801
f2b218541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb2
18541fb801edb218541fb801ecb218531fb801ebb218531fb801eab21854
1fb801e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb8
01e5b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1
b218541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218
541fb801dcb218541fb801dbb218541fb801dab218531fb801d9b218541f
b801d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801
d4b217571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b2
17561fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb21757
1fb801cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb8
01c7b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3
b217561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217
561fb801beb217561fb801bdb217571fb801bcb217571fb801bbb217571f
b801bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801
b6b217571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2
165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b
1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb8
01a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5
b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b216
5b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1f
b8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb801
98b2163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2
163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b
1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8
018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187
b2165b1fb80186b215611fb80185b215621fb80184b215621fb80183b215
661fb80182b215661fb80181b215551fb80180b215451fb8017fb215361f
b8017eb215361fb8017db215611fb8017cb215621fb8017bb215621fb801
7ab215641fb80179b215661fb80178b215661fb80177b215661fb80176b2
15661fb80175b215661fb80174b215661fb80173b215451fb80172b21562
1fb80171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8
016db215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169
b215621fb80168b215621fb80167b215611fb80166b215641fb80165b215
641fb80164b215661fb80163b215661fb80162b215661fb80161b215661f
b80160b215661fb8015fb215661fb8015eb215551fb8015db215451fb801
5cb215451fb8015bb215361fb8015ab215611fb80159b215621fb80158b2
15621fb80157b215631fb80156b215641fb80155b215661fb80154b21566
1fb80153b215661fb80152b215661fb80151b214401fb80150b214551fb8
014fb214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014b
b214401fb8014ab214411fb80149b214401fb80148b214401fb80147b214
411fb80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801f
b80142b212461fb80141b212461fb80140b212461fb8013fb212461fb801
3eb212441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2
115b1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a
1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb8
0131b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012d
b211591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b211
5b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561f
b80124b211561fb80123b211571fb80122b211581fb80121b211591fb801
20b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2
115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e
1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb8
0113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010f
b2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb210
5e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1f
b80106b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb801
02b2105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f
641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641f
f50f641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f
641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641f
e60e671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e
681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1f
d70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d
2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1f
c80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d
311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c
741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741f
b20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b
7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1f
a30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b
791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f
940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0a
a51f8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d55
7eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a
557955775578ab7755ba028600660285403c5576ab755504751475747503
f47501ab750144750130750102007510752075030c7455725573ab725500
7250728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc040
7c720d104671556f5570ab6f556e666d556a03251f6938675568ab675566
38645565ab645563386255613860555f385d555eab5d555c385a555bab5a
55593858555703251f5638545555ab54555338515552ab51554f384e554e
03251f4d384b554cab4b554a38485549ab4855473846554503381f001c10
1c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb0
1bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf1802
4018292c460f17cf17df17ef1704134017292e460016101620160315b8ff
c0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326
460f15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f
0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d
020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f
0b4f0b02400b3f4346400b2d30460003012001010001100120010308b8ff
c0b301151f46b80100b316010501b80190b154532b2b4bb80800524bb008
505bb00188b02553b00188b040515ab00688b000555a5b58b101018e59b1
01024354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d59
4bb0805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b74
5e732b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e73
2b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f737373
73742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff0284006402830064
028200640281006402800064027f0064027e0064027d0064027c0064027b
0064027a0064027900640278006402770064027600640275006402740064
027300640271006402700064026f0064026e0064026d0064026c0064026b
0064026a0064026900640268006402670064026600640265006402640064
02630064026200640261006402600064025f0064025e0064025d0064025c
0064025b0064025a00640259006402580064025700640256006402550064
0254006402530064025200640251006402500064024f0064024e0064024d
0064024c0064024b0064024a006402490064024800640247006402460064
024500640244006402430064024200640241006402400064023f0064023e
0064023d0064023c0064023b0064023a0064023900640238006402370064
02360064023500640234006402330064023200640231006402300064022f
0064022e0064022d0064022c0064022b0064022a00640229006402280064
022700640226006402250064022400640223006402220064022100640220
0064021f0064021e0064021d0064021c0064021b0064021a006402190064
021800640217006402160064021500640214006402130064021200640211
006402100064020f0064020e0064020d0064020c0064020b0064020a0064
0209006402080064020700640206006402050064020441ff006402030064
02020064020100640200006401ff006401fe006401fd006401fc006401fb
006401fa006401f9006401f8006401f7006401f6006401f5006401f40064
01f3006401f2006401f1006401f0006401ef006401ee006401ed006401ec
006401eb006401ea006401e9006401e8006401e7006401e6006401e50064
01e4006401e3006401e2006401e1006401e0006401df006401de006401dd
006401dc006401db006401da006401d9006401d8006401d7006401d60064
01d5006401d4006401d3006401d2006401d1006401d0006401cf006401ce
006401cd006401cc006401cb006401ca006401c9006401c8006401c70064
01c6006401c5006401c4006401c3006401c2006401c1006401c0006401bf
006401be006401bd006401bc006401bb006401ba006401b9006401b80064
01b7006401b6006401b5006401b4006401b3006401b2006401b1006401b0
006401af006401ae006401ad006401ac006401ab006401aa006401a90064
01a8006401a7006401a6006401a5006401a4006401a3006401a2006401a1
006401a00064019f0064019e0064019d0064019c0064019b0064019a0064
019900640198006401970064019600640195006401940064019300640192
00640191006401900064018f0064018e0064018d0064018c0064018b0064
018a00640189006401880064018700640186006401850064418001840064
01830064018200640181006401800064017f0064017e0064017d0064017c
0064017b0064017a00640179006401780064017700640176006401750064
0174006401730064017200640171006401700064016f0064016e0064016d
0064016c0064016b0064016a006401690064016800640167006401660064
016500640164006401630064016200640161006401600064015f0064015e
0064015d0064015c0064015b0064015a0064015900640158006401570064
015600640155006401540064015300640152006401500064014f0064014e
0064014c0064014b0064014a006401490064014800640147006401460064
0145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[8719 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 322 1 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>EBWAAA+Calibri AddT42Char 
1 742 2 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>EBWAAA+Calibri AddT42Char 
1 1030 3 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>EBWAAA+Calibri AddT42Char 
1 1332 4 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>EBWAAA+Calibri AddT42Char 
1 1654 5 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>EBWAAA+Calibri AddT42Char 
1 1896 6 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>EBWAAA+Calibri AddT42Char 
1 2186 7 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>EBWAAA+Calibri AddT42Char 
1 2470 8 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>EBWAAA+Calibri AddT42Char 

1 0 9 <> EBWAAA+Calibri AddT42Char 
1 2772 10 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>EBWAAA+Calibri AddT42Char 
1 3056 11 <000300ac00000401050e001e002b003800c8401a1f1810014d1f100f014d
1f100d014d1f180c014d1f200b014d1fb8022e40281a154010014d15400f
014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c200b014d
2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0b30f014d
33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b80210400d
a00bc00b020b1a27f431310724b80109b2105134b8010bb10754003fed3f
ed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b12392f2b2b39
e12b2b2b2b2b313001140e0423212226351134363321321e0215140e0207
1e0301342e0223231133323e0213342e0223231133323e0204011f384f63
7149feae17292917012674946332162b412a355c4528fefd1a385a4ab2c4
435236194e25476b51cefa3b58432601733d67523e2a151f270482271f2c
547a4d2e544738120a35526e02012f4c351cfe5d233b4ffddd3a583c1ffe
381c3752>EBWAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>EBWAAA+Calibri AddT42Char 
EBWAAA+Calibri /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
/g8 8 def
/g9 9 def
/g10 10 def
/g11 11 def
end
EBWAAA+Calibri /Encoding get
dup 32 /g1 put
dup 33 /g2 put
dup 34 /g3 put
dup 35 /g4 put
dup 36 /g5 put
dup 37 /g6 put
dup 38 /g7 put
dup 39 /g8 put
dup 40 /g9 put
dup 41 /g10 put
dup 42 /g11 put
pop
end
%ADOEndSubsetFont
/FFGDNE+Calibri /EBWAAA+Calibri findfont ct_VMDictPut
/FFGDNE+Calibri*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 213{/.notdef}rp]
FFGDNE+Calibri nf
FFGDNE+Calibri*1 [12 0 0 -12 0 0 ]msf
283.44 271.917 mo
( !"#$%&'#\(\))
[5.508 6.29993 6.29993 5.97601 4.11658 6.35999 6.32391 6.29993 5.97601 2.71198 0 ]xsh
362.532 271.437 mo
( !"#$%&'#\(*)
[5.508 6.37225 6.29993 5.97601 4.18799 6.21643 6.32391 6.29993 5.97601 2.71198 0 ]xsh
333.12 170.031 mo
367.2 170.151 li
367.2 170.631 li
333.12 170.511 li
333.12 170.031 li
cp
.519554 .434363 .434363 .0791638 cmyk
ef
333.12 170.031 mo
367.2 170.151 li
367.2 170.631 li
333.12 170.511 li
333.12 170.031 li
cp
.75021 .679683 .670222 .90164 cmyk
@
305.16 161.871 mo
324.12 161.871 li
324.12 176.031 li
305.16 176.031 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.16 176.031 mo
324.12 176.031 li
324.12 161.871 li
305.16 161.871 li
305.16 176.031 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: ZUNBAA+#cb#ce#cc#e5 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUNBAA+#cb#ce#cc#e5 gcheck setglobal} if
1 584 3 <0002000c0002007300b1000b001700674034a505a907b501b505b807c501
c505ca07ca0b09490b491349175413860286048808a40108340134053b07
3b0b4501450549070700410c01180012010100060118000c01050009010e
00150003010eb5300f500f020f2f5deddded003ffd3ffd3130015d5d5d37
2206151416333236353426072226353436333216151406400e13130e0f11
1010161e1d17161d1da92b24262a2a26242ba72e2a27302e29292f00>ZUNBAA+#cb#ce#cc#e5 AddT42Char 
ZUNBAA+#cb#ce#cc#e5 /CharStrings get begin
/g3 3 def
end
ZUNBAA+#cb#ce#cc#e5 /Encoding get
dup 34 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFGDND+#cb#ce#cc#e5*1 
[32{/.notdef}rp /g1 /g2 /g3 221{/.notdef}rp]
FFGDND+#cb#ce#cc#e5 nf
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
312.603 171.227 mo
(")sh
305.16 181.671 mo
324.12 181.671 li
324.12 195.831 li
305.16 195.831 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.16 195.831 mo
324.12 195.831 li
324.12 181.671 li
305.16 181.671 li
305.16 195.831 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: ZUNBAA+#cb#ce#cc#e5 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUNBAA+#cb#ce#cc#e5 gcheck setglobal} if
1 762 4 <0001001d0004006600b20016003db72316321645160311410c0118001200
0001010005000801180007010400050001010db70812300c700c020c2f5d
c4c4fdc4003ffd3c3fd4fd3130015d371514163b011523353332363d0134
262b013533323637490a090a49090a09050512090c0f04b2980808060608
0879040506080800>ZUNBAA+#cb#ce#cc#e5 AddT42Char 
ZUNBAA+#cb#ce#cc#e5 /CharStrings get begin
/g4 4 def
end
ZUNBAA+#cb#ce#cc#e5 /Encoding get
dup 35 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFGDND+#cb#ce#cc#e5*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 220{/.notdef}rp]
FFGDND+#cb#ce#cc#e5 nf
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
312.603 191.15 mo
(#)sh
305.16 201.471 mo
324.12 201.471 li
324.12 215.751 li
305.16 215.751 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.16 215.751 mo
324.12 215.751 li
324.12 201.471 li
305.16 201.471 li
305.16 215.751 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: ZUNBAA+#cb#ce#cc#e5 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUNBAA+#cb#ce#cc#e5 gcheck setglobal} if
1 890 5 <0001000d0004007000b1002800954028e811012b1024136b027c028a029d
029e059910ae02a611b111b714c111d211e0110f182622120c03ba011800
12010140211f230f1b1f1b2f1b3f1b4f1b5f1b6f1b7f1b8f1b9f1baf1bbf
1b0cff1b011b1c22b80104b5182615232000b8010eb2152309b80110400a
0f1b0f231023302303232f5dccd4fd10dcedd411123939003ffd5d7139dc
3fedcc111239393130015d005d3734262322061514161514062322263534
36333216151406070e010733323637330723353e01373e015d10100c1107
050506071e1118170b0c1d1f033b090c0206065d05171311108512130d0a
06080405050708151618120c180b1c23060e0e2b0d091c13111e>ZUNBAA+#cb#ce#cc#e5 AddT42Char 
ZUNBAA+#cb#ce#cc#e5 /CharStrings get begin
/g5 5 def
end
ZUNBAA+#cb#ce#cc#e5 /Encoding get
dup 36 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFGDND+#cb#ce#cc#e5*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 219{/.notdef}rp]
FFGDND+#cb#ce#cc#e5 nf
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
312.603 210.953 mo
($)sh
305.16 221.391 mo
324.12 221.391 li
324.12 235.551 li
305.16 235.551 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.16 235.551 mo
324.12 235.551 li
324.12 221.391 li
305.16 221.391 li
305.16 235.551 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: ZUNBAA+#cb#ce#cc#e5 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUNBAA+#cb#ce#cc#e5 gcheck setglobal} if
1 1156 6 <0001000f0002007000b10036008e402683018314891d9530aa1db430d616
d335e314ea2c0a2e042e2d202f6c136c1e73027c1e073419b80118400920
180118182e03281fbf0118002e010100090012011800030105b534181800
061cbb010e00310015010eb2000625bb010f002b000c0110b51006300602
062f5dedd4ed10dcedd4fd1112392f39003feddc3feddc1112392f5ded39
3130015d005d371406232226353436333216151406151416333236353426
23353236353426232206151416151406232226353436333216151406071e
01701c19121a08040605040f091212131a14130f10071004040504071a11
14180f10161032131d140d060909030507030608151612160713110e1507
08080403050606080f13190e0f1505081a00>ZUNBAA+#cb#ce#cc#e5 AddT42Char 
ZUNBAA+#cb#ce#cc#e5 /CharStrings get begin
/g6 6 def
end
ZUNBAA+#cb#ce#cc#e5 /Encoding get
dup 37 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFGDND+#cb#ce#cc#e5*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 218{/.notdef}rp]
FFGDND+#cb#ce#cc#e5 nf
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
312.603 230.747 mo
(%)sh
305.16 241.191 mo
324.12 241.191 li
324.12 255.351 li
305.16 255.351 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.16 255.351 mo
324.12 255.351 li
324.12 241.191 li
305.16 241.191 li
305.16 255.351 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: ZUNBAA+#cb#ce#cc#e5 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZUNBAA+#cb#ce#cc#e5 gcheck setglobal} if
1 1444 7 <000200090004007700b10014001800003714163b011523353332363d0123
35373315331523270733355c080709420b080743490a1b1b11393a170706
060606072105747306605a5a>ZUNBAA+#cb#ce#cc#e5 AddT42Char 
ZUNBAA+#cb#ce#cc#e5 /CharStrings get begin
/g7 7 def
end
ZUNBAA+#cb#ce#cc#e5 /Encoding get
dup 38 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFGDND+#cb#ce#cc#e5*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
217{/.notdef}rp]
FFGDND+#cb#ce#cc#e5 nf
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
312.603 250.67 mo
(&)sh
314.64 176.031 mo
314.64 181.671 li
@
314.64 195.831 mo
314.64 201.471 li
@
314.64 215.751 mo
314.64 221.391 li
@
314.64 235.551 mo
314.64 241.191 li
@
305.16 168.951 mo
299.52 168.951 294.84 187.311 294.84 209.991 cv
294.84 231.111 299.52 248.271 305.16 248.271 cv
305.16 248.271 li
@
383.64 161.871 mo
402.48 161.871 li
402.48 176.031 li
383.64 176.031 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
383.64 176.031 mo
402.48 176.031 li
402.48 161.871 li
383.64 161.871 li
383.64 176.031 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
391.09 171.227 mo
(")sh
383.64 181.671 mo
402.48 181.671 li
402.48 195.831 li
383.64 195.831 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
383.64 195.831 mo
402.48 195.831 li
402.48 181.671 li
383.64 181.671 li
383.64 195.831 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
391.09 191.15 mo
($)sh
383.64 201.471 mo
402.48 201.471 li
402.48 215.751 li
383.64 215.751 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
383.64 215.751 mo
402.48 215.751 li
402.48 201.471 li
383.64 201.471 li
383.64 215.751 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
391.09 210.953 mo
(&)sh
383.64 221.391 mo
402.48 221.391 li
402.48 235.551 li
383.64 235.551 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
383.64 235.551 mo
402.48 235.551 li
402.48 221.391 li
383.64 221.391 li
383.64 235.551 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
391.09 230.747 mo
(#)sh
383.64 241.191 mo
402.48 241.191 li
402.48 255.351 li
383.64 255.351 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
383.64 255.351 mo
402.48 255.351 li
402.48 241.191 li
383.64 241.191 li
383.64 255.351 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
391.09 250.67 mo
(%)sh
393.12 176.031 mo
393.12 181.671 li
@
393.12 195.831 mo
393.12 201.471 li
@
393.12 215.751 mo
393.12 221.391 li
@
393.12 235.551 mo
393.12 241.191 li
@
383.64 168.951 mo
377.88 168.951 373.2 187.311 373.2 209.991 cv
373.2 231.111 377.88 248.271 383.64 248.271 cv
383.64 248.271 li
@
368.52 37.1907 mo
387.36 37.1907 li
387.36 51.3507 li
368.52 51.3507 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
387.36 51.3507 mo
368.52 51.3507 li
368.52 37.1907 li
387.36 37.1907 li
387.36 51.3507 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
375.966 46.5509 mo
(")sh
368.52 56.9907 mo
387.36 56.9907 li
387.36 71.1507 li
368.52 71.1507 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
387.36 71.1507 mo
368.52 71.1507 li
368.52 56.9907 li
387.36 56.9907 li
387.36 71.1507 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
375.966 66.3534 mo
(#)sh
368.52 76.7906 mo
387.36 76.7906 li
387.36 90.9507 li
368.52 90.9507 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
387.36 90.9507 mo
368.52 90.9507 li
368.52 76.7907 li
387.36 76.7907 li
387.36 90.9507 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
375.966 86.2686 mo
($)sh
368.52 96.7107 mo
387.36 96.7107 li
387.36 110.871 li
368.52 110.871 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
387.36 110.871 mo
368.52 110.871 li
368.52 96.7107 li
387.36 96.7107 li
387.36 110.871 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
375.966 106.071 mo
(%)sh
368.52 116.511 mo
387.36 116.511 li
387.36 130.671 li
368.52 130.671 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
387.36 130.671 mo
368.52 130.671 li
368.52 116.511 li
387.36 116.511 li
387.36 130.671 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
375.966 125.874 mo
(&)sh
317.88 116.631 mo
318 110.991 li
@
318.24 96.7107 mo
318.36 91.0707 li
@
318.6 76.9107 mo
318.72 71.2707 li
@
318.96 57.1107 mo
318.96 51.4707 li
@
311.64 123.591 mo
305.88 123.471 301.56 104.991 301.92 82.3107 cv
302.28 61.1907 307.2 44.1507 312.96 44.2707 cv
312.96 44.2707 li
@
309.24 38.5107 mo
328.08 38.5107 li
328.08 52.6707 li
309.24 52.6707 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
328.08 52.6707 mo
309.24 52.6707 li
309.24 38.5107 li
328.08 38.5107 li
328.08 52.6707 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
316.688 47.9901 mo
(")sh
309.24 58.4307 mo
328.08 58.4307 li
328.08 72.5907 li
309.24 72.5907 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
328.08 72.5907 mo
309.24 72.5907 li
309.24 58.4307 li
328.08 58.4307 li
328.08 72.5907 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
316.688 67.7926 mo
(#)sh
309.24 78.2307 mo
328.08 78.2307 li
328.08 92.3907 li
309.24 92.3907 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
328.08 92.3907 mo
309.24 92.3907 li
309.24 78.2307 li
328.08 78.2307 li
328.08 92.3907 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
316.688 87.7077 mo
($)sh
309.24 98.0307 mo
328.08 98.0307 li
328.08 112.191 li
309.24 112.191 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
328.08 112.191 mo
309.24 112.191 li
309.24 98.0307 li
328.08 98.0307 li
328.08 112.191 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
316.688 107.51 mo
(%)sh
309.24 117.951 mo
328.08 117.951 li
328.08 132.111 li
309.24 132.111 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
328.08 132.111 mo
309.24 132.111 li
309.24 117.951 li
328.08 117.951 li
328.08 132.111 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FFGDND+#cb#ce#cc#e5*1 [8.04 0 0 -8.04 0 0 ]msf
316.688 127.313 mo
(&)sh
387.36 123.111 mo
391.56 123.111 394.92 115.671 394.92 106.311 cv
394.92 95.2707 391.56 86.2707 387.36 86.2707 cv
387.36 86.2707 li
@
387.36 105.231 mo
391.56 105.231 394.92 96.8307 394.92 86.2707 cv
394.92 74.7507 391.56 65.2707 387.36 65.2707 cv
387.36 65.2707 li
@
387.84 86.3907 mo
391.68 86.3907 394.92 76.9107 394.92 65.2707 cv
394.92 53.6307 391.56 44.2707 387.36 44.2707 cv
387.36 44.2707 li
@
387.36 123.591 mo
395.4 123.591 402 109.311 402 91.5507 cv
402 77.3907 396 65.7507 388.56 65.5107 cv
@
388.2 105.111 mo
395.76 105.111 402 92.0307 402 75.8307 cv
402 58.4307 395.64 44.3907 387.84 44.2707 cv
@
%ADOBeginSubsetFont: EBWAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EBWAAA+Calibri gcheck setglobal} if
1 3420 12 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>EBWAAA+Calibri AddT42Char 
1 3626 13 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>EBWAAA+Calibri AddT42Char 
1 3890 14 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>EBWAAA+Calibri AddT42Char 
1 4170 15 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>EBWAAA+Calibri AddT42Char 
1 4566 16 <00020099ffed03d50571002a003d0085b53f3f010a2136b8fff6b30c014d
36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36b801f840
1b152b120c014d2b200d014d2b180b014d2b1810014d2b100f014d2bb802
0a400900150a363521040530b80105b6264a1b46104c39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b323931305d01
140e0223222e022715140e0223222e023511343e0233321e0215113e0333
321e0207342e0223220e020711161633323e0203d53363905d2b49464627
08121b15141c12060713201819201208284b484828628b5728ae15345640
203e404527447c433e58371901e775bb844611263a296e080c070404070c
080538080c080404080c08fde5293823104e83b0754582643d122a4232fe
9953573c637b>EBWAAA+Calibri AddT42Char 
1 4872 17 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>EBWAAA+Calibri AddT42Char 
1 5120 18 <00010035fffa058403bc004500deb90047ffc0403d0f014d38080c014d29
380137080c014d252e01262101262001261f01261e01261d01271c012804
012903013a3b013b3a013b2d013c2c01102015014d10b8ffe0b310014d10
b8ffe0400a0d014d10200c014d100fb8ffe0b310014d0fb8ffe0400c0d01
4d0f200c014d0f414910b8ffe040200f014d3f104f106f107f1004104012
164810334925493a902c012c200f014d2cb8ffc04010131648672c772c02
452c012c174c094c003f3fd55d5d2b2b5dc43f3fcd2b5d2b3f012f2b2b2b
2f2b2b2b2b3130005d5d5d5d015d5d5d5d5d5d5d5d5d2b5d2b2b01140607
010e0323222e0227032707030e0323222e022701262635343e0233321e02
17131737133e0333321e0217131737133e0333321e0205840405fef7030d
17281e1f2a190c03bd0202af030d1a291e1f27190c03fef9050408132017
1c22120803d90202c70209121f19181f120802d70201d6020913211a181d
1107039f07140ffca90b0e080304080e0a028d0909fd730b0e080304080e
0a03570f1407090b070203070d09fd1a090902e6090d070303070c08fd18
090902e6090d070302080a00>EBWAAA+Calibri AddT42Char 
1 5552 19 <0001005bffee04780520003f00a2401d1c1c0f181810014d18100f014d18
100d014d180a0c014d18100b014d18b80211400d00bf2701202740276027
03270fb8ffe8b310014d0fb8fff0b30f014d0fb8ffecb30d014d0fb8ffee
b30c014d0fb8ffe8b30b014d0fb80232b42f34013418b8010ab42222392f
3ebb010a0005000a0129b2395314b8012cb12f56003fed3ffdd4ed111239
2fed012f5de12b2b2b2b2bd45d5dc4e12b2b2b2b2b12392f313001140e02
23222e0223220e0215141e02333236371121222635343e023321321e0215
11140e0423222e0235343e0233321e04047804080c070c385e835a6baa76
3f457aa9653c7b35fed4111104090c09019b0b16120a123a5c62643196ec
a3565da9ed904a8265451a0a045e131d1308262e264e8abe6f7cc084441d
1d01792224131b110808101c12fe131a261d22180c5dacf0949afab0611a
23291a22>EBWAAA+Calibri AddT42Char 
1 5886 20 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>EBWAAA+Calibri AddT42Char 
1 6236 21 <0001008b03660139057500150009b2051047003fcd313001140e0223222e
023503343e0233321e02070122070f181212190e07170a15211718211509
010386080c080404080c0801cf080c080403090c0800>EBWAAA+Calibri AddT42Char 
1 6318 22 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>EBWAAA+Calibri AddT42Char 
1 6792 23 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>EBWAAA+Calibri AddT42Char 
1 7150 24 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>EBWAAA+Calibri AddT42Char 
1 7516 25 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>EBWAAA+Calibri AddT42Char 
1 7836 26 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>EBWAAA+Calibri AddT42Char 
1 8324 27 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>EBWAAA+Calibri AddT42Char 
EBWAAA+Calibri /CharStrings get begin
/g12 12 def
/g13 13 def
/g14 14 def
/g15 15 def
/g16 16 def
/g17 17 def
/g18 18 def
/g19 19 def
/g20 20 def
/g21 21 def
/g22 22 def
/g23 23 def
/g24 24 def
/g25 25 def
/g26 26 def
/g27 27 def
end
EBWAAA+Calibri /Encoding get
dup 43 /g12 put
dup 44 /g13 put
dup 45 /g14 put
dup 46 /g15 put
dup 47 /g16 put
dup 48 /g17 put
dup 49 /g18 put
dup 50 /g19 put
dup 51 /g20 put
dup 52 /g21 put
dup 53 /g22 put
dup 54 /g23 put
dup 55 /g24 put
dup 56 /g25 put
dup 57 /g26 put
dup 58 /g27 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FFGDNE+Calibri*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 197{/.notdef}rp]
FFGDNE+Calibri nf
FFGDNE+Calibri*1 [12 0 0 -12 0 0 ]msf
278.4 143.997 mo
(+,#\(-&$$#."&%'#%-#\(/#01##%\()
[5.84399 6.29993 5.97601 2.71198 5.07605 6.32391 4.18799 4.18799 5.97601 4.69208 6.29993 6.32391 
6.29993 6.36145 5.88007 6.35999 5.07605 5.97601 2.6283 6.35999 5.97601 4.02008 8.57996 5.90442 
5.97601 6.38416 0 ]xsh
326.652 158.397 mo
(2)sh
FFGDNE+Calibri*1 [8.04 0 0 -8.04 0 0 ]msf
334.207 158.387 mo
(3)sh
FFGDNE+Calibri*1 [12 0 0 -12 0 0 ]msf
340.692 158.397 mo
(3%'\(2)
[5.74805 6.37225 6.29993 2.71198 0 ]xsh
FFGDNE+Calibri*1 [8.04 0 0 -8.04 0 0 ]msf
369.366 158.387 mo
(3)sh
FFGDNE+Calibri*1 [12 0 0 -12 0 0 ]msf
373.212 158.397 mo
(4)sh
156.96 299.757 mo
( !/5$3",\()
[5.40015 6.35999 6.35999 5.65192 4.06824 5.74805 6.37225 6.29993 0 ]xsh
205.92 299.757 mo
(6)sh
156.96 16.3167 mo
( !/5$3",\()
[5.40015 6.35999 6.35999 5.65192 4.06824 5.74805 6.37225 6.29993 0 ]xsh
205.92 16.3167 mo
(7)sh
FFGDNE+Calibri*1 [9.96 0 0 -9.96 0 0 ]msf
121.203 140.75 mo
(-)sh
125.526 140.75 mo
(6)sh
151.442 140.75 mo
(-)sh
155.645 140.75 mo
(7)sh
179.768 140.75 mo
(-)sh
184.081 140.75 mo
(8)sh
209.16 140.75 mo
(-)sh
213.363 140.75 mo
(9)sh
240.723 140.75 mo
(-)sh
244.926 140.75 mo
(:)sh
121.203 175.67 mo
(-)sh
125.526 175.67 mo
(6)sh
151.442 175.67 mo
(-)sh
155.645 175.67 mo
(7)sh
179.768 175.67 mo
(-)sh
184.081 175.67 mo
(8)sh
209.16 175.67 mo
(-)sh
213.363 175.67 mo
(9)sh
240.723 175.67 mo
(-)sh
244.926 175.67 mo
(:)sh
264.01 264.473 mo
($)sh
267.486 264.473 mo
(:)sh
264.01 245.151 mo
($)sh
267.486 245.151 mo
(9)sh
264.01 226.914 mo
($)sh
267.486 226.914 mo
(8)sh
264.01 208.069 mo
($)sh
267.486 208.069 mo
(7)sh
264.01 187.791 mo
($)sh
267.486 187.791 mo
(6)sh
264.01 125.631 mo
($)sh
267.486 125.631 mo
(:)sh
264.01 106.189 mo
($)sh
267.486 106.189 mo
(9)sh
264.01 88.0714 mo
($)sh
267.486 88.0714 mo
(8)sh
264.01 69.2271 mo
($)sh
267.486 69.2271 mo
(7)sh
264.01 48.9485 mo
($)sh
267.486 48.9485 mo
(6)sh
340.08 47.0307 mo
357.24 47.0307 li
@
334.56 47.0307 mo
342 43.3107 li
340.8 45.7107 340.8 48.4707 342 50.7507 cv
334.56 47.0307 li
cp
ef
362.88 47.0307 mo
355.44 50.7507 li
356.52 48.4707 356.52 45.7107 355.44 43.3107 cv
362.88 47.0307 li
cp
ef
337.56 91.4307 mo
356.88 121.551 li
@
334.56 86.7507 mo
341.64 90.9507 li
339 91.3107 336.72 92.7507 335.4 95.0307 cv
334.56 86.7507 li
cp
ef
359.88 126.351 mo
352.8 122.151 li
355.32 121.791 357.72 120.351 359.04 118.071 cv
359.88 126.351 li
cp
ef
338.88 67.5507 mo
358.44 83.2707 li
@
334.56 64.0707 mo
342.6 65.7507 li
340.2 66.9507 338.52 69.1107 338.04 71.6307 cv
334.56 64.0707 li
cp
ef
362.88 86.7507 mo
354.72 84.9507 li
357.12 83.8707 358.8 81.7107 359.4 79.1907 cv
362.88 86.7507 li
cp
ef
339.12 123.231 mo
358.2 109.791 li
@
334.56 126.471 mo
338.52 119.151 li
338.88 121.671 340.44 123.951 342.72 125.151 cv
334.56 126.471 li
cp
ef
362.88 106.551 mo
358.92 113.871 li
358.56 111.351 356.88 109.071 354.6 107.751 cv
362.88 106.551 li
cp
ef
337.8 104.871 mo
357.36 68.9907 li
@
335.16 109.791 mo
335.4 101.511 li
336.96 103.671 339.36 104.991 342 105.111 cv
335.16 109.791 li
cp
ef
360 64.0707 mo
359.76 72.3507 li
358.2 70.1907 355.8 68.8707 353.16 68.8707 cv
360 64.0707 li
cp
ef
368.52 188.751 mo
334.56 211.431 li
@
334.56 188.751 mo
365.64 228.471 li
@
334.56 228.471 mo
368.52 251.151 li
@
334.56 251.631 mo
365.64 211.431 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FFGDNE+Calibri*1 uf
/FFGDNE+Calibri uf
/EBWAAA+Calibri uf
/FFGDND+#cb#ce#cc#e5*1 uf
/FFGDND+#cb#ce#cc#e5 uf
/ZUNBAA+#cb#ce#cc#e5 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
