%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Visio-Slimfly_between.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: leifei
%%CreationDate: 2018/6/26, 10:57:22
%%BoundingBox: 0 0 306 392
%%HiResBoundingBox: 0 0 305.2002 391.8111
%%CropBox: 0 0 305.2002 391.8111
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 922 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-06-26T10:52:56+08:00"
   xmp:CreatorTool=""
   xmp:ModifyDate="2018-06-26T10:52:56+08:00"
   pdf:Keywords=""
   pdf:Producer="福昕PDF打印机 版本 7.2.0.0424">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -391.811 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 391.811 li
305.2 391.811 li
305.2 0 li
cp
clp
[1 0 0 1 -154.891 0 ]ct
1.2 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
251.4 206.214 mo
193.92 180.534 li
193.92 206.094 li
false sop
.750179 .679652 .670191 .901488 cmyk
@
363.96 206.694 mo
193.92 180.534 li
307.32 206.094 li
@
193.92 180.534 mo
424.2 207.774 li
@
307.32 180.534 mo
193.92 206.094 li
251.4 180.654 li
@
424.2 182.214 mo
193.92 206.094 li
363.96 181.134 li
@
307.32 206.094 mo
251.4 180.654 li
251.4 206.214 li
@
424.2 207.774 mo
251.4 180.654 li
363.96 206.694 li
@
363.96 206.694 mo
307.32 180.534 li
307.32 206.094 li
@
307.32 180.534 mo
424.2 207.774 li
@
424.2 207.774 mo
363.96 181.134 li
363.96 206.694 li
424.2 182.214 li
@
308.4 205.614 mo
424.2 182.214 li
@
307.32 180.534 mo
251.4 206.214 li
424.2 182.214 li
@
307.32 206.094 mo
363.96 181.134 li
@
424.2 182.214 mo
424.2 207.774 li
@
189 190.614 mo
198.84 197.574 li
@
418.56 189.054 mo
428.52 196.014 li
@
174.36 200.934 mo
180.36 200.934 li
180.36 192.294 li
174.36 192.294 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 154.891 391.811 ]ct
[6 0 0 8.64 19.4686 190.877 ]ct
<<
/T 1
/W 50 
/H 72 
/M[50 0 0 -72 0 72 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
IK0@tp]9kK!!E9$"7SMT&-)[In36mps8V9O56-35s7c"I!<;s]s6r5Rs54.^n37$T^]XW+56q2g!WVXR
#Q=]'s6r5`qu?_Hn38#m!!#7Q59KY#!'fs;5PP3Y+7MKZn,NG1n39/,!!",15C_Sk!$C\pJ)C;,+7MLE
Ic(2++7MLEhuEa!n3?s2!!",15QAM!!$C\ps1eU7+7MMp^]4?Vn3?rg!!",15QAM!!$C\ps1eU7+7MMp
^]4?Vn3?rg!!",15QAM!!$C\ps1eU7+7MMp^]4?Vn3?rg!!",15QAM!!$C\ps53kW+7MLEhuEa!n3;E\
;?-\=n3;E\!!",15C_Sk!$C\p5O\XQ5O^m%n,NGQn39/4!!%N<59KY#!.XK&+8c*=s6r5`rW!!!n37H`
!!E8j56q5(&-),`"97k?s6r5RrVlrg561Z^*Ul8nJ,fQ+n36mps8S_\56)5orZCVo!!3,X+7MMo!!<3C
n3?jO![$nrr;Zm@n3?jO![$nrr;Zm@n3?jO![$nrr;Zm@n3?jO![$nrr;Zm@n3?jO![%2%r;Zm`r'1/\
!$D4?rVup?rr;rt!$D4?rVup?rr;rt!$D4?qZ$U\qZ$U\J,~>

%%EndBinary
grestore
np
f
437.88 200.934 mo
443.88 200.934 li
443.88 192.294 li
437.88 192.294 li
cp
gsave
clp
[1 0 0 -1 154.891 391.811 ]ct
[6 0 0 8.64 282.989 190.877 ]ct
<<
/T 1
/W 50 
/H 72 
/M[50 0 0 -72 0 72 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
IK0@tp]9kK!!E9$"7SMT&-)[In36mps8V9O56-35s7c"I!<;s]s6r5Rs54.^n37$T^]XW+56q2g!WVXR
#Q=]'s6r5`qu?_Hn38#m!!#7Q59KY#!'fs;5PP3Y+7MKZn,NG1n39/,!!",15C_Sk!$C\pJ)C;,+7MLE
Ic(2++7MLEhuEa!n3?s2!!",15QAM!!$C\ps1eU7+7MMp^]4?Vn3?rg!!",15QAM!!$C\ps1eU7+7MMp
^]4?Vn3?rg!!",15QAM!!$C\ps1eU7+7MMp^]4?Vn3?rg!!",15QAM!!$C\ps53kW+7MLEhuEa!n3;E\
;?-\=n3;E\!!",15C_Sk!$C\p5O\XQ5O^m%n,NGQn39/4!!%N<59KY#!.XK&+8c*=s6r5`rW!!!n37H`
!!E8j56q5(&-),`"97k?s6r5RrVlrg561Z^*Ul8nJ,fQ+n36mps8S_\56)5orZCVo!!3,X+7MMo!!<3C
n3?jO![$nrr;Zm@n3?jO![$nrr;Zm@n3?jO![$nrr;Zm@n3?jO![$nrr;Zm@n3?jO![%2%r;Zm`r'1/\
!$D4?rVup?rr;rt!$D4?rVup?rr;rt!$D4?qZ$U\qZ$U\J,~>

%%EndBinary
grestore
np
f
440.76 387.414 mo
448.56 387.414 454.92 381.054 454.92 373.254 cv
454.92 221.334 li
454.92 213.534 448.56 207.174 440.76 207.174 cv
175.8 207.174 li
168 207.174 161.64 213.534 161.64 221.334 cv
161.64 373.254 li
161.64 381.054 168 387.414 175.8 387.414 cv
440.76 387.414 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
.24 lw
440.76 387.414 mo
448.56 387.414 454.92 381.054 454.92 373.254 cv
454.92 221.334 li
454.92 213.534 448.56 207.174 440.76 207.174 cv
175.8 207.174 li
168 207.174 161.64 213.534 161.64 221.334 cv
161.64 373.254 li
161.64 381.054 168 387.414 175.8 387.414 cv
440.76 387.414 li
cp
.750179 .679652 .670191 .901488 cmyk
@
439.32 181.854 mo
447.24 181.854 453.6 175.494 453.6 167.694 cv
453.6 19.0142 li
453.6 11.2142 447.24 4.85425 439.32 4.85425 cv
172.92 4.85425 li
165.12 4.85425 158.76 11.2142 158.76 19.0142 cv
158.76 167.694 li
158.76 175.494 165.12 181.854 172.92 181.854 cv
439.32 181.854 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
439.32 181.854 mo
447.24 181.854 453.6 175.494 453.6 167.694 cv
453.6 19.0143 li
453.6 11.2142 447.24 4.85425 439.32 4.85425 cv
172.92 4.85425 li
165.12 4.85425 158.76 11.2142 158.76 19.0143 cv
158.76 167.694 li
158.76 175.494 165.12 181.854 172.92 181.854 cv
439.32 181.854 li
cp
.750179 .679652 .670191 .901488 cmyk
@
%ADOBeginSubsetFont: PBAAAA+Times#20New#20Roman#20Bold Initial
ct_T42Dict begin
-0.555 -0.305 2 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Times#20New#20Roman#20Bold
Type42DictBegin
[<00010000000b000b000b000b637674207de6eb89000000bc000008266670
676d636620fd000008e4000005f2676c7966bce8bb1b0000312000000a40
68656164761413e300000ed800000036686865612f09031200000f100000
0024686d7478da028d1c00000f34000000206c6f63610627000000000f54
000000246d6178707803410800000f78000000206e616d65c50d59130000
0f9800000e4270726570a13c7d2400001ddc000013416764697200000000
0000000000000000058e001f054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe0031300000124000001240000
00000000000000250084002400e8009600bf005d00cb02030045012e0058
00040118001900020139004b011000170005010a00280023004b00500015
004a00e5010d00af003100ea014600810125004f009c0022004e00160041
009100a00147ffe9008100d3016900ab001700a801400027004c0148ffdf
00510050ffb7012e0000003b0097009a010e001f004c010a0123ffde0022
0073008700ba00d600ff005a009805a0ffe900500052006effb7005c00d1
015a015bff1c0049006e007e009800a100bd00e4018801c00405ff600035
006200720107011301280382ffa8003805d809b5ffc4ffd00010006e00a1
00ba00ec022b0446ffee004000e80401ff680003001300330033006e00a2
00b600dc011801350343000e0034005c005d007c00af0328003b00480089
009c00ba017b01af030effa4001700370063007f00e0017801c0022105d8
05f0ff7a0012002700340052008a00a400c100c300eb011801460154036d
fe3fff4e00010008002b0045006e0084008600ae00af00c200c200c4010f
01210149017b01c101de01e1036e03e6006300a700ed00f600f801280169
017e023f02820532fd81ffb5002600350040004500490057006c00ac0126
0140015b017b019c0277027e027f03b603dc042804efff38ffc30006002f
0040008200aa00b600ce00d300d700e50146014d01d6027e03b30586ff7b
0012002f0068007f008400a500b900f501050109010c0114012001330137
0178017b01c001e1021d02230258036203af058cff79ff8d00210024005d
00650068006a0083008500b700cf00e200eb00ed011a0120012f0137013f
0150018d018f01c402cf0357035c03960440049604ab04c204fc051105c2
fed1fee00013002100240030004d004d005d0066007a007c00b800b800c3
00da0103011b011e012f013d014a0150015f0166017c0190019501a301a6
01b601c701d001e901ef01f90218028c029402bb02c502cf02d0031d032a
0344039f03cc042104da04fb0761fd1dfebffeefff0bff2bff33ff90ff9c
ffdbffed00010008001c0025003f0043005a006b0080008400900095009d
00a700b400cd00d500d600df00df00df00e400f000f600fb010601130119
011b012201230127012c013f015701580177018a019301a401c601e101e4
01fc0200020c02220222022a0236024a025c028202ec02fc030a03230341
0378039703d203fa04790532053205ab05b505f006e4072508ccfc9bfdde
fe00fe69fe96fe9bff3500030006000e00130019003400420048004a0057
006400710071007200760077007a007a0083009c00af00af00b200bb00c8
00cc00cf00cf00db00dc00df00e400e400e400e900eb00f400fd00fe0102
0105010501080108011b01220123013001370143015b0160016501780178
01780178017b0182018901980198019b019e01a101a601d101d201d301df
01e301f502000200022d02410247024a0250025b025d025d025f02630281
028b02b402b402ce02d602db02e202fa03100311031f0327034503670388
038a03b003b403d403d5042604410448046b04c704d1053205480549055f
0563058b05a105a305c205ca05e405ff069306a206b806e8070a07360750
0754078907a907bb07dc07ff08270120014d011b01290000000000000000
00000093015b042f029001ff02b800db00be027403cb029401ab00000000
0000000000000000058a038a0364005f02b803bd029d7c9003e203ac0282
0000044400000000003d010a00cc00bc00cc05d3041505e800c7021a00ee
00000194036102be029902180136033b048504cc0050007905a305a302df
020702af000001eb0064005f0055011900f2045600ef00c800cf058a0143
014602de01ab02c6024a005d00d800a402bb009900a00065013702740364
00b500fa009101b9032001b60025007f00d000ec00e00000000000000000
0000042ffd42023f06180276063a013701b90151ffc70229ffeb023f02e1
018500db03fa01900156014e012f00a600e300bb00d50134011f04fe041b
00d100e4011e009b00cd00e700b300e200ca042400b800f500b90334005a
04e00123012ffdc9fe440574038301f602410002001700500015004f0017
00a80051009800520049006e000e00af017b017b019c006a008300eb00cd
0122000005d306da009a008f00ba0315002503a5028002ff03c804200092
00e0034c009b007d00f8011c013400a8006d006900000420ffe6fea4006a
006a003800380162015a0044006d0048001eff6d00a600a600400040ff5c
ff990559052b00ce014c011500bf0140011800c800960509feed004800b4
009500db0048018b00b3fe6400c000ea01180125013203b003ed05760590
05aa05b405be05cd063100780084009b00cc00e200f4010a0120016300d1
00ea00f7010801420019002c00340041003800480058006c025903bd0043
011a007000d30028003700420050005a0064007300780082008c009c00a5
00bd00ce00f00110015c00be00d801020117012c016300ea01080041004b
0055005f007300a60109018301b300410064001e002a00eb00fa010e0138
0274002c00400082009600b600c000cc00dc00e600f000ff010a0120012c
013b01440156016300f70057006401100136005001b10000ffb60039004e
004403cc00e5002401100042012201a400f0006000e0000e001d003905e3
0102002cfe4eff38026903bd011600ff000e00a00054001b003d01710041
000f005000fd0015014f0035fe47003900ab0080005005a50016002b00ac
0115021504570555007300da005c00ce0072ff58019a0744000040425554
403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a2928272625242322
21201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b09051582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b5320
5c58b002855958b00185592d2c20b0032545b019234445b01a2344456523
4520b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a
40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b31940
201945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f
4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f4323
43650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003
252349b04060b0206320b000525823b002253823b002256538008a63381b
212121212159012d2c4bb06451584569b00943608a103a1b212121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20
b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3e
b02a2a2d2c352d2c76b8029f23701020b8029f4520b0005058b00161593a
2f182d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015
b00826b00826b00826b008260f10161345683ab001162d2cb40001000000
15b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b
515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53
234b515a58381b2121592d2c4b5458381b2121592d2cb0134358031b0259
2d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2cb01243
5c580cb00425b00425060c6423646164b807085158b00425b00425012046
b01060482046b0106048590a21211b2121592d2cb012435c580cb00425b0
0425060c6423646164b807085158b00425b00425012046b8fff060482046
b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d
2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a5838
1b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b21
21592d2c462346608a8a462320468a608a61b8ff8062232010238ab90327
03278a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b202020243604259b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b2021002436042595959592d2cb0024354584b
53234b515a58381b2121591b21212121592d00000001000000053333ef49
20ab5f0f3cf50819080000000000a2e3354600000000cf75613bfb89fd8c
10000835000100090001000100000000000100000721fe4500571000fb89
fadf10000001000000000000000000000000000000080639011c02aa0052
0400004a020000420400002f0400001102aa001904000087000000000000
006c00000108000002de00000360000006d6000008d00000096e00000a40
00010000000800f2003c008f000600020010002f00560000088b02c40005
00020000005303ea0000000300000000006a00000000000300000001001e
006a0000000300000002000801120000000300000003006c00e000000003
00000004002800f200000003000000050018014c0000000300000006002c
016400000003000000070076006a0000000300000008003000ae00000003
0000000900860190000000030000000d029a021600010000000000000035
04b00001000000000001000f04e500010000000000020004053900010000
00000003003605200001000000000004001405290001000000000005000c
05560001000000000006001605620001000000000007003b04e500010000
0000000800180507000100000000000900430578000100000000000d014d
05bb0003000104030002000e07280003000104030004002e070800030001
04050002000a07560003000104050004002a073600030001040600020006
07800003000104060004002607600003000104070002000807a600030001
04070004002807860003000104080002000c07ce0003000104080004002c
07ae0003000104090000006a00000003000104090001001e006a00030001
04090002000801120003000104090003006c00e000030001040900040028
00f200030001040900050018014c0003000104090006002c016400030001
040900070076006a0003000104090008003000ae00030001040900090086
0190000300010409000d029a021600030001040a0002000e07fa00030001
040a0004002e07da00030001040b00020012082800030001040b00040032
080800030001040c00020008085a00030001040c00040028083a00030001
040e00020010088c00030001040e00040030086c00030001041000020012
085a00030001041000040032083a0003000104130002000608bc00030001
041300040026089c0003000104140002000e08e20003000104140004002e
08c20003000104150002001409100003000104150004003408f000030001
04160002000e09440003000104160004002e092400030001041900020014
097200030001041900040034095200030001041b0002000a09a600030001
041b0004002a098600030001041d0002000607a600030001041d00040026
078600030001041f0002000a09d000030001041f0004002a09b000030001
04240002000c09fa0003000104240004002c09da00030001042a00020008
0a2600030001042a000400280a0600030001042d0002000a0a4e00030001
042d0004002a0a2e00030001080a0002000e07fa00030001080a0004002e
07da0003000108160002000e09440003000108160004002e092400030001
0c0a0002000e07fa000300010c0a0004002e07da000300010c0c00020008
085a000300010c0c00040028083a00a90020003200300031003400200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e002e00200041006c006c00200052
00690067006800740073002000520065007300650072007600650064002e
00540069006d006500730020004e0065007700200052006f006d0061006e
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e004d
006f006e006f0074007900700065003a00540069006d006500730020004e
0065007700200052006f006d0061006e00200042006f006c0064003a0056
0065007200730069006f006e00200035002e0031003100200028004d0069
00630072006f0073006f00660074002900560065007200730069006f006e
00200035002e0032003000540069006d00650073004e006500770052006f
006d0061006e00500053002d0042006f006c0064004d0054004d006f006e
006f00740079007000650020005400790070006500200044007200610077
0069006e00670020004f006600660069006300650020002d002000530074
0061006e006c006500790020004d006f007200690073006f006e002c0020
0056006900630074006f00720020004c0061007200640065006e00740020
00310039003300320059006f00750020006d006100790020007500730065
0020007400680069007300200066006f006e007400200061007300200070
00650072006d006900740074006500640020006200790020007400680065
002000450055004c004100200066006f0072002000740068006500200070
0072006f006400750063007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200069007300200069
006e0063006c007500640065006400200074006f00200064006900730070
006c0061007900200061006e00640020007000720069006e007400200063
006f006e00740065006e0074002e002000200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002ea9203230313420546865204d6f6e6f74
79706520436f72706f726174696f6e2e20416c6c20526967687473205265
7365727665642e54696d6573204e657720526f6d616e2069732061207472
6164656d61726b206f6620546865204d6f6e6f7479706520436f72706f72
6174696f6e2e4d6f6e6f747970653a54696d6573204e657720526f6d616e
20426f6c643a56657273696f6e20352e313120284d6963726f736f667429
56657273696f6e20352e323054696d65734e6577526f6d616e50532d426f
6c644d544d6f6e6f7479706520547970652044726177696e67204f666669
6365202d205374616e6c6579204d6f7269736f6e2c20566963746f72204c
617264656e742031393332596f75206d617920757365207468697320666f
6e74206173207065726d6974746564206279207468652045554c4120666f
72207468652070726f6475637420696e207768696368207468697320666f
6e7420697320696e636c7564656420746f20646973706c617920616e6420
7072696e7420636f6e74656e742e2020596f75206d6179206f6e6c792028
692920656d626564207468697320666f6e7420696e20636f6e74656e7420
6173207065726d69747465642062792074686520656d62656464696e6720
7265737472696374696f6e7320696e636c7564656420696e207468697320
666f6e743b20616e6420286969292074656d706f726172696c7920646f77
6e6c6f6164207468697320666f6e7420746f2061207072696e746572206f
72206f74686572206f75747075742064657669636520746f2068656c7020
7072696e7420636f6e74656e742e00540069006d006500730020004e0065
007700200052006f006d0061006e0020004e006500670072006500740061
00540069006d006500730020004e0065007700200052006f006d0061006e
002000740075010d006e00e900540069006d006500730020004e00650077
00200052006f006d0061006e002000660065006400540069006d00650073
0020004e0065007700200052006f006d0061006e00200046006500740074
00540069006d006500730020004e0065007700200052006f006d0061006e
0020038803bd03c403bf03bd03b100540069006d006500730020004e0065
007700200052006f006d0061006e0020004e006500670072006900740061
00540069006d006500730020004e0065007700200052006f006d0061006e
0020004c0069006800610076006f00690074007500540069006d00650073
0020004e0065007700200052006f006d0061006e00200047007200610073
0073006500740074006f00540069006d006500730020004e006500770020
0052006f006d0061006e0020004600e9006c006b00f6007600e900720054
0069006d006500730020004e0065007700200052006f006d0061006e0020
00560065007400540069006d006500730020004e0065007700200052006f
006d0061006e002000480061006c007600660065007400540069006d0065
00730020004e0065007700200052006f006d0061006e00200050006f0067
0072007500620069006f006e006100540069006d006500730020004e0065
007700200052006f006d0061006e0020004e00650067007200690074006f
00540069006d006500730020004e0065007700200052006f006d0061006e
0020041f043e043b0443043604380440043d044b043900540069006d0065
00730020004e0065007700200052006f006d0061006e002000540075010d
006e00e900540069006d006500730020004e0065007700200052006f006d
0061006e0020004b0061006c0131006e00540069006d006500730020004e
0065007700200052006f006d0061006e0020004b007200650070006b006f
00540069006d006500730020004e0065007700200052006f006d0061006e
0020011100e20323006d00540069006d006500730020004e006500770020
0052006f006d0061006e0020004c006f0064006900610000b15420b8040c
b30c0e3220b8040cb2131732b8040bb328201f0f41100412008004120002
000f0412003f0412005f04120003005f0412000100400412b2783340b804
12b2723340b80412b26e3340b80412b26a3340b80412b2543340bc041200
4a0033ffc00412b317183240b80412b30a0c3280b80412b308093240b804
11b25a33404109041100560033ffc0041100530033ffc00411b2503340b8
0411b24d3340bc041100470033ffc00411b344453240b80411b2423340bc
0411003e0033ffc00411b23a331f41240411002004110040041100700411
00af041100f004110006000f0411002f04110090041100ff04110004002f
041100400411007f0411008f041100a0041100e004110006ffc00411b208
330f411b0410008f04100002000f0410001f0410002f0410000300600409
000100b004090001000f0408003f0408004f0408009f04070004040ab200
6c1fb9ffc00403b345453240b80403b32b2e3240b80403b2282932b9ffc0
0403b21a1c32bd040302990027001fffc00401b2161b32b9ffc00400b242
4232b9ffc00400b2363832b9ffc00400b32a2d32df410a040000ef040000
02040004010028001fffc00401b3282e32f0bf0401000103fe000f010100
1fffc003fcb310143240b803fdb30f133240411003f9005003f9000200b0
03b100c003b10002006f03f5007f03f50002ffc003afb22d3132b9ffc003
afb30a0e3210411003ef002003ef008003ef000300a003ef0001002003ef
004003ef0002ffc003efb313163240b803e7b20f1132b9ffc003dfb23034
32b9ffc003dfb310183250411403dc000103c903d20023001f03e203d200
1e001f03c703d2001d001f03c603c8000d001fffc003a4b30f1032804110
03a3000103a303790029001f03a5037a0032001f03a8037e001b001fffc0
03d9b20e1132b9ffc003d9b2282a32410a03a7037c0032001f0373037100
34001f036c036bb2321f20bb03a40001004003ecb3090b3240b803ecb210
1532bd03e9036b0014001f03e4036bb2171f0fbd036e002f036e0002ffc0
03b8b3090d3290410c03b800a003b80002001f03d20001009f03d2000100
4003d2b2090b32410a03a903800016001f03cf03810015001f03aa0382b2
151fc0bb03f70001004003f6b3090d3240b803a2b2083340b803a2b30d0e
32c0410903a2000100b003f200c003f20002ffc003f4b326383200412603
8c0030038c0002002003e3003003e30002001003ee003003ee005003ee00
6f03ee007f03ee009f03ee0006000003ed003003ed0002002f03de007003
db009003db009f03de0004ffc00379b20f1032b9ffc00379b2242832b903
7d037cb2321f10bb037e0001ffc0037eb3090e3240b8037cb2121332b9ff
c0037cb30c0e323fbd03d7004f03d70002004003d8b31718326fbb038e00
0100400390b3181b3240b803d4b2090c32bd037b037a0032001fffc0037a
b20e1132bd038003820016001f03810382b2151fb0be03820001000f0383
0001004003ffb30c11327f411403540001006f0354008f035400d0035400
ef03540004000f0354002f0354005f0354000300400350b30e0f320fbb03
5a000100400349b20e331fbd0348007f03480002ffc00348b2152232b9ff
c00347b2152232b9ffc0040fb21b1e32beffc0040f002d01000032040e04
06b22f1f51bb034b0001034f034eb2641f40b80351b20e0f32b9ffc0034e
b3383a3230bb034e0001ffc0034eb21f2332b9ffc0034eb2131932b9ffc0
0346b2091132b9ffc00343b30a11320fbb03440001ffc0032bb2080e32b9
ffc0032bb2161b32b9ffc0032ab31417321f4110033a0001000f03330001
000003370020033700300337008003330004ffc00332b310123250416403
320001004003320060033200a0033200b003320004001003320030033200
50033200e003320004000f0336007f033600ff033600030070033600f003
360002000f0331003f0331008f033100bf033100e003310005000f033100
6003310002008f03300001006003300090033000020050032f0001001003
2f0040032f0060032f0080032f00a0032f00c0032f00f0032f000700cf03
2d00ff032d00020030032d0080032d00b0032d00df032d0004006f032c00
7f032c00020012032000fd0800001f007f0299403a017f007f017f027f03
7f047f057f107f11084035252c32406a252c32402e252c324028252c3237
60097009800903300940095009031009200902b8ffc0b2073a33b8ffc040
12063a33da4dea4dfa4d0312379006900702cf410c011100df011100ef01
11000300cf011000df011000ef0110408703cf3edf3eef3e03cf4ddf4def
4d03cfdedfdeefde03cf2ddf2def2d03404d1b3a32375f016f017f018f01
041f012f013f014f01045f036f037f038f03041f032f033f034f0304600b
700b800b03300b400b500b03100b200b02900ba00bb00bc00bd00b05b006
c006d006e006f0060550066006700680069006a006061f072f073f074006
04f0414302db000100a002db00b002db0002008002db009002db00020010
02db000100c002db00d002db0002009002db0001006002db007002db0002
004002db005002db0002002302db003002db000202db002300a002da0001
008002da009002da0002004002da0001002302da003002da000202da0023
000002d90001007002d9009002d9000202d9401c22302440240210242024
02002401f02401d024e02402b024c02402c0413a02d8000100a002d800b0
02d80002008002d8009002d80002002302d8003002d8000202d8002300c0
02d7000100a002d700b002d70002008002d7009002d7000200a002d700b0
02d70002008002d7009002d70002006002d7007002d70002004002d70050
02d70002002302d7003002d7000202d7b223370f4117029b0001005f029b
009f029b00df029b0003002f029b003f029b006f029b0003001f029b0001
029b029b0040029ab3272c3280b8029ab2263340b8029ab2223340b8029a
b21e3340b8029ab21c3340b8029ab3191a325f410f029a009f029a00df02
9a0003000f029a001f029a003f029a0003ffc00299b2443340b80299b23d
3340b80299b23a33df413702990001005f029900af02990002004f029900
9f02990002002f0299003f0299000200af02990001000f0299003f029900
0200b0029900e0029900020070029900a002990002004f0299005f029900
02001f0299002f0299003f02990003029a029a02990299000f027a002f02
7a400b0200161600000012110812b802bab269121fb802b4b228101fb802
b3b228101fb802b2b228101f411302030023000d01ee0023000d01ae0023
000d019f0023000d01940023000d01570023000d010f400b230df9230dc5
230da7230d410a024a0024000d01f00024000d01e90024000d016a400e24
0de8240dc6240da3240da2240dbb01e30022000d0121401a220de5220ddd
220db7220daa220d93220d5c220d51220d4c220d410a02280020000d021d
0020000d015e0020000d011c4017200dfc200de1200dcb200dc8200da120
0d59200d3a200d410a01f20034000d019c0034000d01970034000d0135b7
340d1f340d1d340dba0202000f015bb20f0009bb0202015b000d030ab22a
3e1fb80309b22a3e1fb80221b24d251fb8021cb24d411fb8021bb24d521f
b8021ab24d721fb80213b24d931f4109020f01b10401001f020e01b10801
001f020cb22a811fb8020bb22a811fb80208b22a5e1fb80205b22a391fb8
01feb22a231fb801fbb2661d1fb801fab2661e1fb801f6b266341fb801f5
b266341fbc01f300660201001f01f1b2669e1f410901ea00280801001f01
e7002602ab001f01b8b24d3f1fb801b7b24d931f410901b4003e0125001f
01b200400401001f01acb22a721fb801a8b22a281fb801a7b22a241fb801
a6b22a241fb801a3b22a1f1fb801a1b2662e1fb8019eb266931fb8019db2
66e41fb8019ab2286c1f4109019900280401001f019800260401001f0173
b24d1b1fb80171b24d241fb80170b24d2f1fb8016fb24d351fb8016bb23e
cd1fb80169b23ee41f4109016701b1019a001f0166002a02ab001f0161b2
662a1fb8015fb2669e1f4109015d0028019a001f015c00350401001f0147
b24d391fb80146b23ecd1f410d0145003e0125001f014401430101001f01
4201b102ab001f0140b22a301fb8013eb22a261fb8013db2661d1fb8013c
b2662b1fb80138b228811fb80137b2289e1fbc01360028019a001f0129b2
4d721fbc0124002a0201001f0123b22aab1fb8011fb266291fb8011eb266
451fb8011bb228811f41090113003e0125001f0112003e0401001f0111b2
2a291fb80110b22a201fbe010b0066019a001f010a0026019ab61ffd4d72
1ffb3eb80156b21ffa40b80801b21ff728b80801b61fec4d621feb4db804
01b21fea40b802abb61fdf4d721fde3eb802ab400b1fdc2ae41fdb66221f
ca2ab80401401b1fc92a2e1fc326791fb828bb1fb34d1e1fb166291fb066
621faf66b80401b21fae26b802abb21fa828b80201400b1fa0664c1f982a
2b1f9726b8019ab61f9266291f8740b802ab401b1f852a791f8226811f75
4d931f744d891f732a1d1f70285e1f6a28b8040140171f692a521f682a20
1f6766291f6566671f612a931f6035b80801b61f5e2acd1f5335b80801b2
1f4b66b80156b21f493eb80801b61f4866521f4626b80201b21f3f66b801
56400b1f3b66341f322a931f2e35bb0401001f002d0143b3cd1f5537bc02
2f0007018000070172402e07bd077e076207540742072f07270725072107
1e071408120810080e080c080a0808080608040802080008000214b8ffe0
402b00000100140610000001000604000001000410000001001002000001
000200000001000002010802004a00b013034b024b5342b0372b4bb807ff
52b0382b4bb008505b58b101018e59014bb0c063004b6220b0f65323b801
0a515ab005234201b0124b004b544218b0382bb00288b801005458b801ff
b101018e851bb0124358b90001012c858d1bb900010146858d5959001676
3f183f123e113946443e113946443e113946443e113946443e1139466044
3e113946604445442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb02953205c
58b9026c026a4544b9026b026a45445958b90168026c455258b9026c0168
4459594bb03b53205c58b9003e026b4544b9004d026b45445958b9025c00
3e455258b9003e025c4459594bb03b53205c58b901b1003e4544b13e3e45
445958b9024f01b1455258b901b1024f4459594bb05a53205c58b9014300
3e4544b13e3e45445958b9038b0143455258b90143038b4459594bb09e53
205c58b9002a026c4544b90040026c45445958b9056c002a455258b9002a
056c4459594bb01853205c58b126264544b1662645445958b13226455258
b126324459594bb05153205c58b126264544b1282645445958b1ad264552
58b126ad4459594bb8010153205c58b126264544b1352645445958b90228
0026455258b9002602284459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b01b33d766e58456523456023456560234560b08b
766818b080622020b16e764565234520b003266062636820b003266165b0
76236544b06e234420b13d584565234520b003266062636820b003266165
b058236544b03d2344b10058455458b158406544b23d403d4523614459b3
4e813871456523456023456560234560b089766818b080622020b1388145
65234520b003266062636820b003266165b081236544b038234420b14e71
4565234520b003266062636820b003266165b071236544b04e2344b10071
455458b171406544b24e404e45236144594b5242014b5058b10800425943
5c58b108004259b3020b0a124358601b2159421610703eb0124358b93b21
187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411b
ba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a8
0400000b2b59b0102342b011234200741845694445694473737373747475
7575752b2b2b73732b2b2b2b2b2b18456944737373742b45447373737373
747474454473747474747474757575454473754544737374744544737373
7373747474740075757575757575757575752b2b74747474747400732b43
58b14d4d451869441bb8ffc0b34d1b3a322b5973002b2b7575752b2b2b2b
2b0073732b435c58b8ffc0b2071633b8ffc0400b061633d54de54df54d03
c0410c011100d0011100e00111000300c0011000d0011000e00110401e03
c03ed03ee03e03c04dd04de04d03c0ded0dee0de03c02dd02de02d03372b
74747474747473002b2b590173737473747374737473747374752b737573
002b2b2b01732b2b2b2b752b2b2b732b2b2b002b2b742b732b7373742b73
732b2b2b2b2b2b732b732b2b2b742b2b2b73737373732b73732b2b2b7300
2b2b2b2b7374732b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b
2b2b2b7374752b2b7373732b2b2b752b2b732b2b2b2b2b2b2b2b2b2b7374
7573742b7374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b
2b2b2b00000000>
[2625 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 108 1 <00010052fe660292056b001200504028870eb70f02370498029409a802a5
090501c200030cc20d130d0c0c00000130140f071f072f070307b8029540
094010011056136f96182b10f65ded5d10f63c103c103c003fed3fed3130
005d015d0115060706070611101217161715260011100002926831442630
574b345df1feb1014e056b2e44415a8daffec6fed8feb8654635325101f3
0144014001ed>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
1 264 2 <0002004affe403b505680016002b014a4019091b061f062509291707181b
1520152518290907080177081db8010ab2120527b8010ab3060d1217b803
0a4025004024263400402b2e34004033363400403b3d3440005000a00003
001a2d120f221f220222b8030a400e8f0d010d401315340d192cf5f1182b
4e10f62b724ded5d43584017224024273422402b2e34224033363422403b
3d346f2201712b2b2b2b594e10f6712b2b2b2b4ded4358b90017ffc0b324
273417b8ffc0b32b2e3417b8ffc0b333363417b8ffc0b53b3d3460170171
2b2b2b2b59003fed3fed313043794062012a20211f2102060f0e100e0206
2423252302060b0c0a0c090c080c040615161416020619181a181b180306
02010301040103062a2b292b02061e1122620026072262001c1317620128
05176201210e1d6201230c27620018161d62012b012762002b2b2b2b012b
2b2b2b2a2a2a2a2a2a2a2a81007101710114070e02232226272627263534
373636333216171605102726272623220706061110171616333237363703
b53922739256629e3d2c212b3e33d07476cd3043fecc040a2619382b1925
1a140f382e32192a0602a6cbb06c8a51645d447199a3ddb999a3a188bbdc
01643b8b31201823b1fdeffee062473020387500>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
1 734 3 <00010042fe9901bd0133001700374011f9020107090401c200cc12490c0a
044b15b80146400b01331f0f010f4118ad8d182b10f45df4fded003fedf4
ed011139393130015d133536363534272623220706232226353436333216
151406667469070707060c1d2b3b576447567aadfe992c329f5311090807
115c3e426485748fde00>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
1 864 4 <0001002f000003df03a7003a02c4404b271d991f021a1c103a0212a71e01
3a0d7830b93a03120e141f261f7702960e9a31c901df3c08100710081017
1018041817080740170e3f1f075007f00703070706193435262510240124
24b8ffc0b60b0f3f24362306b8ffc0408013193f9a36ba36022e2d012f1d
1e1f0d2f1d0e1f0d3a0f002d013a0f070d081f07191d1a1f19242d251f24
363a371f36ba06010601051f06180f171f18231f221f23352f341f352e1e
0e0004062e1e0e000423199f2fac2f025c2f8c2fbc2f032f1d970fac3abc
3a035c3a8c3af70f03570f870f9f3a031d460f3a140f0f3a2db8ffc0b332
193f2db8ffc84086121534e32d01532d802dac2dd32d042d01120d281214
340501150125017201840105890dc31ff71f03541f831f931fa81f04a30d
dc0df60d038b019901bb0103d90101015e0d1f140d0d1f3a4012233f0f01
0f0d0f2f0f3a041f011f0d1f2f1f3a043a2f2d1f1d0f0d0108063a2f2d1f
1d0f0d0108193635242306191807060aa03cc03c023cb8ffc0b70f11343c
17171a06b8ffc0b61e0f3fcf060106ba010e0001011eb22f901dbd011e00
2d0277003b003c0246b321f255182b2bf4edf6fdf45d2b4e456544e62b5d
003f3c3c3c3f3c3c3c1217390111173971712b870e4d2e2b5d5d5d5d5d71
2b435c58b90001ffe0b3170e3f01b8ffe0b3172d3f01b8ffe0b314283f01
b8ffe0b30f1e3f01b8ffe0b20c143f2b2b2b2b2b597d10c45d5d2b2b870e
2e182b5d5d5d7d10c45d5d001112173901121739180010ed0110c00010ed
0110c00010ed0110c00010ed0110c0015d0010ed0110c00010ed0110c000
10ed0110c00010ed0110c00f0f0f0f5d2bb1060243545840141d180a0e34
0f180a0e340e180a0e341e180a0e34002b2b2b2b593130011112392b7d2f
5d183c3cde3c1112397c2f5d2b183cde3c015d5d71005d435c58401a352b
452b026a00690b671e6a2ea701ac1fac20b91fcb0de90d0a015d7159015d
005d01131617161715213536363534272707060706151416163315213532
363737032626273521150707061514171617173736353426273521150606
07026ea254311b2ffdf73d1d2051452f060813212cfe9244716c4da14f4e
3002061b3408050319492650232d014b3d6a42023dfecca12b1702242405
16131c3c9865450d130f171f0f24244b9f72012a9242042525011207100f
10072f88366e2c151d05252502476600>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
1 1750 5 <00010011fe4603ed03a7002f0163b50f0d1f0d020cb8ffe040ae13153e04
0114014a004a0d481a591a5a1b582e6a1a6a1b682e891bb81bc81b0e2813
28143800381a4600460d67066707670c982fa800a81ad7190d0000010d2f
0d0c2f0e060c071f061519161f151005010501041f05140e131f142a1527
28242b0e2f2f461a19141a1a190c0d0d180d163f0d5e000114000d0e0001
01212f1a190e0d0c000715272f0024190e0d0c0105051a24ea2b901e0f24
ea1e151414060605061a000b6031e031f0310331b8ffc0400d1428343117
171a0f152f150215b8010340170529292027342744270327c9212b0005d0
050205193031b80103b321c155182b2b4ef45d4df4fd5de410fd5d4e4565
44e62b72003f3c3f3c103c103c4d10ed3feded1112173911123901111217
39123987082e2b2b0e7d10c4870e2e182b0e7d10c4001112390111123918
0010ed0110c00010ed0110c05d0010ed0110c00010ed0110c00708103c08
3c3130015d5d2b005d050126262735211506061514171313363534262735
21150606070102070623222635343633321617161716333237363701f2fe
d244412e01f1312832a06d3b313e01392e3a44fef5653145685367473432
3d010108080f181b28362602b59d480e25250222182670fe92011b973b25
2c022525053db1fd4bfefc3c545f433a4c4043260b0b1d2a9600>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
1 2256 6 <00010019fe660259056b00120052402236048705880fb80f0496029909a6
02a9090401c200130cc20d030007100720070307b8029540114f10011056
140001010c0c0d30135289182b10f43c103c103c10f65ded5d003fed3fed
3130005d015d133536373637361110022726273516001110001968314327
30574b345df1014ffeb1fe662e45415a8cb0013a012801476546353251fe
0dfebcfec1fe1300>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
1 2414 7 <0001008700000363056800170083bc000e01ad0135000801a5b6225f076f
070201410d01ad0135000701f90023001601a5000f01f700150135001602
02400e0f08000508070c000f011f010201b8030940100e0e500f6f0faf0f
03100f010f19180ebe0200000802c60018021701df00182b10f6e44e10f4
5d5d3c4d10fd5d3c003f3c3f1239f5edfc01f52b015d2b31300111141616
33331521353332363635113426262322072725029b16464d1ffd3624574a
1a12312033491201f30568fbab7d452c252528468002bf5e2f212024e400
>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
1 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>PBAAAA+Times#20New#20Roman#20Bold AddT42Char 
PBAAAA+Times#20New#20Roman#20Bold /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
end
PBAAAA+Times#20New#20Roman#20Bold /Encoding get
dup 32 /g1 put
dup 33 /g2 put
dup 34 /g3 put
dup 35 /g4 put
dup 36 /g5 put
dup 37 /g6 put
dup 38 /g7 put
pop
end
%ADOEndSubsetFont
/FOOEDH+Times#20New#20Roman#20Bold /PBAAAA+Times#20New#20Roman#20Bold findfont ct_VMDictPut
/FOOEDH+Times#20New#20Roman#20Bold*1 
[32{/.notdef}rp /g1 /g2 /g3 /g4 /g5 /g6 /g7 
217{/.notdef}rp]
FOOEDH+Times#20New#20Roman#20Bold nf
FOOEDH+Times#20New#20Roman#20Bold*1 [12 0 0 -12 0 0 ]msf
177.72 16.8602 mo
( )sh
181.68 16.8602 mo
(!)sh
187.68 16.8602 mo
(")sh
190.68 16.8602 mo
(#)sh
196.68 16.8602 mo
(")sh
199.68 16.8602 mo
($)sh
205.68 16.8602 mo
(%)sh
179.64 379.14 mo
( )sh
183.6 379.14 mo
(&)sh
189.6 379.14 mo
(")sh
192.6 379.14 mo
(#)sh
%ADOBeginSubsetFont: HIBBAA+Calibri#20Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri#20Bold
Type42DictBegin
[<00010000000b000b000b000b6376742058364855000000bc000006086670
676dcf43dd01000006c400000913676c79664311c8c30000338400000198
6865616461ce58ed00000fd800000036686865612b048c0b000010100000
0024686d74787900ec0500001034000000086c6f6361d40200000000103c
0000000c6d617870ab16f10c00001048000000206e616d65f02fc6d00000
106800000d7d70726570dc79ef1600001de80000159c6764697200000000
00000000000000000000079e0000fe930000000000000000000000810081
009c00ab00b500ba00c100ca00d300f3010a0060008500bf00e300ea00f2
00fb010001070115011c0129000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe83056d
000d03c0000600170000fffaffe9fea9ffe90000050e000600170000fffa
ffe9fe93050e00170426000600170000fffaffe9ff12ffed050e00170426
000600170000fffaffe9fe93feb8fece060b0010050e0006001002cbfffa
fff001edfffa023f00060010ff36fffafff00287000600100000fffafff0
079efeaffe9f00000000000000000000000000700072007500780079007a
007b007d007e007f008300860087008800890085007f0086008b008c008d
008e008f0090009100920093009400950096009700980099009a009b009c
009d009e009f009200930094009b009c009e009e00960099009a009d009e
00a200a600a900ac00a200a300a400a500a700a800a900aa00ab00ac00ae
00a300a500a700a800aa00ab00ac00ad00ae00a000a100a300a600a700a9
00aa00ac00ad00af00af00b000b100b200b300b400b500af00af00b000b2
00b300b400b500b800c000b600b700b800b900ba00bb00bc00bd00be00bf
00c000c100c200b900ba00bc00bd00bf00c000c100c200b600b700b800b9
00ba00bb00bc00bd00be00bf00c000c100c200c000c100c200c300c400c5
00c600c700c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c7
00c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c500c800c900ca00cb00ce00cf00d000d1
00d200d300d400d500d600d700d900db00de00df00e000e200e300ec00d0
00d100d200d300d400d500d600d700d800d900da00db00dd00de00df00e0
00e100e300e500e900ec00ed00d100d300d400d500d800d900da00dc00e0
00e100e800d000d100d400d600e000e4010800f5010200fb00ff0108008f
009000960092009300990090009100970098009a009d00a400a600a700a8
00a900af009a00a200a300a700a900aa00ab00ac00ad00b000ad009b00aa
00ab00ad00b0009a00aa00ac00ad00ae00af00b100b900bb00bc00bd00be
00c100c200c300c400c500c600c700c800c900ca00cb00ce00b300b400b5
00b600b700b800bc00c200c500c800ca00cb00cd00ce00cf00d000c700b7
00b800b900bb00bc00be00c600c700c800c900cb00cf00d000b200b600b7
00c200c400c500c600c700cb00cc00cd00ce00cf00d000d100d400d500d7
00d800d900da00db00dc00de00df00e000e200e300e500e600d100d300d6
00d700d800da00db00dc00dd00de00df00e000e100e200e300e400e500d1
00d200d400d500da00db00dd00de00df00e000e100e200e600d200d300d4
00d700d800dd00de00e000e100e200e300e400e500e600d200da00e100e9
00ea00ec00e800e900ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e7
00e900ea00ec00ed00ee00ef00f500ee00ef00f000f100f200f300f400f5
00f600ee00f000f200ef00f000f100f200f300f400f500f600ee00ef00f0
00f100f200f300f400f500f600f700f700f800f900fa00fb00fc00fd00f7
00f800f900fa00fb00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff
010001010102010300fe010001010102010300fe00ff0100010101020103
01020103010401050106010701080109010a010c010d010e010f01100107
010401050106010701080109010a010b010d010e010f0110011101040105
0106010701080109010a010b010c010d010e010f01100111010401050106
01070109010e010f011201130114011501170118011a011b011c011d011e
011f01210122011201130114011501170119011b011c011d011e01200121
0123012401250113011401150116011701180119011a011b011c011d011f
01200117011c011d011e012001210129013001770129012b012e012f0130
01310134013501370139012b012d013001320134013a012e01300134013a
014200500062006c00fa05e802cc0114011400a000b140465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d00000100000005bae1fbe9aed95f0f3cf50019080000000000
bbeb7ccc00000000cf7409dbfbdafd8d09ec07c500010009000200010000
0000000100000600fe0001c40aa0fbdafa8609ec00010000000000000000
0000000000000002040e000001de0079000000000000013c000001980001
000000020120001000bd000700020010002f006000000c63159c00040001
0000002d02220000000300000000006400000000000300000001000e0064
0000000300000002000800720000000300000003002e007a000000030000
0004001800900000000300000005001800a80000000300000006001800c0
0000000300000007007600d80000000300000008002a000e000000030000
00090020014e000000030000000a02a0016e000000030000000b0056040e
000000030000000c002a0464000000030000000d0298048e000000030000
000e006c07260001000000000000003207920001000000000001000707c4
0001000000000002000407cb0001000000000003001707cf000100000000
0004000c07da0001000000000005000c07e60001000000000006000c07f2
0001000000000007003b07fe000100000000000800150799000100000000
000900100839000100000000000a01500849000100000000000b002b0999
000100000000000c001509c4000100000000000d014c09d9000100000000
000e00360b250003000104090000006400000003000104090001000e0064
0003000104090002000800720003000104090003002e007a000300010409
0004001800900003000104090005001800a80003000104090006001800c0
0003000104090007007600d80003000104090008002a000e000300010409
00090020014e000300010409000a02a0016e000300010409000b0056040e
000300010409000c002a0464000300010409000d0298048e000300010409
000e006c072600a9002000320030003100340020004d006900630072006f
0073006f0066007400200043006f00720070006f0072006100740069006f
006e002e00200041006c006c002000520069006700680074007300200052
0065007300650072007600650064002e00430061006c0069006200720069
0042006f006c0064004d006900630072006f0073006f00660074003a0020
00430061006c006900620072006900200042006f006c0064005600650072
00730069006f006e00200035002e0037003300430061006c006900620072
0069002d0042006f006c006400430061006c006900620072006900200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000670072006f007500700020006f006600200063006f006d00700061
006e006900650073002e004c007500630028006100730029002000640065
002000470072006f006f007400430061006c006900620072006900200069
0073002000610020006d006f006400650072006e002000730061006e0073
002000730065007200690066002000660061006d0069006c007900200077
00690074006800200073007500620074006c006500200072006f0075006e
00640069006e006700730020006f006e0020007300740065006d00730020
0061006e006400200063006f0072006e006500720073002e002000490074
0020006600650061007400750072006500730020007200650061006c0020
006900740061006c006900630073002c00200073006d0061006c006c0020
0063006100700073002c00200061006e00640020006d0075006c00740069
0070006c00650020006e0075006d006500720061006c0020007300650074
0073002e0020004900740073002000700072006f0070006f007200740069
006f006e007300200061006c006c006f0077002000680069006700680020
0069006d007000610063007400200069006e002000740069006700680074
006c007900200073006500740020006c0069006e006500730020006f0066
002000620069006700200061006e006400200073006d0061006c006c0020
007400650078007400200061006c0069006b0065002e002000430061006c
0069006200720069002700730020006d0061006e00790020006300750072
00760065007300200061006e006400200074006800650020006e00650077
002000720061007300740065007200690073006500720020007400650061
006d00200075007000200069006e00200062006900670067006500720020
00730069007a0065007300200074006f002000720065007600650061006c
002000610020007700610072006d00200061006e006400200073006f0066
00740020006300680061007200610063007400650072002e006800740074
0070003a002f002f007700770077002e006d006900630072006f0073006f
00660074002e0063006f006d002f007400790070006f0067007200610070
00680079002f006300740066006f006e007400730068007400740070003a
002f002f0066006f006e007400660061006200720069006b002e0063006f
006d0059006f00750020006d006100790020007500730065002000740068
0069007300200066006f006e00740020006100730020007000650072006d
006900740074006500640020006200790020007400680065002000450055
004c004100200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
007500640065006400200074006f00200064006900730070006c00610079
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e0074002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e0068007400740070003a002f002f007700770077002e006d
006900630072006f0073006f00660074002e0063006f006d002f00740079
0070006f006700720061007000680079002f0066006f006e00740073002f
00640065006600610075006c0074002e0061007300700078a92032303134
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e43616c69627269426f6c644d6963726f
736f66743a2043616c6962726920426f6c6456657273696f6e20352e3733
43616c696272692d426f6c6443616c696272692069732061207472616465
6d61726b206f6620746865204d6963726f736f66742067726f7570206f66
20636f6d70616e6965732e4c7563286173292064652047726f6f7443616c
696272692069732061206d6f6465726e2073616e73207365726966206661
6d696c79207769746820737562746c6520726f756e64696e6773206f6e20
7374656d7320616e6420636f726e6572732e204974206665617475726573
207265616c206974616c6963732c20736d616c6c20636170732c20616e64
206d756c7469706c65206e756d6572616c20736574732e20497473207072
6f706f7274696f6e7320616c6c6f77206869676820696d7061637420696e
2074696768746c7920736574206c696e6573206f662062696720616e6420
736d616c6c207465787420616c696b652e2043616c696272692773206d61
6e792063757276657320616e6420746865206e6577207261737465726973
6572207465616d20757020696e206269676765722073697a657320746f20
72657665616c2061207761726d20616e6420736f66742063686172616374
65722e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479
706f6772617068792f6374666f6e7473687474703a2f2f666f6e74666162
72696b2e636f6d596f75206d617920757365207468697320666f6e742061
73207065726d6974746564206279207468652045554c4120666f72207468
652070726f6475637420696e207768696368207468697320666f6e742069
7320696e636c7564656420746f20646973706c617920616e64207072696e
7420636f6e74656e742e20596f75206d6179206f6e6c792028692920656d
626564207468697320666f6e7420696e20636f6e74656e74206173207065
726d69747465642062792074686520656d62656464696e67207265737472
696374696f6e7320696e636c7564656420696e207468697320666f6e743b
20616e6420286969292074656d706f726172696c7920646f776e6c6f6164
207468697320666f6e7420746f2061207072696e746572206f72206f7468
6572206f75747075742064657669636520746f2068656c70207072696e74
20636f6e74656e742e687474703a2f2f7777772e6d6963726f736f66742e
636f6d2f7479706f6772617068792f666f6e74732f64656661756c742e61
737078000000b10903b802f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1f
b802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802
f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb2
1e2b1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c
1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb8
02e5b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1
b21d121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d
2f1fb802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1f
b802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802
d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b2
1d2f1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d12
1fb802cbb21d121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb8
02c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3
b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d
121fb802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1f
b802bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802
b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b2
1d2f1fb802b1b21c321fb802b0b21c321fb802afb21c331fb802aeb21c33
1fb802adb21c331fb802acb21c331fb802abb21c331fb802aab21c311fb8
02a9b21c311fb802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5
b21c321fb802a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c
331fb802a0b21c331fb8029fb21c331fb8029eb21c331fb8029db21c331f
b8029cb21c311fb8029bb21c311fb8029ab21c321fb80299b21c321fb802
98b21c321fb80297b21c321fb80296b21c321fb80295b21c331fb80294b2
1c331fb80293b21c331fb80292b21c331fb80291b21c331fb80290b21c33
1fb8028fb21c331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8
028bb21c321fb8028ab21c321fb80289b21c321fb80288b21c331fb80287
b21c331fb80286b21c331fb80285b21c331fb80284b21c331fb80283b21c
331fb80282b21b341fb80281b21b341fb80280b21b341fb8027fb21b341f
b8027eb21b341fb8027db21b341fb8027cb21b341fb8027bb21b341fb802
7ab21b341fb80279b21b341fb80278b21b341fb80277b21b341fb80276b2
1b341fb80275b21b341fb80274b21b341fb80273b21b341fb80272b21b34
1fb80271b21b341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8
026db21a351fb8026cb21a351fb8026bb21a351fb8026ab21a351fb80269
b21a351fb80268b21a351fb80267b21a351fb80266b21a351fb80265b21a
351fb80264b21a351fb80263b21a351fb80262b21a351fb80261b21a351f
b80260b21a351fb8025fb21a351fb8025eb21a351fb8025db21a351fb802
5cb21a351fb8025bb21a351fb8025ab21a351fb80259b219371fb80258b2
19371fb80257b219371fb80256b219371fb80255b219371fb80254b21937
1fb80253b219371fb80252b219371fb80251b219371fb80250b219371fb8
024fb219371fb8024eb219371fb8024db219371fb8024cb219371fb8024b
b219371fb8024ab219371fb80249b219371fb80248b219371fb80247b219
371fb80246b219371fb80245b219371fb80244b219371fb80243b219371f
b80242b219371fb80241b219371fb80240b219371fb8023fb219371fb802
3eb219371fb8023db219371fb8023cb219371fb8023bb219371fb8023ab2
19371fb80239b218391fb80238b218391fb80237b218391fb80236b21839
1fb80235b218391fb80234b218391fb80233b218391fb80232b218391fb8
0231b218391fb80230b218391fb80301b2182e1fb8022fb218391fb8022e
b218391fb8022db218391fb8022cb218391fb8022bb218391fb8022ab218
391fb80229b218391fb80228b218391fb80227b218391fb80226b218391f
b80225b2173b1fb80224b2173b1fb80223b217321fb80222b2173a1fb802
21b2173b1fb80220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2
173b1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b
1fb80218b2173b1fb80217b2173b1fb80216b2173b1fb80215b217321fb8
0214b2173a1fb80213b2173b1fb80212b2173b1fb80211b2173b1fb80210
b2173b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb217
3b1fb8020bb2173b1fb8020ab2173b1fb80209b217321fb80208b217321f
b80207b2173b1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb802
03b2173b1fb80202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2
173b1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b
1fb801fab2173b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb8
01f6b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2
b2173b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb217
3b1fb801edb2173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1f
b801e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801
e5b216231fb801e4b216371fb801e3b216371fb801e2b216381fb801e1b2
16381fb801e0b216431fb801dfb216441fb801deb216441fb801ddb21644
1fb801dcb216451fb801dbb216461fb801dab216461fb801d9b216461fb8
01d8b216231fb801d7b216231fb801d6b216381fb801d5b216431fb801d4
b216431fb801d3b216431fb801d2b216441fb801d1b216461fb801d0b216
461fb801cfb216461fb801ceb216461fb801cdb216461fb801ccb216461f
b801cbb216431fb801cab216231fb801c9b216231fb801c8b216371fb801
c7b216371fb801c6b216381fb801c5b216421fb801c4b216431fb801c3b2
16441fb801c2b216451fb801c1b216461fb801c0b216461fb801bfb21646
1fb801beb216461fb801bdb216461fb801bcb216461fb801bbb216461fb8
01bab216371fb801b9b216381fb801b8b216421fb801b7b216431fb801b6
b216431fb801b5b216431fb801b4b216441fb801b3b216441fb801b2b216
441fb801b1b216451fb801b0b216451fb801afb216451fb801aeb216461f
b801adb216461fb801acb216461fb801abb216461fb801aab216461fb801
a9b215341fb801a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2
154e1fb801a4b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d
1fb801a0b2154e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8
019cb215401fb8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198
b2154f1fb80197b2154f1fb80196b215501fb80195b215521fb80194b215
521fb80193b215521fb80192b215411fb80191b2154f1fb80190b215501f
b8018fb215501fb8018eb215511fb8018db215521fb8018cb215521fb801
8bb215521fb8018ab214581fb80189b214591fb80188b2145c1fb80187b2
145d1fb80186b2144a1fb80185b2145b1fb80184b2145c1fb80183b21459
1fb80182b2145d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c
4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561f
ae0b561fad0b561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b
561fa60b561fa50b561fa40b561fa30b561fa20b561fa10b561fa00b561f
9f0b561f9e0a681f9a0a681f990a681f980a681f970a681f960a681f950a
681f940a681f930a681f920a681f910a681f9009681f8f09681f8e09681f
8d09681f8c09681f410902fc02fa0056001f02fb02fa0068001f017fb213
321fb8017eb212371fb80174b212371fb80173b211421fb80172b211421f
b80171b211421fb80170b211421fb8016fb211421fb8016eb211421fb801
6db211421fb8016cb211421fb8016bb211421fb8016ab211421fb8013cb2
11421fb8013bb210421fb8013ab210421fb80139b210421fb80138b21042
1fb80137b210421fb80136b210421fb80135b210421fb80134b210421fb8
0133b210421fb80132b20f451fb80131b20f451fb80130b20f451fb80112
b20f451fb80111b20f451fb80110b20f451fb8010fb20f451fb8010eb20f
451fb8010db20e481fb8010cb20e481fb8010bb20e481fb8010ab20e481f
b80109b20e481fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee
0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e
1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe
0b561fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180
b213321fb8017ab211401fb80179b211421fb80178b211421fb80177b211
421fb80176b211421fb80175b211421fb80143b211421fb80142b210421f
b80141b210421fb80140b210421fb8013fb210421fb8013eb210421fb801
3db20f451fb80115b20f451fb80114b20f451fb80113b20f451fb9030303
02b2401fa4be030200b4030200c4030200030300b213321fb8017bb21332
1fb80153b212371fb80152b211401fb80151b211401fb80150b211401fb8
014fb211401fb8014eb211401fb8014db211401fb8014cb211401fb8014b
b211401fb8014ab211401fb80149b211401fb80148b211401fb80147b211
401fb80146b211401fb80145b211401fb80144b211401fb80122b211401f
b80121b210421fb80120b210421fb8011fb210421fb8011eb210421fb801
1db210421fb8011cb210421fb8011bb210421fb8011ab210421fb80119b2
10421fb80118b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc
0f451ffb0f451ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e48
1ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe4
0d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e
1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb8
0c4e1fb70b561fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fd
b212371fb8017db212371fb8017cb212371fb80169b2112e1fb80168b211
2e1fb80167b211401fb80166b211401fb80165b211401fb80164b211401f
b80163b211401fb80162b211401fb80161b211401fb80160b211401fb801
5fb211401fb8015eb211401fb8015db211401fb8015cb211401fb8015bb2
11401fb8015ab211401fb80159b211401fb80158b211401fb80157b21140
1fb80156b211401fb80155b211401fb80154b211401fb8012fb211401fb8
012eb210421fb8012db210421fb8012cb210421fb8012bb210421fb8012a
b210421fb80129b210421fb80128b210421fb80127b210421fb80126b210
421fb80125b20f451fb80124b20f451fb80123b20f451fb80105b20f451f
b80104b20f451fb80103b20f451fb80102b20f451fb80101b20e481fb801
0040a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1f
d30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503
251f84032e1f83012e1f8248805581ab80557f487d557eab7d550b7d3b7d
4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a
7948775578ab77550b77010c764875555475e475f4750314755475647574
759475d475e47507a475b475c47503b8ffc0401275383b46807590750214
757475020075010fb8ffc04021750b0e467448725573ab72550472347202
3bf47201e07201023072015072607202b8ffc0b372242846b8ffc0403572
161a461072307240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f
6f8f6f02af6fbf6f02406f090d466e486d55df6d0100bc02ff001002ff00
c002ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e67
5568ab6755662e645565ab6455632e6255612e60555f2e5d555eab5d555c
2e5a555bab5a55592e58555703251f562e545555ab5455532e515552ab51
554f2e4e554e03251f4d2e4b554cab4b554a2e485549ab4855504801472e
46554503361f001f01001e01001e701e801ef01e040b601d701d02701de0
1df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f
191f198f199f19af19050f198f199f19030c701280120270118011023011
4011d011e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af
0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f
0d1f0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f
0c4f0c5f0c039f0c01400c262946ef0aff0a02400a242746ef09ff0902ff
09010003012001010001100120010308b8ffc0b301151f46b80100b31601
0501b80190b154532b2b4bb807ff524bb008505bb00188b02553b00188b0
40515ab00688b000555a5b58b101018e59b101024354b0144b515a58b101
018e59858d8d00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff
5358b0001db1160042592b5e73757373742b732b73742b2b73745e732b5e
7374757374755e73747573015e7374737475757473745e737473002b2b73
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b
2b7374752b2b732b2b73755f75755e732b2b2b5e7373732b7374752b5e73
2b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[409 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 316 1 <0001007903640164057700150012b90015022ab30b051047003fcd012fed
313001140e0223222e022703263e0233321e0207014c0a16231a1b231609
0117010d1c2d20212c1c0c01038e0b100a05060a100a01bf0a100b05050a
100b>HIBBAA+Calibri#20Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>HIBBAA+Calibri#20Bold AddT42Char 
HIBBAA+Calibri#20Bold /CharStrings get begin
/g1 1 def
end
HIBBAA+Calibri#20Bold /Encoding get
dup 32 /g1 put
pop
end
%ADOEndSubsetFont
/FOOEDI+Calibri#20Bold /HIBBAA+Calibri#20Bold findfont ct_VMDictPut
/FOOEDI+Calibri#20Bold*1 
[32{/.notdef}rp /g1 223{/.notdef}rp]
FOOEDI+Calibri#20Bold nf
FOOEDI+Calibri#20Bold*1 [12 0 0 -12 0 0 ]msf
198.6 379.14 mo
( )sh
FOOEDH+Times#20New#20Roman#20Bold*1 [12 0 0 -12 0 0 ]msf
201.36 379.14 mo
(")sh
204.36 379.14 mo
($)sh
FOOEDI+Calibri#20Bold*1 [12 0 0 -12 0 0 ]msf
210.36 379.14 mo
( )sh
FOOEDH+Times#20New#20Roman#20Bold*1 [12 0 0 -12 0 0 ]msf
213.24 379.14 mo
(%)sh
185.04 228.894 mo
185.04 222.174 190.08 216.774 196.32 216.774 cv
202.56 216.774 207.6 222.174 207.6 228.894 cv
207.6 228.894 li
207.6 235.614 202.56 241.134 196.32 241.134 cv
190.08 241.134 185.04 235.614 185.04 228.894 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
1.2 lw
185.04 228.894 mo
185.04 222.174 190.08 216.774 196.32 216.774 cv
202.56 216.774 207.6 222.174 207.6 228.894 cv
207.6 228.894 li
207.6 235.614 202.56 241.134 196.32 241.134 cv
190.08 241.134 185.04 235.614 185.04 228.894 cv
.750179 .679652 .670191 .901488 cmyk
@
192.24 226.374 mo
201.96 226.374 li
201.96 233.694 li
192.24 233.694 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
192.24 233.694 mo
201.96 233.694 li
201.96 226.374 li
192.24 226.374 li
192.24 233.694 li
cp
.750179 .679652 .670191 .901488 cmyk
@
185.04 260.574 mo
185.04 253.854 190.68 248.454 197.76 248.454 cv
204.72 248.454 210.48 253.854 210.48 260.574 cv
210.48 260.574 li
210.48 267.294 204.72 272.694 197.76 272.694 cv
190.68 272.694 185.04 267.294 185.04 260.574 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
185.04 260.574 mo
185.04 253.854 190.68 248.454 197.76 248.454 cv
204.72 248.454 210.48 253.854 210.48 260.574 cv
210.48 260.574 li
210.48 267.294 204.72 272.694 197.76 272.694 cv
190.68 272.694 185.04 267.294 185.04 260.574 cv
.750179 .679652 .670191 .901488 cmyk
@
192.24 258.054 mo
201.96 258.054 li
201.96 265.374 li
192.24 265.374 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
192.24 265.374 mo
201.96 265.374 li
201.96 258.054 li
192.24 258.054 li
192.24 265.374 li
cp
.750179 .679652 .670191 .901488 cmyk
@
185.04 292.254 mo
185.04 285.534 190.68 280.014 197.76 280.014 cv
204.72 280.014 210.48 285.534 210.48 292.254 cv
210.48 292.254 li
210.48 298.854 204.72 304.374 197.76 304.374 cv
190.68 304.374 185.04 298.854 185.04 292.254 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
185.04 292.254 mo
185.04 285.534 190.68 280.014 197.76 280.014 cv
204.72 280.014 210.48 285.534 210.48 292.254 cv
210.48 292.254 li
210.48 298.854 204.72 304.374 197.76 304.374 cv
190.68 304.374 185.04 298.854 185.04 292.254 cv
.750179 .679652 .670191 .901488 cmyk
@
192.24 289.614 mo
201.96 289.614 li
201.96 297.054 li
192.24 297.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
192.24 297.054 mo
201.96 297.054 li
201.96 289.614 li
192.24 289.614 li
192.24 297.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
185.04 323.814 mo
185.04 317.094 190.08 311.694 196.32 311.694 cv
202.56 311.694 207.6 317.094 207.6 323.814 cv
207.6 323.814 li
207.6 330.534 202.56 335.934 196.32 335.934 cv
190.08 335.934 185.04 330.534 185.04 323.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
185.04 323.814 mo
185.04 317.094 190.08 311.694 196.32 311.694 cv
202.56 311.694 207.6 317.094 207.6 323.814 cv
207.6 323.814 li
207.6 330.534 202.56 335.934 196.32 335.934 cv
190.08 335.934 185.04 330.534 185.04 323.814 cv
.750179 .679652 .670191 .901488 cmyk
@
192.24 321.294 mo
201.96 321.294 li
201.96 328.614 li
192.24 328.614 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
192.24 328.614 mo
201.96 328.614 li
201.96 321.294 li
192.24 321.294 li
192.24 328.614 li
cp
.750179 .679652 .670191 .901488 cmyk
@
185.04 355.494 mo
185.04 348.774 190.68 343.254 197.76 343.254 cv
204.72 343.254 210.48 348.774 210.48 355.494 cv
210.48 355.494 li
210.48 362.214 204.72 367.614 197.76 367.614 cv
190.68 367.614 185.04 362.214 185.04 355.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
185.04 355.494 mo
185.04 348.774 190.68 343.254 197.76 343.254 cv
204.72 343.254 210.48 348.774 210.48 355.494 cv
210.48 355.494 li
210.48 362.214 204.72 367.614 197.76 367.614 cv
190.68 367.614 185.04 362.214 185.04 355.494 cv
.750179 .679652 .670191 .901488 cmyk
@
192.24 352.974 mo
201.96 352.974 li
201.96 360.294 li
192.24 360.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
192.24 360.294 mo
201.96 360.294 li
201.96 352.974 li
192.24 352.974 li
192.24 360.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
192.36 259.614 mo
183.24 259.614 175.92 273.774 175.92 291.294 cv
175.92 309.774 183.36 324.894 192.48 324.894 cv
192.48 324.894 li
@
192.48 292.374 mo
183.24 292.374 175.92 306.294 175.92 323.454 cv
175.92 340.974 183.24 355.134 192.36 355.134 cv
192.36 355.134 li
@
192.48 228.174 mo
183.36 228.174 175.92 241.974 175.92 259.134 cv
175.92 277.494 182.64 292.494 191.04 292.494 cv
191.04 292.494 li
@
191.64 228.174 mo
186.84 228.534 182.88 244.974 182.76 265.614 cv
182.76 298.974 187.2 326.094 192.72 326.094 cv
192.72 326.094 li
@
192.6 259.494 mo
187.32 259.494 183 285.894 183 318.414 cv
183 338.934 186.84 355.614 191.64 355.614 cv
191.64 355.614 li
@
241.56 228.894 mo
241.56 222.174 246.6 216.774 252.84 216.774 cv
259.08 216.774 264.24 222.174 264.24 228.894 cv
264.24 228.894 li
264.24 235.614 259.08 241.134 252.84 241.134 cv
246.6 241.134 241.56 235.614 241.56 228.894 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
241.56 228.894 mo
241.56 222.174 246.6 216.774 252.84 216.774 cv
259.08 216.774 264.24 222.174 264.24 228.894 cv
264.24 228.894 li
264.24 235.614 259.08 241.134 252.84 241.134 cv
246.6 241.134 241.56 235.614 241.56 228.894 cv
.750179 .679652 .670191 .901488 cmyk
@
248.88 226.374 mo
258.6 226.374 li
258.6 233.694 li
248.88 233.694 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
248.88 233.694 mo
258.6 233.694 li
258.6 226.374 li
248.88 226.374 li
248.88 233.694 li
cp
.750179 .679652 .670191 .901488 cmyk
@
241.56 260.574 mo
241.56 253.854 247.2 248.454 254.28 248.454 cv
261.36 248.454 267 253.854 267 260.574 cv
267 260.574 li
267 267.294 261.36 272.694 254.28 272.694 cv
247.2 272.694 241.56 267.294 241.56 260.574 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
241.56 260.574 mo
241.56 253.854 247.2 248.454 254.28 248.454 cv
261.36 248.454 267 253.854 267 260.574 cv
267 260.574 li
267 267.294 261.36 272.694 254.28 272.694 cv
247.2 272.694 241.56 267.294 241.56 260.574 cv
.750179 .679652 .670191 .901488 cmyk
@
248.88 258.054 mo
258.6 258.054 li
258.6 265.374 li
248.88 265.374 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
248.88 265.374 mo
258.6 265.374 li
258.6 258.054 li
248.88 258.054 li
248.88 265.374 li
cp
.750179 .679652 .670191 .901488 cmyk
@
241.56 292.254 mo
241.56 285.534 247.2 280.014 254.28 280.014 cv
261.36 280.014 267 285.534 267 292.254 cv
267 292.254 li
267 298.854 261.36 304.374 254.28 304.374 cv
247.2 304.374 241.56 298.854 241.56 292.254 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
241.56 292.254 mo
241.56 285.534 247.2 280.014 254.28 280.014 cv
261.36 280.014 267 285.534 267 292.254 cv
267 292.254 li
267 298.854 261.36 304.374 254.28 304.374 cv
247.2 304.374 241.56 298.854 241.56 292.254 cv
.750179 .679652 .670191 .901488 cmyk
@
248.88 289.614 mo
258.6 289.614 li
258.6 297.054 li
248.88 297.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
248.88 297.054 mo
258.6 297.054 li
258.6 289.614 li
248.88 289.614 li
248.88 297.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
241.56 323.814 mo
241.56 317.094 246.6 311.694 252.84 311.694 cv
259.08 311.694 264.24 317.094 264.24 323.814 cv
264.24 323.814 li
264.24 330.534 259.08 335.934 252.84 335.934 cv
246.6 335.934 241.56 330.534 241.56 323.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
241.56 323.814 mo
241.56 317.094 246.6 311.694 252.84 311.694 cv
259.08 311.694 264.24 317.094 264.24 323.814 cv
264.24 323.814 li
264.24 330.534 259.08 335.934 252.84 335.934 cv
246.6 335.934 241.56 330.534 241.56 323.814 cv
.750179 .679652 .670191 .901488 cmyk
@
248.88 321.294 mo
258.6 321.294 li
258.6 328.614 li
248.88 328.614 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
248.88 328.614 mo
258.6 328.614 li
258.6 321.294 li
248.88 321.294 li
248.88 328.614 li
cp
.750179 .679652 .670191 .901488 cmyk
@
241.56 355.494 mo
241.56 348.774 247.2 343.254 254.28 343.254 cv
261.36 343.254 267 348.774 267 355.494 cv
267 355.494 li
267 362.214 261.36 367.614 254.28 367.614 cv
247.2 367.614 241.56 362.214 241.56 355.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
241.56 355.494 mo
241.56 348.774 247.2 343.254 254.28 343.254 cv
261.36 343.254 267 348.774 267 355.494 cv
267 355.494 li
267 362.214 261.36 367.614 254.28 367.614 cv
247.2 367.614 241.56 362.214 241.56 355.494 cv
.750179 .679652 .670191 .901488 cmyk
@
248.88 352.974 mo
258.6 352.974 li
258.6 360.294 li
248.88 360.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
248.88 360.294 mo
258.6 360.294 li
258.6 352.974 li
248.88 352.974 li
248.88 360.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
249 259.614 mo
239.88 259.614 232.44 273.774 232.44 291.294 cv
232.44 309.774 239.88 324.894 249 324.894 cv
249 324.894 li
@
249 292.374 mo
239.88 292.374 232.44 306.294 232.44 323.454 cv
232.44 340.974 239.88 355.134 248.88 355.134 cv
248.88 355.134 248.88 355.134 249 355.134 cv
@
249 228.174 mo
239.88 228.174 232.44 241.974 232.44 259.134 cv
232.44 277.494 239.28 292.494 247.56 292.494 cv
247.56 292.494 li
@
248.28 228.174 mo
243.36 228.534 239.4 244.974 239.28 265.614 cv
239.28 298.974 243.72 326.094 249.24 326.094 cv
249.24 326.094 li
@
249.24 259.494 mo
243.84 259.494 239.52 285.894 239.52 318.414 cv
239.52 338.934 243.48 355.614 248.16 355.614 cv
248.16 355.614 li
@
297.72 228.894 mo
297.72 222.174 302.76 216.774 309 216.774 cv
315.24 216.774 320.28 222.174 320.28 228.894 cv
320.28 228.894 li
320.28 235.614 315.24 241.134 309 241.134 cv
302.76 241.134 297.72 235.614 297.72 228.894 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
297.72 228.894 mo
297.72 222.174 302.76 216.774 309 216.774 cv
315.24 216.774 320.28 222.174 320.28 228.894 cv
320.28 228.894 li
320.28 235.614 315.24 241.134 309 241.134 cv
302.76 241.134 297.72 235.614 297.72 228.894 cv
.750179 .679652 .670191 .901488 cmyk
@
305.04 226.374 mo
314.64 226.374 li
314.64 233.694 li
305.04 233.694 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.04 233.694 mo
314.64 233.694 li
314.64 226.374 li
305.04 226.374 li
305.04 233.694 li
cp
.750179 .679652 .670191 .901488 cmyk
@
297.72 260.574 mo
297.72 253.854 303.36 248.454 310.44 248.454 cv
317.52 248.454 323.16 253.854 323.16 260.574 cv
323.16 260.574 li
323.16 267.294 317.52 272.694 310.44 272.694 cv
303.36 272.694 297.72 267.294 297.72 260.574 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
297.72 260.574 mo
297.72 253.854 303.36 248.454 310.44 248.454 cv
317.52 248.454 323.16 253.854 323.16 260.574 cv
323.16 260.574 li
323.16 267.294 317.52 272.694 310.44 272.694 cv
303.36 272.694 297.72 267.294 297.72 260.574 cv
.750179 .679652 .670191 .901488 cmyk
@
305.04 258.054 mo
314.64 258.054 li
314.64 265.374 li
305.04 265.374 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.04 265.374 mo
314.64 265.374 li
314.64 258.054 li
305.04 258.054 li
305.04 265.374 li
cp
.750179 .679652 .670191 .901488 cmyk
@
297.72 292.254 mo
297.72 285.534 303.36 280.014 310.44 280.014 cv
317.52 280.014 323.16 285.534 323.16 292.254 cv
323.16 292.254 li
323.16 298.854 317.52 304.374 310.44 304.374 cv
303.36 304.374 297.72 298.854 297.72 292.254 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
297.72 292.254 mo
297.72 285.534 303.36 280.014 310.44 280.014 cv
317.52 280.014 323.16 285.534 323.16 292.254 cv
323.16 292.254 li
323.16 298.854 317.52 304.374 310.44 304.374 cv
303.36 304.374 297.72 298.854 297.72 292.254 cv
.750179 .679652 .670191 .901488 cmyk
@
305.04 289.614 mo
314.64 289.614 li
314.64 297.054 li
305.04 297.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.04 297.054 mo
314.64 297.054 li
314.64 289.614 li
305.04 289.614 li
305.04 297.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
297.72 323.814 mo
297.72 317.094 302.76 311.694 309 311.694 cv
315.24 311.694 320.28 317.094 320.28 323.814 cv
320.28 323.814 li
320.28 330.534 315.24 335.934 309 335.934 cv
302.76 335.934 297.72 330.534 297.72 323.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
297.72 323.814 mo
297.72 317.094 302.76 311.694 309 311.694 cv
315.24 311.694 320.28 317.094 320.28 323.814 cv
320.28 323.814 li
320.28 330.534 315.24 335.934 309 335.934 cv
302.76 335.934 297.72 330.534 297.72 323.814 cv
.750179 .679652 .670191 .901488 cmyk
@
305.04 321.294 mo
314.64 321.294 li
314.64 328.614 li
305.04 328.614 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.04 328.614 mo
314.64 328.614 li
314.64 321.294 li
305.04 321.294 li
305.04 328.614 li
cp
.750179 .679652 .670191 .901488 cmyk
@
297.72 355.494 mo
297.72 348.774 303.36 343.254 310.44 343.254 cv
317.52 343.254 323.16 348.774 323.16 355.494 cv
323.16 355.494 li
323.16 362.214 317.52 367.614 310.44 367.614 cv
303.36 367.614 297.72 362.214 297.72 355.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
297.72 355.494 mo
297.72 348.774 303.36 343.254 310.44 343.254 cv
317.52 343.254 323.16 348.774 323.16 355.494 cv
323.16 355.494 li
323.16 362.214 317.52 367.614 310.44 367.614 cv
303.36 367.614 297.72 362.214 297.72 355.494 cv
.750179 .679652 .670191 .901488 cmyk
@
305.04 352.974 mo
314.64 352.974 li
314.64 360.294 li
305.04 360.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
305.04 360.294 mo
314.64 360.294 li
314.64 352.974 li
305.04 352.974 li
305.04 360.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
305.04 259.614 mo
296.04 259.614 288.6 273.774 288.6 291.294 cv
288.6 309.774 296.04 324.894 305.16 324.894 cv
305.16 324.894 li
@
305.16 292.374 mo
296.04 292.374 288.6 306.294 288.6 323.454 cv
288.6 340.974 295.92 355.134 305.04 355.134 cv
305.04 355.134 li
@
305.16 228.174 mo
296.04 228.174 288.6 241.974 288.6 259.134 cv
288.6 277.494 295.44 292.494 303.72 292.494 cv
303.72 292.494 li
@
304.44 228.174 mo
299.52 228.534 295.56 244.974 295.44 265.614 cv
295.44 298.974 299.88 326.094 305.4 326.094 cv
305.4 326.094 li
@
305.4 259.494 mo
300 259.494 295.68 285.894 295.68 318.414 cv
295.68 338.934 299.52 355.614 304.32 355.614 cv
304.32 355.614 li
@
354.36 228.894 mo
354.36 222.174 359.4 216.774 365.64 216.774 cv
372 216.774 377.04 222.174 377.04 228.894 cv
377.04 228.894 li
377.04 235.614 372 241.134 365.64 241.134 cv
359.4 241.134 354.36 235.614 354.36 228.894 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 228.894 mo
354.36 222.174 359.4 216.774 365.64 216.774 cv
372 216.774 377.04 222.174 377.04 228.894 cv
377.04 228.894 li
377.04 235.614 372 241.134 365.64 241.134 cv
359.4 241.134 354.36 235.614 354.36 228.894 cv
.750179 .679652 .670191 .901488 cmyk
@
361.68 226.374 mo
371.4 226.374 li
371.4 233.694 li
361.68 233.694 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
361.68 233.694 mo
371.4 233.694 li
371.4 226.374 li
361.68 226.374 li
361.68 233.694 li
cp
.750179 .679652 .670191 .901488 cmyk
@
354.36 260.574 mo
354.36 253.854 360.12 248.454 367.08 248.454 cv
374.16 248.454 379.8 253.854 379.8 260.574 cv
379.8 260.574 li
379.8 267.294 374.16 272.694 367.08 272.694 cv
360.12 272.694 354.36 267.294 354.36 260.574 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 260.574 mo
354.36 253.854 360.12 248.454 367.08 248.454 cv
374.16 248.454 379.8 253.854 379.8 260.574 cv
379.8 260.574 li
379.8 267.294 374.16 272.694 367.08 272.694 cv
360.12 272.694 354.36 267.294 354.36 260.574 cv
.750179 .679652 .670191 .901488 cmyk
@
361.68 258.054 mo
371.4 258.054 li
371.4 265.374 li
361.68 265.374 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
361.68 265.374 mo
371.4 265.374 li
371.4 258.054 li
361.68 258.054 li
361.68 265.374 li
cp
.750179 .679652 .670191 .901488 cmyk
@
354.36 292.254 mo
354.36 285.534 360.12 280.014 367.08 280.014 cv
374.16 280.014 379.8 285.534 379.8 292.254 cv
379.8 292.254 li
379.8 298.854 374.16 304.374 367.08 304.374 cv
360.12 304.374 354.36 298.854 354.36 292.254 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 292.254 mo
354.36 285.534 360.12 280.014 367.08 280.014 cv
374.16 280.014 379.8 285.534 379.8 292.254 cv
379.8 292.254 li
379.8 298.854 374.16 304.374 367.08 304.374 cv
360.12 304.374 354.36 298.854 354.36 292.254 cv
.750179 .679652 .670191 .901488 cmyk
@
361.68 289.614 mo
371.4 289.614 li
371.4 297.054 li
361.68 297.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
361.68 297.054 mo
371.4 297.054 li
371.4 289.614 li
361.68 289.614 li
361.68 297.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
354.36 323.814 mo
354.36 317.094 359.4 311.694 365.64 311.694 cv
372 311.694 377.04 317.094 377.04 323.814 cv
377.04 323.814 li
377.04 330.534 372 335.934 365.64 335.934 cv
359.4 335.934 354.36 330.534 354.36 323.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 323.814 mo
354.36 317.094 359.4 311.694 365.64 311.694 cv
372 311.694 377.04 317.094 377.04 323.814 cv
377.04 323.814 li
377.04 330.534 372 335.934 365.64 335.934 cv
359.4 335.934 354.36 330.534 354.36 323.814 cv
.750179 .679652 .670191 .901488 cmyk
@
361.68 321.294 mo
371.4 321.294 li
371.4 328.614 li
361.68 328.614 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
361.68 328.614 mo
371.4 328.614 li
371.4 321.294 li
361.68 321.294 li
361.68 328.614 li
cp
.750179 .679652 .670191 .901488 cmyk
@
354.36 355.494 mo
354.36 348.774 360.12 343.254 367.08 343.254 cv
374.16 343.254 379.8 348.774 379.8 355.494 cv
379.8 355.494 li
379.8 362.214 374.16 367.614 367.08 367.614 cv
360.12 367.614 354.36 362.214 354.36 355.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
354.36 355.494 mo
354.36 348.774 360.12 343.254 367.08 343.254 cv
374.16 343.254 379.8 348.774 379.8 355.494 cv
379.8 355.494 li
379.8 362.214 374.16 367.614 367.08 367.614 cv
360.12 367.614 354.36 362.214 354.36 355.494 cv
.750179 .679652 .670191 .901488 cmyk
@
361.68 352.974 mo
371.4 352.974 li
371.4 360.294 li
361.68 360.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
361.68 360.294 mo
371.4 360.294 li
371.4 352.974 li
361.68 352.974 li
361.68 360.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
361.8 259.614 mo
352.68 259.614 345.24 273.774 345.24 291.294 cv
345.24 309.774 352.68 324.894 361.8 324.894 cv
361.8 324.894 li
@
361.8 292.374 mo
352.68 292.374 345.24 306.294 345.24 323.454 cv
345.24 340.974 352.68 355.134 361.8 355.134 cv
361.8 355.134 li
@
361.8 228.174 mo
352.68 228.174 345.24 241.974 345.24 259.134 cv
345.24 277.494 352.08 292.494 360.48 292.494 cv
360.48 292.494 li
@
361.08 228.174 mo
356.16 228.534 352.32 244.974 352.08 265.614 cv
352.08 298.974 356.52 326.094 362.04 326.094 cv
362.04 326.094 li
@
362.04 259.494 mo
356.76 259.494 352.44 285.894 352.44 318.414 cv
352.44 338.934 356.28 355.614 360.96 355.614 cv
360.96 355.614 li
@
414.48 228.894 mo
414.48 222.174 419.52 216.774 425.76 216.774 cv
432 216.774 437.04 222.174 437.04 228.894 cv
437.04 228.894 li
437.04 235.614 432 241.134 425.76 241.134 cv
419.52 241.134 414.48 235.614 414.48 228.894 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
414.48 228.894 mo
414.48 222.174 419.52 216.774 425.76 216.774 cv
432 216.774 437.04 222.174 437.04 228.894 cv
437.04 228.894 li
437.04 235.614 432 241.134 425.76 241.134 cv
419.52 241.134 414.48 235.614 414.48 228.894 cv
.750179 .679652 .670191 .901488 cmyk
@
421.8 226.374 mo
431.4 226.374 li
431.4 233.694 li
421.8 233.694 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
421.8 233.694 mo
431.4 233.694 li
431.4 226.374 li
421.8 226.374 li
421.8 233.694 li
cp
.750179 .679652 .670191 .901488 cmyk
@
414.48 260.574 mo
414.48 253.854 420.12 248.454 427.2 248.454 cv
434.16 248.454 439.92 253.854 439.92 260.574 cv
439.92 260.574 li
439.92 267.294 434.16 272.694 427.2 272.694 cv
420.12 272.694 414.48 267.294 414.48 260.574 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
414.48 260.574 mo
414.48 253.854 420.12 248.454 427.2 248.454 cv
434.16 248.454 439.92 253.854 439.92 260.574 cv
439.92 260.574 li
439.92 267.294 434.16 272.694 427.2 272.694 cv
420.12 272.694 414.48 267.294 414.48 260.574 cv
.750179 .679652 .670191 .901488 cmyk
@
421.8 258.054 mo
431.4 258.054 li
431.4 265.374 li
421.8 265.374 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
421.8 265.374 mo
431.4 265.374 li
431.4 258.054 li
421.8 258.054 li
421.8 265.374 li
cp
.750179 .679652 .670191 .901488 cmyk
@
414.48 292.254 mo
414.48 285.534 420.12 280.014 427.2 280.014 cv
434.16 280.014 439.92 285.534 439.92 292.254 cv
439.92 292.254 li
439.92 298.854 434.16 304.374 427.2 304.374 cv
420.12 304.374 414.48 298.854 414.48 292.254 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
414.48 292.254 mo
414.48 285.534 420.12 280.014 427.2 280.014 cv
434.16 280.014 439.92 285.534 439.92 292.254 cv
439.92 292.254 li
439.92 298.854 434.16 304.374 427.2 304.374 cv
420.12 304.374 414.48 298.854 414.48 292.254 cv
.750179 .679652 .670191 .901488 cmyk
@
421.8 289.614 mo
431.4 289.614 li
431.4 297.054 li
421.8 297.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
421.8 297.054 mo
431.4 297.054 li
431.4 289.614 li
421.8 289.614 li
421.8 297.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
414.48 323.814 mo
414.48 317.094 419.52 311.694 425.76 311.694 cv
432 311.694 437.04 317.094 437.04 323.814 cv
437.04 323.814 li
437.04 330.534 432 335.934 425.76 335.934 cv
419.52 335.934 414.48 330.534 414.48 323.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
414.48 323.814 mo
414.48 317.094 419.52 311.694 425.76 311.694 cv
432 311.694 437.04 317.094 437.04 323.814 cv
437.04 323.814 li
437.04 330.534 432 335.934 425.76 335.934 cv
419.52 335.934 414.48 330.534 414.48 323.814 cv
.750179 .679652 .670191 .901488 cmyk
@
421.8 321.294 mo
431.4 321.294 li
431.4 328.614 li
421.8 328.614 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
421.8 328.614 mo
431.4 328.614 li
431.4 321.294 li
421.8 321.294 li
421.8 328.614 li
cp
.750179 .679652 .670191 .901488 cmyk
@
414.48 355.494 mo
414.48 348.774 420.12 343.254 427.2 343.254 cv
434.16 343.254 439.92 348.774 439.92 355.494 cv
439.92 355.494 li
439.92 362.214 434.16 367.614 427.2 367.614 cv
420.12 367.614 414.48 362.214 414.48 355.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
414.48 355.494 mo
414.48 348.774 420.12 343.254 427.2 343.254 cv
434.16 343.254 439.92 348.774 439.92 355.494 cv
439.92 355.494 li
439.92 362.214 434.16 367.614 427.2 367.614 cv
420.12 367.614 414.48 362.214 414.48 355.494 cv
.750179 .679652 .670191 .901488 cmyk
@
421.8 352.974 mo
431.4 352.974 li
431.4 360.294 li
421.8 360.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
421.8 360.294 mo
431.4 360.294 li
431.4 352.974 li
421.8 352.974 li
421.8 360.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
421.8 259.614 mo
412.8 259.614 405.36 273.774 405.36 291.294 cv
405.36 309.774 412.8 324.894 421.92 324.894 cv
421.92 324.894 li
@
421.92 292.374 mo
412.8 292.374 405.36 306.294 405.36 323.454 cv
405.36 340.974 412.68 355.134 421.8 355.134 cv
421.8 355.134 li
@
421.92 228.174 mo
412.8 228.174 405.36 241.974 405.36 259.134 cv
405.36 277.494 412.08 292.494 420.48 292.494 cv
420.48 292.494 li
@
421.2 228.174 mo
416.28 228.534 412.32 244.974 412.2 265.614 cv
412.2 298.974 416.64 326.094 422.16 326.094 cv
422.16 326.094 li
@
422.16 259.494 mo
416.76 259.494 412.44 285.894 412.44 318.414 cv
412.44 338.934 416.28 355.614 421.08 355.614 cv
421.08 355.614 li
@
183.6 34.0142 mo
183.6 27.2943 188.64 21.7742 194.88 21.7742 cv
201.12 21.7742 206.16 27.2943 206.16 34.0142 cv
206.16 34.0142 li
206.16 40.7343 201.12 46.1342 194.88 46.1342 cv
188.64 46.1342 183.6 40.7343 183.6 34.0142 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
183.6 34.0143 mo
183.6 27.2943 188.64 21.7742 194.88 21.7742 cv
201.12 21.7742 206.16 27.2943 206.16 34.0143 cv
206.16 34.0143 li
206.16 40.7343 201.12 46.1343 194.88 46.1343 cv
188.64 46.1343 183.6 40.7343 183.6 34.0143 cv
.750179 .679652 .670191 .901488 cmyk
@
190.92 31.4943 mo
200.52 31.4943 li
200.52 38.8143 li
190.92 38.8143 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
190.92 38.8143 mo
200.52 38.8143 li
200.52 31.4943 li
190.92 31.4943 li
190.92 38.8143 li
cp
.750179 .679652 .670191 .901488 cmyk
@
183.6 65.5742 mo
183.6 58.8542 189.24 53.4542 196.32 53.4542 cv
203.28 53.4542 209.04 58.8542 209.04 65.5742 cv
209.04 65.5742 li
209.04 72.2943 203.28 77.8142 196.32 77.8142 cv
189.24 77.8142 183.6 72.2943 183.6 65.5742 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
183.6 65.5743 mo
183.6 58.8542 189.24 53.4542 196.32 53.4542 cv
203.28 53.4542 209.04 58.8542 209.04 65.5743 cv
209.04 65.5743 li
209.04 72.2943 203.28 77.8142 196.32 77.8142 cv
189.24 77.8142 183.6 72.2943 183.6 65.5743 cv
.750179 .679652 .670191 .901488 cmyk
@
190.92 63.0543 mo
200.52 63.0543 li
200.52 70.3742 li
190.92 70.3742 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
190.92 70.3742 mo
200.52 70.3742 li
200.52 63.0543 li
190.92 63.0543 li
190.92 70.3742 li
cp
.750179 .679652 .670191 .901488 cmyk
@
183.6 97.2542 mo
183.6 90.5342 189.24 85.1342 196.32 85.1342 cv
203.28 85.1342 209.04 90.5342 209.04 97.2542 cv
209.04 97.2542 li
209.04 103.974 203.28 109.374 196.32 109.374 cv
189.24 109.374 183.6 103.974 183.6 97.2542 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
183.6 97.2542 mo
183.6 90.5342 189.24 85.1342 196.32 85.1342 cv
203.28 85.1342 209.04 90.5342 209.04 97.2542 cv
209.04 97.2542 li
209.04 103.974 203.28 109.374 196.32 109.374 cv
189.24 109.374 183.6 103.974 183.6 97.2542 cv
.750179 .679652 .670191 .901488 cmyk
@
190.92 94.7343 mo
200.52 94.7343 li
200.52 102.054 li
190.92 102.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
190.92 102.054 mo
200.52 102.054 li
200.52 94.7342 li
190.92 94.7342 li
190.92 102.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
183.6 128.814 mo
183.6 122.214 188.64 116.694 194.88 116.694 cv
201.12 116.694 206.16 122.214 206.16 128.814 cv
206.16 128.814 li
206.16 135.534 201.12 141.054 194.88 141.054 cv
188.64 141.054 183.6 135.534 183.6 128.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
183.6 128.814 mo
183.6 122.214 188.64 116.694 194.88 116.694 cv
201.12 116.694 206.16 122.214 206.16 128.814 cv
206.16 128.814 li
206.16 135.534 201.12 141.054 194.88 141.054 cv
188.64 141.054 183.6 135.534 183.6 128.814 cv
.750179 .679652 .670191 .901488 cmyk
@
190.92 126.294 mo
200.52 126.294 li
200.52 133.734 li
190.92 133.734 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
190.92 133.734 mo
200.52 133.734 li
200.52 126.294 li
190.92 126.294 li
190.92 133.734 li
cp
.750179 .679652 .670191 .901488 cmyk
@
183.6 160.494 mo
183.6 153.774 189.24 148.374 196.32 148.374 cv
203.28 148.374 209.04 153.774 209.04 160.494 cv
209.04 160.494 li
209.04 167.214 203.28 172.614 196.32 172.614 cv
189.24 172.614 183.6 167.214 183.6 160.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
183.6 160.494 mo
183.6 153.774 189.24 148.374 196.32 148.374 cv
203.28 148.374 209.04 153.774 209.04 160.494 cv
209.04 160.494 li
209.04 167.214 203.28 172.614 196.32 172.614 cv
189.24 172.614 183.6 167.214 183.6 160.494 cv
.750179 .679652 .670191 .901488 cmyk
@
190.92 157.974 mo
200.52 157.974 li
200.52 165.294 li
190.92 165.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
190.92 165.294 mo
200.52 165.294 li
200.52 157.974 li
190.92 157.974 li
190.92 165.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
190.92 38.8143 mo
185.88 38.2142 180.84 57.4142 190.92 63.0543 cv
@
190.92 70.3742 mo
185.88 69.7742 180.84 88.9742 190.92 94.7342 cv
@
190.92 102.054 mo
185.88 101.454 180.84 120.654 190.92 126.294 cv
@
190.92 133.734 mo
185.88 133.014 180.84 152.214 190.92 157.974 cv
@
190.92 31.4943 mo
183.96 31.2543 147.72 92.0942 190.92 165.294 cv
@
238.2 34.0142 mo
238.2 27.2943 243.24 21.7742 249.48 21.7742 cv
255.72 21.7742 260.76 27.2943 260.76 34.0142 cv
260.76 34.0142 li
260.76 40.7343 255.72 46.1342 249.48 46.1342 cv
243.24 46.1342 238.2 40.7343 238.2 34.0142 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
238.2 34.0143 mo
238.2 27.2943 243.24 21.7742 249.48 21.7742 cv
255.72 21.7742 260.76 27.2943 260.76 34.0143 cv
260.76 34.0143 li
260.76 40.7343 255.72 46.1343 249.48 46.1343 cv
243.24 46.1343 238.2 40.7343 238.2 34.0143 cv
.750179 .679652 .670191 .901488 cmyk
@
245.52 31.4943 mo
255.12 31.4943 li
255.12 38.8143 li
245.52 38.8143 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
245.52 38.8143 mo
255.12 38.8143 li
255.12 31.4943 li
245.52 31.4943 li
245.52 38.8143 li
cp
.750179 .679652 .670191 .901488 cmyk
@
238.2 65.5742 mo
238.2 58.8542 243.84 53.4542 250.92 53.4542 cv
258 53.4542 263.64 58.8542 263.64 65.5742 cv
263.64 65.5742 li
263.64 72.2943 258 77.8142 250.92 77.8142 cv
243.84 77.8142 238.2 72.2943 238.2 65.5742 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
238.2 65.5743 mo
238.2 58.8542 243.84 53.4542 250.92 53.4542 cv
258 53.4542 263.64 58.8542 263.64 65.5743 cv
263.64 65.5743 li
263.64 72.2943 258 77.8142 250.92 77.8142 cv
243.84 77.8142 238.2 72.2943 238.2 65.5743 cv
.750179 .679652 .670191 .901488 cmyk
@
245.52 63.0543 mo
255.12 63.0543 li
255.12 70.3742 li
245.52 70.3742 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
245.52 70.3742 mo
255.12 70.3742 li
255.12 63.0543 li
245.52 63.0543 li
245.52 70.3742 li
cp
.750179 .679652 .670191 .901488 cmyk
@
238.2 97.2542 mo
238.2 90.5342 243.84 85.1342 250.92 85.1342 cv
258 85.1342 263.64 90.5342 263.64 97.2542 cv
263.64 97.2542 li
263.64 103.974 258 109.374 250.92 109.374 cv
243.84 109.374 238.2 103.974 238.2 97.2542 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
238.2 97.2542 mo
238.2 90.5342 243.84 85.1342 250.92 85.1342 cv
258 85.1342 263.64 90.5342 263.64 97.2542 cv
263.64 97.2542 li
263.64 103.974 258 109.374 250.92 109.374 cv
243.84 109.374 238.2 103.974 238.2 97.2542 cv
.750179 .679652 .670191 .901488 cmyk
@
245.52 94.7343 mo
255.12 94.7343 li
255.12 102.054 li
245.52 102.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
245.52 102.054 mo
255.12 102.054 li
255.12 94.7342 li
245.52 94.7342 li
245.52 102.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
238.2 128.814 mo
238.2 122.214 243.24 116.694 249.48 116.694 cv
255.72 116.694 260.76 122.214 260.76 128.814 cv
260.76 128.814 li
260.76 135.534 255.72 141.054 249.48 141.054 cv
243.24 141.054 238.2 135.534 238.2 128.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
238.2 128.814 mo
238.2 122.214 243.24 116.694 249.48 116.694 cv
255.72 116.694 260.76 122.214 260.76 128.814 cv
260.76 128.814 li
260.76 135.534 255.72 141.054 249.48 141.054 cv
243.24 141.054 238.2 135.534 238.2 128.814 cv
.750179 .679652 .670191 .901488 cmyk
@
245.52 126.294 mo
255.12 126.294 li
255.12 133.734 li
245.52 133.734 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
245.52 133.734 mo
255.12 133.734 li
255.12 126.294 li
245.52 126.294 li
245.52 133.734 li
cp
.750179 .679652 .670191 .901488 cmyk
@
238.2 160.494 mo
238.2 153.774 243.84 148.374 250.92 148.374 cv
258 148.374 263.64 153.774 263.64 160.494 cv
263.64 160.494 li
263.64 167.214 258 172.614 250.92 172.614 cv
243.84 172.614 238.2 167.214 238.2 160.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
238.2 160.494 mo
238.2 153.774 243.84 148.374 250.92 148.374 cv
258 148.374 263.64 153.774 263.64 160.494 cv
263.64 160.494 li
263.64 167.214 258 172.614 250.92 172.614 cv
243.84 172.614 238.2 167.214 238.2 160.494 cv
.750179 .679652 .670191 .901488 cmyk
@
245.52 157.974 mo
255.12 157.974 li
255.12 165.294 li
245.52 165.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
245.52 165.294 mo
255.12 165.294 li
255.12 157.974 li
245.52 157.974 li
245.52 165.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
245.52 38.8143 mo
240.48 38.2142 235.44 57.4142 245.52 63.0543 cv
@
245.52 70.3742 mo
240.48 69.7742 235.44 88.9742 245.52 94.7342 cv
@
245.52 102.054 mo
240.48 101.454 235.44 120.654 245.52 126.294 cv
@
245.52 133.734 mo
240.48 133.014 235.44 152.214 245.52 157.974 cv
@
245.52 31.4943 mo
238.56 31.2543 202.44 92.0942 245.52 165.294 cv
@
294.12 34.0142 mo
294.12 27.2943 299.16 21.7742 305.4 21.7742 cv
311.64 21.7742 316.8 27.2943 316.8 34.0142 cv
316.8 34.0142 li
316.8 40.7343 311.64 46.1342 305.4 46.1342 cv
299.16 46.1342 294.12 40.7343 294.12 34.0142 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
294.12 34.0143 mo
294.12 27.2943 299.16 21.7742 305.4 21.7742 cv
311.64 21.7742 316.8 27.2943 316.8 34.0143 cv
316.8 34.0143 li
316.8 40.7343 311.64 46.1343 305.4 46.1343 cv
299.16 46.1343 294.12 40.7343 294.12 34.0143 cv
.750179 .679652 .670191 .901488 cmyk
@
301.44 31.4943 mo
311.16 31.4943 li
311.16 38.8143 li
301.44 38.8143 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
301.44 38.8143 mo
311.16 38.8143 li
311.16 31.4943 li
301.44 31.4943 li
301.44 38.8143 li
cp
.750179 .679652 .670191 .901488 cmyk
@
294.12 65.5742 mo
294.12 58.8542 299.76 53.4542 306.84 53.4542 cv
313.92 53.4542 319.56 58.8542 319.56 65.5742 cv
319.56 65.5742 li
319.56 72.2943 313.92 77.8142 306.84 77.8142 cv
299.76 77.8142 294.12 72.2943 294.12 65.5742 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
294.12 65.5743 mo
294.12 58.8542 299.76 53.4542 306.84 53.4542 cv
313.92 53.4542 319.56 58.8542 319.56 65.5743 cv
319.56 65.5743 li
319.56 72.2943 313.92 77.8142 306.84 77.8142 cv
299.76 77.8142 294.12 72.2943 294.12 65.5743 cv
.750179 .679652 .670191 .901488 cmyk
@
301.44 63.0543 mo
311.16 63.0543 li
311.16 70.3742 li
301.44 70.3742 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
301.44 70.3742 mo
311.16 70.3742 li
311.16 63.0543 li
301.44 63.0543 li
301.44 70.3742 li
cp
.750179 .679652 .670191 .901488 cmyk
@
294.12 97.2542 mo
294.12 90.5342 299.76 85.1342 306.84 85.1342 cv
313.92 85.1342 319.56 90.5342 319.56 97.2542 cv
319.56 97.2542 li
319.56 103.974 313.92 109.374 306.84 109.374 cv
299.76 109.374 294.12 103.974 294.12 97.2542 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
294.12 97.2542 mo
294.12 90.5342 299.76 85.1342 306.84 85.1342 cv
313.92 85.1342 319.56 90.5342 319.56 97.2542 cv
319.56 97.2542 li
319.56 103.974 313.92 109.374 306.84 109.374 cv
299.76 109.374 294.12 103.974 294.12 97.2542 cv
.750179 .679652 .670191 .901488 cmyk
@
301.44 94.7343 mo
311.16 94.7343 li
311.16 102.054 li
301.44 102.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
301.44 102.054 mo
311.16 102.054 li
311.16 94.7342 li
301.44 94.7342 li
301.44 102.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
294.12 128.814 mo
294.12 122.214 299.16 116.694 305.4 116.694 cv
311.64 116.694 316.8 122.214 316.8 128.814 cv
316.8 128.814 li
316.8 135.534 311.64 141.054 305.4 141.054 cv
299.16 141.054 294.12 135.534 294.12 128.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
294.12 128.814 mo
294.12 122.214 299.16 116.694 305.4 116.694 cv
311.64 116.694 316.8 122.214 316.8 128.814 cv
316.8 128.814 li
316.8 135.534 311.64 141.054 305.4 141.054 cv
299.16 141.054 294.12 135.534 294.12 128.814 cv
.750179 .679652 .670191 .901488 cmyk
@
301.44 126.294 mo
311.16 126.294 li
311.16 133.734 li
301.44 133.734 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
301.44 133.734 mo
311.16 133.734 li
311.16 126.294 li
301.44 126.294 li
301.44 133.734 li
cp
.750179 .679652 .670191 .901488 cmyk
@
294.12 160.494 mo
294.12 153.774 299.76 148.374 306.84 148.374 cv
313.92 148.374 319.56 153.774 319.56 160.494 cv
319.56 160.494 li
319.56 167.214 313.92 172.614 306.84 172.614 cv
299.76 172.614 294.12 167.214 294.12 160.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
294.12 160.494 mo
294.12 153.774 299.76 148.374 306.84 148.374 cv
313.92 148.374 319.56 153.774 319.56 160.494 cv
319.56 160.494 li
319.56 167.214 313.92 172.614 306.84 172.614 cv
299.76 172.614 294.12 167.214 294.12 160.494 cv
.750179 .679652 .670191 .901488 cmyk
@
301.44 157.974 mo
311.16 157.974 li
311.16 165.294 li
301.44 165.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
301.44 165.294 mo
311.16 165.294 li
311.16 157.974 li
301.44 157.974 li
301.44 165.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
301.44 38.8143 mo
296.52 38.2142 291.36 57.4142 301.44 63.0543 cv
@
301.44 70.3742 mo
296.52 69.7742 291.36 88.9742 301.44 94.7342 cv
@
301.44 102.054 mo
296.52 101.454 291.36 120.654 301.44 126.294 cv
@
301.44 133.734 mo
296.52 133.014 291.36 152.214 301.44 157.974 cv
@
301.44 31.4943 mo
294.48 31.2543 258.36 92.0942 301.44 165.294 cv
@
348.36 34.0142 mo
348.36 27.2943 353.4 21.7742 359.64 21.7742 cv
365.88 21.7742 370.92 27.2943 370.92 34.0142 cv
370.92 34.0142 li
370.92 40.7343 365.88 46.1342 359.64 46.1342 cv
353.4 46.1342 348.36 40.7343 348.36 34.0142 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
348.36 34.0143 mo
348.36 27.2943 353.4 21.7742 359.64 21.7742 cv
365.88 21.7742 370.92 27.2943 370.92 34.0143 cv
370.92 34.0143 li
370.92 40.7343 365.88 46.1343 359.64 46.1343 cv
353.4 46.1343 348.36 40.7343 348.36 34.0143 cv
.750179 .679652 .670191 .901488 cmyk
@
355.68 31.4943 mo
365.28 31.4943 li
365.28 38.8143 li
355.68 38.8143 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
355.68 38.8143 mo
365.28 38.8143 li
365.28 31.4943 li
355.68 31.4943 li
355.68 38.8143 li
cp
.750179 .679652 .670191 .901488 cmyk
@
348.36 65.5742 mo
348.36 58.8542 354 53.4542 361.08 53.4542 cv
368.16 53.4542 373.8 58.8542 373.8 65.5742 cv
373.8 65.5742 li
373.8 72.2943 368.16 77.8142 361.08 77.8142 cv
354 77.8142 348.36 72.2943 348.36 65.5742 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
348.36 65.5743 mo
348.36 58.8542 354 53.4542 361.08 53.4542 cv
368.16 53.4542 373.8 58.8542 373.8 65.5743 cv
373.8 65.5743 li
373.8 72.2943 368.16 77.8142 361.08 77.8142 cv
354 77.8142 348.36 72.2943 348.36 65.5743 cv
.750179 .679652 .670191 .901488 cmyk
@
355.68 63.0543 mo
365.28 63.0543 li
365.28 70.3742 li
355.68 70.3742 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
355.68 70.3742 mo
365.28 70.3742 li
365.28 63.0543 li
355.68 63.0543 li
355.68 70.3742 li
cp
.750179 .679652 .670191 .901488 cmyk
@
348.36 97.2542 mo
348.36 90.5342 354 85.1342 361.08 85.1342 cv
368.16 85.1342 373.8 90.5342 373.8 97.2542 cv
373.8 97.2542 li
373.8 103.974 368.16 109.374 361.08 109.374 cv
354 109.374 348.36 103.974 348.36 97.2542 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
348.36 97.2542 mo
348.36 90.5342 354 85.1342 361.08 85.1342 cv
368.16 85.1342 373.8 90.5342 373.8 97.2542 cv
373.8 97.2542 li
373.8 103.974 368.16 109.374 361.08 109.374 cv
354 109.374 348.36 103.974 348.36 97.2542 cv
.750179 .679652 .670191 .901488 cmyk
@
355.68 94.7343 mo
365.28 94.7343 li
365.28 102.054 li
355.68 102.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
355.68 102.054 mo
365.28 102.054 li
365.28 94.7342 li
355.68 94.7342 li
355.68 102.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
348.36 128.814 mo
348.36 122.214 353.4 116.694 359.64 116.694 cv
365.88 116.694 370.92 122.214 370.92 128.814 cv
370.92 128.814 li
370.92 135.534 365.88 141.054 359.64 141.054 cv
353.4 141.054 348.36 135.534 348.36 128.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
348.36 128.814 mo
348.36 122.214 353.4 116.694 359.64 116.694 cv
365.88 116.694 370.92 122.214 370.92 128.814 cv
370.92 128.814 li
370.92 135.534 365.88 141.054 359.64 141.054 cv
353.4 141.054 348.36 135.534 348.36 128.814 cv
.750179 .679652 .670191 .901488 cmyk
@
355.68 126.294 mo
365.28 126.294 li
365.28 133.734 li
355.68 133.734 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
355.68 133.734 mo
365.28 133.734 li
365.28 126.294 li
355.68 126.294 li
355.68 133.734 li
cp
.750179 .679652 .670191 .901488 cmyk
@
348.36 160.494 mo
348.36 153.774 354 148.374 361.08 148.374 cv
368.16 148.374 373.8 153.774 373.8 160.494 cv
373.8 160.494 li
373.8 167.214 368.16 172.614 361.08 172.614 cv
354 172.614 348.36 167.214 348.36 160.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
348.36 160.494 mo
348.36 153.774 354 148.374 361.08 148.374 cv
368.16 148.374 373.8 153.774 373.8 160.494 cv
373.8 160.494 li
373.8 167.214 368.16 172.614 361.08 172.614 cv
354 172.614 348.36 167.214 348.36 160.494 cv
.750179 .679652 .670191 .901488 cmyk
@
355.68 157.974 mo
365.28 157.974 li
365.28 165.294 li
355.68 165.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
355.68 165.294 mo
365.28 165.294 li
365.28 157.974 li
355.68 157.974 li
355.68 165.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
355.68 38.8143 mo
350.64 38.2142 345.6 57.4142 355.68 63.0543 cv
@
355.68 70.3742 mo
350.64 69.7742 345.6 88.9742 355.68 94.7342 cv
@
355.68 102.054 mo
350.64 101.454 345.6 120.654 355.68 126.294 cv
@
355.68 133.734 mo
350.64 133.014 345.6 152.214 355.68 157.974 cv
@
355.68 31.4943 mo
348.72 31.2543 312.6 92.0942 355.68 165.294 cv
@
410.28 34.0142 mo
410.28 27.2943 415.32 21.7742 421.68 21.7742 cv
427.92 21.7742 432.96 27.2943 432.96 34.0142 cv
432.96 34.0142 li
432.96 40.7343 427.92 46.1342 421.68 46.1342 cv
415.32 46.1342 410.28 40.7343 410.28 34.0142 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
410.28 34.0143 mo
410.28 27.2943 415.32 21.7742 421.68 21.7742 cv
427.92 21.7742 432.96 27.2943 432.96 34.0143 cv
432.96 34.0143 li
432.96 40.7343 427.92 46.1343 421.68 46.1343 cv
415.32 46.1343 410.28 40.7343 410.28 34.0143 cv
.750179 .679652 .670191 .901488 cmyk
@
417.6 31.4943 mo
427.32 31.4943 li
427.32 38.8143 li
417.6 38.8143 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
417.6 38.8143 mo
427.32 38.8143 li
427.32 31.4943 li
417.6 31.4943 li
417.6 38.8143 li
cp
.750179 .679652 .670191 .901488 cmyk
@
410.28 65.5742 mo
410.28 58.8542 416.04 53.4542 423 53.4542 cv
430.08 53.4542 435.84 58.8542 435.84 65.5742 cv
435.84 65.5742 li
435.84 72.2943 430.08 77.8142 423 77.8142 cv
416.04 77.8142 410.28 72.2943 410.28 65.5742 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
410.28 65.5743 mo
410.28 58.8542 416.04 53.4542 423 53.4542 cv
430.08 53.4542 435.84 58.8542 435.84 65.5743 cv
435.84 65.5743 li
435.84 72.2943 430.08 77.8142 423 77.8142 cv
416.04 77.8142 410.28 72.2943 410.28 65.5743 cv
.750179 .679652 .670191 .901488 cmyk
@
417.6 63.0543 mo
427.32 63.0543 li
427.32 70.3742 li
417.6 70.3742 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
417.6 70.3742 mo
427.32 70.3742 li
427.32 63.0543 li
417.6 63.0543 li
417.6 70.3742 li
cp
.750179 .679652 .670191 .901488 cmyk
@
410.28 97.2542 mo
410.28 90.5342 416.04 85.1342 423 85.1342 cv
430.08 85.1342 435.84 90.5342 435.84 97.2542 cv
435.84 97.2542 li
435.84 103.974 430.08 109.374 423 109.374 cv
416.04 109.374 410.28 103.974 410.28 97.2542 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
410.28 97.2542 mo
410.28 90.5342 416.04 85.1342 423 85.1342 cv
430.08 85.1342 435.84 90.5342 435.84 97.2542 cv
435.84 97.2542 li
435.84 103.974 430.08 109.374 423 109.374 cv
416.04 109.374 410.28 103.974 410.28 97.2542 cv
.750179 .679652 .670191 .901488 cmyk
@
417.6 94.7343 mo
427.32 94.7343 li
427.32 102.054 li
417.6 102.054 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
417.6 102.054 mo
427.32 102.054 li
427.32 94.7342 li
417.6 94.7342 li
417.6 102.054 li
cp
.750179 .679652 .670191 .901488 cmyk
@
410.28 128.814 mo
410.28 122.214 415.32 116.694 421.68 116.694 cv
427.92 116.694 432.96 122.214 432.96 128.814 cv
432.96 128.814 li
432.96 135.534 427.92 141.054 421.68 141.054 cv
415.32 141.054 410.28 135.534 410.28 128.814 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
410.28 128.814 mo
410.28 122.214 415.32 116.694 421.68 116.694 cv
427.92 116.694 432.96 122.214 432.96 128.814 cv
432.96 128.814 li
432.96 135.534 427.92 141.054 421.68 141.054 cv
415.32 141.054 410.28 135.534 410.28 128.814 cv
.750179 .679652 .670191 .901488 cmyk
@
417.6 126.294 mo
427.32 126.294 li
427.32 133.734 li
417.6 133.734 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
417.6 133.734 mo
427.32 133.734 li
427.32 126.294 li
417.6 126.294 li
417.6 133.734 li
cp
.750179 .679652 .670191 .901488 cmyk
@
410.28 160.494 mo
410.28 153.774 416.04 148.374 423 148.374 cv
430.08 148.374 435.84 153.774 435.84 160.494 cv
435.84 160.494 li
435.84 167.214 430.08 172.614 423 172.614 cv
416.04 172.614 410.28 167.214 410.28 160.494 cv
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
410.28 160.494 mo
410.28 153.774 416.04 148.374 423 148.374 cv
430.08 148.374 435.84 153.774 435.84 160.494 cv
435.84 160.494 li
435.84 167.214 430.08 172.614 423 172.614 cv
416.04 172.614 410.28 167.214 410.28 160.494 cv
.750179 .679652 .670191 .901488 cmyk
@
417.6 157.974 mo
427.32 157.974 li
427.32 165.294 li
417.6 165.294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
417.6 165.294 mo
427.32 165.294 li
427.32 157.974 li
417.6 157.974 li
417.6 165.294 li
cp
.750179 .679652 .670191 .901488 cmyk
@
417.6 38.8143 mo
412.68 38.2142 407.52 57.4142 417.6 63.0543 cv
@
417.6 70.3742 mo
412.68 69.7742 407.52 88.9742 417.6 94.7342 cv
@
417.6 102.054 mo
412.68 101.454 407.52 120.654 417.6 126.294 cv
@
417.6 133.734 mo
412.68 133.014 407.52 152.214 417.6 157.974 cv
@
417.6 31.4943 mo
410.76 31.2543 374.52 92.0942 417.6 165.294 cv
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FOOEDI+Calibri#20Bold*1 uf
/FOOEDI+Calibri#20Bold uf
/HIBBAA+Calibri#20Bold uf
/FOOEDH+Times#20New#20Roman#20Bold*1 uf
/FOOEDH+Times#20New#20Roman#20Bold uf
/PBAAAA+Times#20New#20Roman#20Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
