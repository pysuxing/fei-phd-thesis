%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: latency16flit2pattern1.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: leifei
%%CreationDate: 2018/7/4, 15:01:35
%%BoundingBox: 0 0 423 384
%%HiResBoundingBox: 0 0 423 384
%%CropBox: 0 0 423 384
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 755 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-07-04T09:02:27+08:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2018-07-04T09:02:27+08:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) kpathsea version 6.2.1"
   pdf:Producer="pdfTeX-1.40.16"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -384 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 384 li
423 384 li
423 0 li
cp
clp
[1 0 0 1 0 0 ]ct
-65 391 mo
511 391 li
511 -41 li
-65 -41 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.4 347.8 mo
403 347.8 li
403 2.20001 li
57.4 2.20001 li
cp
f
gsave
57.4 347.8 mo
403 347.8 li
403 2.19998 li
57.4 2.19998 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.7027 283.269 mo
100.254 277.175 li
102.285 -42 li
/1 
[/DeviceCMYK] /CSA add_res
3.0518e-5 1 1 3.0518e-5 cmyk
@
gsave
53.7027 291.269 mo
69.7027 291.269 li
69.7027 275.269 li
53.7027 275.269 li
cp
clp
0 lc
61.7027 290.769 mo
63.6917 290.769 65.5996 289.979 67.006 288.572 cv
68.4125 287.166 69.2027 285.258 69.2027 283.269 cv
69.2027 281.28 68.4125 279.372 67.006 277.966 cv
65.5996 276.559 63.6917 275.769 61.7027 275.769 cv
59.7137 275.769 57.8059 276.559 56.3994 277.966 cv
54.993 279.372 54.2027 281.28 54.2027 283.269 cv
54.2027 285.258 54.993 287.166 56.3994 288.572 cv
57.8059 289.979 59.7137 290.769 61.7027 290.769 cv
cp
@
grestore
gsave
92.2544 285.175 mo
108.254 285.175 li
108.254 269.175 li
92.2544 269.175 li
cp
clp
0 lc
100.254 284.675 mo
102.243 284.675 104.151 283.884 105.558 282.478 cv
106.964 281.072 107.754 279.164 107.754 277.175 cv
107.754 275.186 106.964 273.278 105.558 271.871 cv
104.151 270.465 102.243 269.675 100.254 269.675 cv
98.2654 269.675 96.3575 270.465 94.9511 271.871 cv
93.5446 273.278 92.7544 275.186 92.7544 277.175 cv
92.7544 279.164 93.5446 281.072 94.9511 282.478 cv
96.3575 283.884 98.2654 284.675 100.254 284.675 cv
cp
@
grestore
grestore
gsave
57.4 347.8 mo
403 347.8 li
403 2.19998 li
57.4 2.19998 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.72 180.243 mo
142.072 177.68 li
228.472 170.464 li
314.872 158.633 li
359.454 148.686 li
361.457 -42 li
.884459 .268986 1 .168215 cmyk
@
gsave
54.0871 186.811 mo
69.3529 186.811 li
69.3529 172.243 li
54.0871 172.243 li
cp
clp
0 lc
2 lj
61.72 172.743 mo
60.0361 177.925 li
54.5871 177.925 li
58.9955 181.128 li
57.3116 186.311 li
61.72 183.108 li
66.1284 186.311 li
64.4445 181.128 li
68.8529 177.925 li
63.4039 177.925 li
cp
@
grestore
gsave
134.439 184.248 mo
149.705 184.248 li
149.705 169.68 li
134.439 169.68 li
cp
clp
0 lc
2 lj
142.072 170.18 mo
140.388 175.363 li
134.939 175.363 li
139.347 178.566 li
137.664 183.748 li
142.072 180.545 li
146.48 183.748 li
144.797 178.566 li
149.205 175.363 li
143.756 175.363 li
cp
@
grestore
gsave
220.839 177.031 mo
236.105 177.031 li
236.105 162.464 li
220.839 162.464 li
cp
clp
0 lc
2 lj
228.472 162.964 mo
226.788 168.146 li
221.339 168.146 li
225.747 171.349 li
224.064 176.531 li
228.472 173.328 li
232.88 176.531 li
231.197 171.349 li
235.605 168.146 li
230.156 168.146 li
cp
@
grestore
gsave
307.239 165.201 mo
322.505 165.201 li
322.505 150.633 li
307.239 150.633 li
cp
clp
0 lc
2 lj
314.872 151.133 mo
313.188 156.316 li
307.739 156.316 li
312.147 159.519 li
310.464 164.701 li
314.872 161.498 li
319.28 164.701 li
317.597 159.519 li
322.005 156.316 li
316.556 156.316 li
cp
@
grestore
gsave
351.821 155.253 mo
367.087 155.253 li
367.087 140.686 li
351.821 140.686 li
cp
clp
0 lc
2 lj
359.454 141.186 mo
357.771 146.368 li
352.321 146.368 li
356.73 149.571 li
355.046 154.753 li
359.454 151.55 li
363.863 154.753 li
362.179 149.571 li
366.587 146.368 li
361.138 146.368 li
cp
@
grestore
grestore
gsave
57.4 347.8 mo
403 347.8 li
403 2.19998 li
57.4 2.19998 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.7027 283.402 mo
142.072 215.341 li
228.472 196.234 li
314.872 131.355 li
333.164 -42 li
.818326 .616052 3.0518e-5 3.0518e-5 cmyk
@
gsave
53.7027 291.402 mo
69.7027 291.402 li
69.7027 275.402 li
53.7027 275.402 li
cp
clp
0 lc
54.2027 283.402 mo
69.2027 283.402 li
61.7027 290.902 mo
61.7027 275.902 li
@
grestore
gsave
134.072 223.341 mo
150.072 223.341 li
150.072 207.341 li
134.072 207.341 li
cp
clp
0 lc
134.572 215.341 mo
149.572 215.341 li
142.072 222.841 mo
142.072 207.841 li
@
grestore
gsave
220.472 204.234 mo
236.472 204.234 li
236.472 188.234 li
220.472 188.234 li
cp
clp
0 lc
220.972 196.234 mo
235.972 196.234 li
228.472 203.734 mo
228.472 188.734 li
@
grestore
gsave
306.872 139.355 mo
322.872 139.355 li
322.872 123.355 li
306.872 123.355 li
cp
clp
0 lc
307.372 131.355 mo
322.372 131.355 li
314.872 138.855 mo
314.872 123.855 li
@
grestore
grestore
gsave
57.4 347.8 mo
403 347.8 li
403 2.19998 li
57.4 2.19998 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.7027 283.222 mo
142.072 213.838 li
228.472 147.137 li
246.821 -42 li
3.0518e-5 .466804 1 3.0518e-5 cmyk
@
gsave
54.0698 289.789 mo
69.3356 289.789 li
69.3356 275.222 li
54.0698 275.222 li
cp
clp
0 lc
0 lj
61.7027 275.722 mo
54.5698 280.904 li
57.2943 289.289 li
66.1111 289.289 li
68.8356 280.904 li
cp
@
grestore
gsave
134.439 220.406 mo
149.705 220.406 li
149.705 205.838 li
134.439 205.838 li
cp
clp
0 lc
0 lj
142.072 206.338 mo
134.939 211.52 li
137.664 219.906 li
146.48 219.906 li
149.205 211.52 li
cp
@
grestore
gsave
220.839 153.705 mo
236.105 153.705 li
236.105 139.137 li
220.839 139.137 li
cp
clp
0 lc
0 lj
228.472 139.637 mo
221.339 144.82 li
224.064 153.205 li
232.88 153.205 li
235.605 144.82 li
cp
@
grestore
grestore
gsave
57.4 347.8 mo
403 347.8 li
403 2.19998 li
57.4 2.19998 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.72 283.456 mo
142.072 230.031 li
228.472 195.649 li
314.872 155.519 li
357.208 29.7222 li
359.576 -42 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
53.72 291.456 mo
69.72 291.456 li
69.72 275.456 li
53.72 275.456 li
cp
clp
0 lc
0 lj
61.72 275.956 mo
54.22 290.956 li
69.22 290.956 li
cp
@
grestore
gsave
134.072 238.031 mo
150.072 238.031 li
150.072 222.031 li
134.072 222.031 li
cp
clp
0 lc
0 lj
142.072 222.531 mo
134.572 237.531 li
149.572 237.531 li
cp
@
grestore
gsave
220.472 203.649 mo
236.472 203.649 li
236.472 187.649 li
220.472 187.649 li
cp
clp
0 lc
0 lj
228.472 188.149 mo
220.972 203.149 li
235.972 203.149 li
cp
@
grestore
gsave
306.872 163.52 mo
322.872 163.52 li
322.872 147.52 li
306.872 147.52 li
cp
clp
0 lc
0 lj
314.872 148.02 mo
307.372 163.02 li
322.372 163.02 li
cp
@
grestore
gsave
349.208 37.7222 mo
365.208 37.7222 li
365.208 21.7222 li
349.208 21.7222 li
cp
clp
0 lc
0 lj
357.208 22.2222 mo
349.708 37.2222 li
364.708 37.2222 li
cp
@
grestore
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
57.4 347.8 mo
403 347.8 li
1 /0 /CSD get_res sepcs
1 sep
@
57.4 2.20001 mo
403 2.20001 li
@
403 347.8 mo
403 2.20001 li
@
57.4 347.8 mo
57.4 2.20001 li
@
57.4 347.8 mo
57.4 343.8 li
f
.5 lw
0 lc
1 lj
57.4 347.8 mo
57.4 343.8 li
@
57.4 2.20001 mo
57.4 6.20001 li
f
57.4 2.20001 mo
57.4 6.20001 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold Initial
ct_T42Dict begin
-0.199 -0.234 1.414 0.926
 256 array 0 1 255 {1 index exch /.notdef put} for  /YVPBAA+BitstreamVeraSans-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32b589f73d000000cc000000566376
74203eb92de200000124000002526670676dc6703916000003780000008c
676c796634de68a5000030580000842668656164f34fab93000004040000
003668686561112e09160000043c00000024686d747879f280ae00000460
0000042c6c6f636158f97a5b0000088c000002186d617870071d087d0000
0aa4000000206e616d65b759cdbf00000ac400001deb707265707c61a2e7
000028b0000007a7676469720000000000000000000000000001049502bc
00050004054704cc0000fe42054704cc00000253010202660802020b0803
030604020204800000af1000204a00000000000000004269747300200020
fb020614fe14019a076d01e30000000100000000000001660133016600bc
00e90000013d00a200fa031f00020002006601660002000200ac015400ec
00bc006201660181048501540166016d04a400020166007f04cd00000002
0133006200710000002504a401bc00ba00e500660181018d0548055a0166
016d000000000002000200f605c301f0053902390058046d043d04b20481
04b2016601750466048100b00466043902d1049c047b04cf047b00580133
0166014c0166014c000200ac009a014a0123009a029a01440119014402cd
00c100000166013f019a013b05cb05cb00d500d5015000ac00ac0077020a
01c701f2012f015801b2012300f600f6011f012f0135023501ee01e70133
009800d10358050a009a008f0112009800bc00cd00e500e500f200730400
0166008f05d5022b05d500c300e100d700e50000006a01020000001d032d
05d505d505f000a8006a00ec00e1010205d506140721046602f800ec0183
02a602f80123010201020112011f031f005e03cd046004c7048900ec01bc
00ba01020333031f03420333035c0112011f05d5019a009a00e106660179
046004600460047b000000ec02c302b802cd00be00dd00d50000006a025c
027b029a00dd01ae01ba01120000008501ae04600762041b009a069a0458
00ee009a029a00d102cd019a015005cb05cb008b008b063100f6040600f0
034c016004a800c10000002505c101000121074a06120096014a078300a8
00000337007b0014000000c9010005c105c105c105c101000108061d0096
0427039e00ec0102027d0133009800d10358017900cd02390362009c009c
009c009301b8009300b80073000014000000b6060504030201002c2010b0
02254964b040515820c859212d2cb002254964b040515820c859212d2c20
100720b00050b00d7920b8ffff5058041b0559b0051cb0032508b0042523
e120b00050b00d7920b8ffff5058041b0559b0051cb0032508e12d2c4b50
5820b80128454459212d2cb002254560442d2c4b5358b00225b002254544
5921212d2c45442d0001000000020000fff000005f0f3cf5001f08000000
0000bab9cc1000000000babc96b2fe68fe1d0b56076d0001000800010000
0000000000010000076dfe1d00000b85fe68fe680b560001000000000000
0000000000000000010b04cd00660000000002c9000002c9000003a6011f
042b00c306b4008b059100a00804004206fa007b027300c303a800b003a8
00a4042f002906b400d9030a006d0352006f030a00d102ec000005910062
059100e7059100a2059100890591005c0591009e0591007f059100890591
007d0591006a033300e50333008106b400d906b400d906b400d904a4008d
080000870631000a061900bc05df006606a400bc057700bc057700bc0691
006606b200bc02fa00bc02faff8d063300bc051900bc07f600bc06b200bc
06cd006605dd00bc06cd0066062900bc05c300930575000a067f00bc0631
000a08d3003d062b002705cbffec05cd005c03a800b002ec000003a8008b
06b400cf040000000400005e0566005805ba00ac04be005805ba005c056d
0058037b002705ba005c05b200ac02be00ac02beffbc055200ac02be00ac
085600aa05b200ac057f005805ba00ac05ba005c03f200ac04c3006a03d3
001b05b200a00537001f076400480529001f0537001904a8005c05b20100
02ec010405b2010006b400d90631000a0631000a05df0066057700bc06b2
00bc06cd0066067f00bc0566005805660058056600580566005805660058
0566005804be0058056d0058056d0058056d0058056d005802be00ac02be
ffd502befffe02be003c05b200ac057f0058057f0058057f0058057f0058
057f005805b200a005b200a005b200a005b200a004000035040000b20591
00ae0591007d0400000e051d01270517008105c100ac0800011b0800011b
080001270400016d040000c506b400d908ae000006cd002d06aa00c306b4
00d906b400d906b400d90591001905e300ae045a003b05be0029064c0096
0527ffdd04e100330483009e048300750627003708620058057f004e04a4
008d03a6011f06b400d90556004c0591000606b400d905930000052b009e
052b00c1080000a2059100000631000a0631000a06cd00660956006608c1
00580400000008000000054200d3054200bc030a00d3030a008106b400d9
03f400060537001905cbffec0156fe680517004a034c009e034c00c105ee
002b05ee002704000033030a00d1030a0093054200930b8500420631000a
057700bc0631000a057700bc057700bc02fa00bc02faffeb02fa002902fa
001606cd006606cd006606cd0066067f00bc067f00bc067f00bc02be00ac
04000087040000a4040000c5040000b004000177040000e3040001060400
00c104000156040000870523ffa402f8ffdb05c3009304c3006a05cd005c
04a8005c02ec010406b40021057f005805cbffec0537001905e700bc05ba
00ac06b400d906b401000381007b0381006d0381005a0848006408480064
084800680691006605ba005c02fa00bc05c3009304c3006a05df006604be
005805df006604be005805ba005c0352006f030a00d10591ffd9040000c5
0400016d040000a4040000b20400008704000087040000b0040001770000
0025002500250025004e007100d3015d01dc02c602de030b0336037f03a9
03c703de03f4040c044e047b04f20555059505e5063f067506e3073c075f
078a07af07d007f3084f08fb09a10a000a4b0a8f0ac10aed0b470b800ba9
0be80c450c610ce70d3e0d870dc40e2a0e9f0f320f650fa1100210e0117f
11e7123a125c1275129712b912cd1304138d13da1423147014c51516157c
15bf15e81624168616a31717175a179f17ed183c187e192a198919d11a5a
1b401c211ce21d491daa1dc01e221e641e711f6a1f771f841f911f9e1fab
1fb81fc51fd21fdf1fec1ff9200620132020202d203a204720542061206e
207b2088209520a220af20bc20c920d620e320f0211e215d21c8221522a8
22da23082386242e24c12521254b258b25ce26482706276e27a527d42801
288a28da2936297b299e29d82a3c2aca2b152b702c352cda2d382d612d7d
2dce2e422ebd2ee42f1f2f5c2f8c2f8c2f992fa62fb3301430a230b930d0
310331363155317431a831fc32093216323932c932ec3310337633d23416
342d344c347e352a353735443551355e356b357835853592359f35ac35b9
35c635d335e035ed360a363736ca36fa3748376b37b337ef382738573886
38d4392d393a39473954396139843a053ac73ad43ae13b4f3b9e3bb43bed
3c1e3c763cdc3d5c3df33eaa3eb73ec43ed13ede3eeb3ef83f053f123f1f
3f7f3f963fad40344054407f41154140417541ad41f0421300010000010b
004e0007004500040002001000400007000005ed07a70002000100000016
010e0001000000000000003a000000010000000000010013003a00010000
000000020004004e00010000000000030018003a00010000000000040018
003a0001000000000005000c005200010000000000060016005e00010000
00000007003000b10001000000000008000e0870000100000000000b0018
0987000100000000000d0913007400030001040900000074099f00030001
0409000100260a13000300010409000200080a3b00030001040900030030
0a13000300010409000400300a13000300010409000500180a4300030001
04090006002c0a5b000300010409000700600b010003000104090008001c
1a7f000300010409000b00301cad000300010409000d12260a87436f7079
72696768742028632920323030332062792042697473747265616d2c2049
6e632e20416c6c205269676874732052657365727665642e426974737472
65616d20566572612053616e7320426f6c6452656c6561736520312e3130
42697473747265616d5665726153616e732d426f6c64436f707972696768
742028632920323030332062792042697473747265616d2c20496e632e0d
0a416c6c205269676874732052657365727665642e0d0a42697473747265
616d205665726120697320612074726164656d61726b206f662042697473
747265616d2c20496e632e0d0a0d0a5065726d697373696f6e2069732068
6572656279206772616e7465642c2066726565206f66206368617267652c
20746f20616e7920706572736f6e206f627461696e696e67206120636f70
79206f662074686520666f6e7473206163636f6d70616e79696e67207468
6973206c6963656e7365202822466f6e7473222920616e64206173736f63
696174656420646f63756d656e746174696f6e2066696c65732028746865
2022466f6e7420536f66747761726522292c20746f20726570726f647563
6520616e6420646973747269627574652074686520466f6e7420536f6674
776172652c20696e636c7564696e6720776974686f7574206c696d697461
74696f6e207468652072696768747320746f207573652c20636f70792c20
6d657267652c207075626c6973682c20646973747269627574652c20616e
642f6f722073656c6c20636f70696573206f662074686520466f6e742053
6f6674776172652c20616e6420746f207065726d697420706572736f6e73
20746f2077686f6d2074686520466f6e7420536f66747761726520697320
6675726e697368656420746f20646f20736f2c207375626a65637420746f
2074686520666f6c6c6f77696e6720636f6e646974696f6e733a0d0a0d0a
5468652061626f766520636f7079726967687420616e642074726164656d
61726b206e6f746963657320616e642074686973207065726d697373696f
6e206e6f74696365207368616c6c20626520696e636c7564656420696e20
616c6c20636f70696573206f66206f6e65206f72206d6f7265206f662074
686520466f6e7420536f667477617265207479706566616365732e0d0a0d
0a54686520466f6e7420536f667477617265206d6179206265206d6f6469
666965642c20616c74657265642c206f7220616464656420746f2c20616e
6420696e20706172746963756c6172207468652064657369676e73206f66
20676c79706873206f72206368617261637465727320696e207468652046
6f6e7473206d6179206265206d6f64696669656420616e64206164646974
696f6e616c20676c79706873206f722063686172616374657273206d6179
20626520616464656420746f2074686520466f6e74732c206f6e6c792069
662074686520666f6e7473206172652072656e616d656420746f206e616d
6573206e6f7420636f6e7461696e696e6720656974686572207468652077
6f726473202242697473747265616d22206f722074686520776f72642022
56657261222e0d0a0d0a54686973204c6963656e7365206265636f6d6573
206e756c6c20616e6420766f696420746f2074686520657874656e742061
70706c696361626c6520746f20466f6e7473206f7220466f6e7420536f66
7477617265207468617420686173206265656e206d6f6469666965642061
6e6420697320646973747269627574656420756e64657220746865202242
697473747265616d205665726122206e616d65732e0d0a0d0a5468652046
6f6e7420536f667477617265206d617920626520736f6c64206173207061
7274206f662061206c617267657220736f667477617265207061636b6167
6520627574206e6f20636f7079206f66206f6e65206f72206d6f7265206f
662074686520466f6e7420536f6674776172652074797065666163657320
6d617920626520736f6c6420627920697473656c662e0d0a0d0a54484520
464f4e5420534f4654574152452049532050524f56494445442022415320
4953222c20574954484f55542057415252414e5459204f4620414e59204b
494e442c2045585052455353204f5220494d504c4945442c20494e434c55
44494e4720425554204e4f54204c494d4954454420544f20414e59205741
5252414e54494553204f46204d45524348414e544142494c4954592c2046
49544e45535320464f52204120504152544943554c415220505552504f53
4520414e44204e4f4e494e4652494e47454d454e54204f4620434f505952
494748542c20504154454e542c2054524144454d41524b2c204f52204f54
4845522052494748542e20494e204e4f204556454e54205348414c4c2042
495453545245414d204f522054484520474e4f4d4520464f554e44415449
4f4e204245204c4941424c4520464f5220414e5920434c41494d2c204441
4d41474553204f52204f54484552204c494142494c4954592c20494e434c
5544494e4720414e592047454e4552414c2c205350454349414c2c20494e
4449524543542c20494e434944454e54414c2c204f5220434f4e53455155
454e5449414c2044414d414745532c205748455448455220494e20414e20
414354494f4e204f4620434f4e54524143542c20544f5254204f52204f54
484552574953452c2041524953494e472046524f4d2c204f5554204f4620
54484520555345204f5220494e4142494c49545920544f20555345205448
4520464f4e5420534f465457415245204f522046524f4d204f5448455220
4445414c494e475320494e2054484520464f4e5420534f4654574152452e
0d0a0d0a45786365707420617320636f6e7461696e656420696e20746869
73206e6f746963652c20746865206e616d6573206f6620476e6f6d652c20
74686520476e6f6d6520466f756e646174696f6e2c20616e642042697473
747265616d20496e632e2c207368616c6c206e6f74206265207573656420
696e206164766572746973696e67206f72206f746865727769736520746f
2070726f6d6f7465207468652073616c652c20757365206f72206f746865
72206465616c696e677320696e207468697320466f6e7420536f66747761
726520776974686f7574207072696f72207772697474656e20617574686f
72697a6174696f6e2066726f6d2074686520476e6f6d6520466f756e6461
74696f6e206f722042697473747265616d20496e632e2c20726573706563
746976656c792e20466f72206675727468657220696e666f726d6174696f
6e2c20636f6e746163743a20666f6e747320617420676e6f6d6520646f74
206f72672e687474703a2f2f7777772e62697473747265616d2e636f6d00
43006f007000790072006900670068007400200028006300290020003200
300030003300200062007900200042006900740073007400720065006100
6d002c00200049006e0063002e00200041006c006c002000520069006700
6800740073002000520065007300650072007600650064002e0042006900
7400730074007200650061006d0020005600650072006100200053006100
6e007300200042006f006c006400520065006c0065006100730065002000
31002e0031003000420069007400730074007200650061006d0056006500
72006100530061006e0073002d0042006f006c00640043006f0070007900
720069006700680074002000280063002900200032003000300033002000
620079002000420069007400730074007200650061006d002c0020004900
6e0063002e000d000a0041006c006c002000520069006700680074007300
2000520065007300650072007600650064002e000d000a00420069007400
730074007200650061006d00200056006500720061002000690073002000
61002000740072006100640065006d00610072006b0020006f0066002000
420069007400730074007200650061006d002c00200049006e0063002e00
0d000a000d000a005000650072006d0069007300730069006f006e002000
69007300200068006500720065006200790020006700720061006e007400
650064002c002000660072006500650020006f0066002000630068006100
7200670065002c00200074006f00200061006e0079002000700065007200
73006f006e0020006f0062007400610069006e0069006e00670020006100
200063006f007000790020006f0066002000740068006500200066006f00
6e007400730020006100630063006f006d00700061006e00790069006e00
67002000740068006900730020006c006900630065006e00730065002000
2800220046006f006e007400730022002900200061006e00640020006100
730073006f00630069006100740065006400200064006f00630075006d00
65006e0074006100740069006f006e002000660069006c00650073002000
28007400680065002000220046006f006e007400200053006f0066007400
7700610072006500220029002c00200074006f0020007200650070007200
6f006400750063006500200061006e006400200064006900730074007200
690062007500740065002000740068006500200046006f006e0074002000
53006f006600740077006100720065002c00200069006e0063006c007500
640069006e006700200077006900740068006f007500740020006c006900
6d00690074006100740069006f006e002000740068006500200072006900
6700680074007300200074006f0020007500730065002c00200063006f00
700079002c0020006d0065007200670065002c0020007000750062006c00
6900730068002c0020006400690073007400720069006200750074006500
2c00200061006e0064002f006f0072002000730065006c006c0020006300
6f00700069006500730020006f0066002000740068006500200046006f00
6e007400200053006f006600740077006100720065002c00200061006e00
6400200074006f0020007000650072006d00690074002000700065007200
73006f006e007300200074006f002000770068006f006d00200074006800
6500200046006f006e007400200053006f00660074007700610072006500
20006900730020006600750072006e006900730068006500640020007400
6f00200064006f00200073006f002c0020007300750062006a0065006300
7400200074006f002000740068006500200066006f006c006c006f007700
69006e006700200063006f006e0064006900740069006f006e0073003a00
0d000a000d000a005400680065002000610062006f007600650020006300
6f007000790072006900670068007400200061006e006400200074007200
6100640065006d00610072006b0020006e006f0074006900630065007300
200061006e0064002000740068006900730020007000650072006d006900
7300730069006f006e0020006e006f007400690063006500200073006800
61006c006c00200062006500200069006e0063006c007500640065006400
200069006e00200061006c006c00200063006f0070006900650073002000
6f00660020006f006e00650020006f00720020006d006f00720065002000
6f0066002000740068006500200046006f006e007400200053006f006600
740077006100720065002000740079007000650066006100630065007300
2e000d000a000d000a00540068006500200046006f006e00740020005300
6f0066007400770061007200650020006d00610079002000620065002000
6d006f006400690066006900650064002c00200061006c00740065007200
650064002c0020006f007200200061006400640065006400200074006f00
2c00200061006e006400200069006e002000700061007200740069006300
75006c006100720020007400680065002000640065007300690067006e00
730020006f006600200067006c00790070006800730020006f0072002000
6300680061007200610063007400650072007300200069006e0020007400
68006500200046006f006e007400730020006d0061007900200062006500
20006d006f00640069006600690065006400200061006e00640020006100
640064006900740069006f006e0061006c00200067006c00790070006800
730020006f00720020006300680061007200610063007400650072007300
20006d006100790020006200650020006100640064006500640020007400
6f002000740068006500200046006f006e00740073002c0020006f006e00
6c0079002000690066002000740068006500200066006f006e0074007300
20006100720065002000720065006e0061006d0065006400200074006f00
20006e0061006d006500730020006e006f007400200063006f006e007400
610069006e0069006e006700200065006900740068006500720020007400
68006500200077006f007200640073002000220042006900740073007400
7200650061006d00220020006f0072002000740068006500200077006f00
7200640020002200560065007200610022002e000d000a000d000a005400
68006900730020004c006900630065006e00730065002000620065006300
6f006d006500730020006e0075006c006c00200061006e00640020007600
6f0069006400200074006f00200074006800650020006500780074006500
6e00740020006100700070006c0069006300610062006c00650020007400
6f00200046006f006e007400730020006f007200200046006f006e007400
200053006f00660074007700610072006500200074006800610074002000
68006100730020006200650065006e0020006d006f006400690066006900
65006400200061006e006400200069007300200064006900730074007200
690062007500740065006400200075006e00640065007200200074006800
650020002200420069007400730074007200650061006d00200056006500
72006100220020006e0061006d00650073002e000d000a000d000a005400
68006500200046006f006e007400200053006f0066007400770061007200
650020006d0061007900200062006500200073006f006c00640020006100
73002000700061007200740020006f0066002000610020006c0061007200
670065007200200073006f00660074007700610072006500200070006100
63006b00610067006500200062007500740020006e006f00200063006f00
7000790020006f00660020006f006e00650020006f00720020006d006f00
7200650020006f0066002000740068006500200046006f006e0074002000
53006f006600740077006100720065002000740079007000650066006100
63006500730020006d0061007900200062006500200073006f006c006400
200062007900200069007400730065006c0066002e000d000a000d000a00
540048004500200046004f004e005400200053004f004600540057004100
520045002000490053002000500052004f00560049004400450044002000
22004100530020004900530022002c00200057004900540048004f005500
54002000570041005200520041004e005400590020004f00460020004100
4e00590020004b0049004e0044002c002000450058005000520045005300
530020004f005200200049004d0050004c004900450044002c0020004900
4e0043004c005500440049004e004700200042005500540020004e004f00
540020004c0049004d004900540045004400200054004f00200041004e00
59002000570041005200520041004e00540049004500530020004f004600
20004d00450052004300480041004e0054004100420049004c0049005400
59002c0020004600490054004e00450053005300200046004f0052002000
4100200050004100520054004900430055004c0041005200200050005500
520050004f0053004500200041004e00440020004e004f004e0049004e00
4600520049004e00470045004d0045004e00540020004f00460020004300
4f0050005900520049004700480054002c00200050004100540045004e00
54002c002000540052004100440045004d00410052004b002c0020004f00
520020004f0054004800450052002000520049004700480054002e002000
49004e0020004e004f0020004500560045004e0054002000530048004100
4c004c002000420049005400530054005200450041004d0020004f005200
2000540048004500200047004e004f004d004500200046004f0055004e00
44004100540049004f004e0020004200450020004c004900410042004c00
4500200046004f005200200041004e005900200043004c00410049004d00
2c002000440041004d00410047004500530020004f00520020004f005400
48004500520020004c0049004100420049004c004900540059002c002000
49004e0043004c005500440049004e004700200041004e00590020004700
45004e004500520041004c002c0020005300500045004300490041004c00
2c00200049004e004400490052004500430054002c00200049004e004300
4900440045004e00540041004c002c0020004f005200200043004f004e00
530045005100550045004e005400490041004c002000440041004d004100
4700450053002c0020005700480045005400480045005200200049004e00
200041004e00200041004300540049004f004e0020004f00460020004300
4f004e00540052004100430054002c00200054004f005200540020004f00
520020004f00540048004500520057004900530045002c00200041005200
4900530049004e0047002000460052004f004d002c0020004f0055005400
20004f0046002000540048004500200055005300450020004f0052002000
49004e004100420049004c00490054005900200054004f00200055005300
45002000540048004500200046004f004e005400200053004f0046005400
570041005200450020004f0052002000460052004f004d0020004f005400
48004500520020004400450041004c0049004e0047005300200049004e00
2000540048004500200046004f004e005400200053004f00460054005700
4100520045002e000d000a000d000a004500780063006500700074002000
61007300200063006f006e007400610069006e0065006400200069006e00
2000740068006900730020006e006f0074006900630065002c0020007400
6800650020006e0061006d006500730020006f006600200047006e006f00
6d0065002c002000740068006500200047006e006f006d00650020004600
6f0075006e0064006100740069006f006e002c00200061006e0064002000
420069007400730074007200650061006d00200049006e0063002e002c00
20007300680061006c006c0020006e006f00740020006200650020007500
730065006400200069006e00200061006400760065007200740069007300
69006e00670020006f00720020006f007400680065007200770069007300
6500200074006f002000700072006f006d006f0074006500200074006800
65002000730061006c0065002c00200075007300650020006f0072002000
6f00740068006500720020006400650061006c0069006e00670073002000
69006e0020007400680069007300200046006f006e007400200053006f00
660074007700610072006500200077006900740068006f00750074002000
7000720069006f00720020007700720069007400740065006e0020006100
7500740068006f00720069007a006100740069006f006e00200066007200
6f006d002000740068006500200047006e006f006d006500200046006f00
75006e0064006100740069006f006e0020006f0072002000420069007400
730074007200650061006d00200049006e0063002e002c00200072006500
730070006500630074006900760065006c0079002e00200046006f007200
20006600750072007400680065007200200069006e0066006f0072006d00
6100740069006f006e002c00200063006f006e0074006100630074003a00
200066006f006e0074007300200061007400200067006e006f006d006500
200064006f00740020006f00720067002e0068007400740070003a002f00
2f007700770077002e00620069007400730074007200650061006d002e00
63006f006d0041840280012600fe000301250011000301240121003a0005
012400fa000301230016000301220121003a0005012200fe00030121003a
0003012000fa0003011f00bb0003011e00640003011d00fe0003011c0019
0003011b001e0003011a00fe0003011900fe0003011800fe0003011700fe
0003011600fe000301150114000e0005011500fe00030114000e00030113
00fe0003011200fe0003010f010e007d0005010f00fe0003010e007d0003
010d010c008c0005010d00fe0003010d00c00004010c010b00590005010c
008c0003010c00800004010b010a00260005010b00590003010b00400004
010a00260003010900fe0003010800fe00030107000c0003010700800004
0106b2972e054113010600fa0003010500fa0003010400fe000301030019
0003010200fa0003010100fa0003010040ff7d03ff3e03fefe03fcfb2c05
fcfe03fb2c03fafe03f9f84705f97d03f84703f7fa03f6fe03f5fe03f4fe
03f3bb03f2fe03f1fe03f0fe03ef1e03eefe03edec0a05edfe03ec0a03ec
4004ebea0a05eb3203ea0a03e9fa03e8911605e8fe03e7fa03e6fa03e591
1605e5fe03e4fe03e3fe03e2fe03e1fe03e0fe03dffe03defa03dddc1805
dd6403dc1803dba01e05db6403dad92505dafa03d92503d8d12505d8fa03
d7d61405d71603d6d51005d61403d51003d4d30b05d42003d30b03d2d125
05d2fa03d1911605d12503d0940c05d02303cfce1405cf2603cecd1205ce
1403cd1203cc911605cc1d03cb1403cac9bb05cafe03c9c85d05c9bb03c9
8004c840ffc72505c85d03c84004c72503c6fe03c56403c4901005c4fe03
c31c03c2fe03c1fe03c0bf3a05c0fa03bfad1b05bf3a03bebd1a05be3203
bdbc1105bd1a03bcbb0f05bc1103bbba0c05bb0f03ba0c03b9911605b9fe
03b8fe03b71503b61203b5fe03b4fe03b3fe03b21703b11903b01603afad
1b05affa03aead1b05aefa03ad911605ad1b03ac911605ac7d03abfe03aa
2603a9fe03a8fe03a7fe03a6fe03a50a03a4fe03a3a20e05a3fe03a20e03
a24004a1a01e05a1fa03a0911605a01e039f9116059ffa039e940c059e1c
039dfe039c9bbb059cfe039b9a5d059bbb039b80049a8f25059a5d039a40
0499fe0398972e0598fe03972e0396911605961e40ff0395940c05952003
940c0393911605934b039291160592fe03919010059116039010038f2503
8efe038dfe038cfe038bfe038afe0389fe038887250588fe0387250386fe
0385fe0384320383960382fe0381fe038019037f0a037efe037dfe037cfe
037bfa037afa0379fe037776a60577fe0376a60375741b0575fa03741b03
73fa03727d0371fe03706f2c056f2c036efa036dfa036cfa036bfe036afe
0369fe0368630c0568320367fe0366320365640a0565fe03640a03644004
63620a05630c03620a0361601505619603600111056015035f0a035efe03
5dfe035c0111055cfe035b5a1b055bfe035a0111055a1b0359fe0358fa03
57fe035601110540ff56fe0355fe03541e035314035251190552fa035101
1105511903504f190550fa034f4e11054f19034e11034d1e034c4b14054c
15034b4a11054b14034a490e054a1103490e0348fa034746140547150346
140345fa0344430e05440f03430e034241250542fa034101110541250340
3f0f0540fe033f3e0e053f0f033e0e033d3c0d053d16033c0d033b64033a
fe0339140338fe0337130336351a0536250335341405351a0335c004340a
0d0534140334800433320c05331403334004320c033130a60531fe033001
110530a6032f0c032e13032d2c3a052dfa032c1525052c3a032b64032a64
0329fe0328150327171105271e03262003251e0324231105402b241e0323
110322000d0522fa03210f032140042014031f0a031e1e031d1c19051d25
031c0f13051c19031cb801004091041b0d031a194b051a7d031901110519
4b0318fe031711031615250516fa031501110515250314640313110312fe
031101110511fe031064030f0e10050f13030fc0040e10030e80040d0111
050dfa030c32030b0a0d050b16030b80040a0d030a400409fe0308fe0307
fe0306050a0506fe03050a0305400404fa030364030201110502fe030100
0d05011103000d0301b80164858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b1d0000>
[16345 16213 1275 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1980 17 <000100d100000239018300030011b700a802010200130410fcec31002fec
3013211121d10168fe980183fe7d>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 2072 19 <00020062ffe3052f05f0000b00170023401309ac0f03ac159c0f98180016
0c17061612141810fcecfcec310010e4f4ec10ee30011026232206111016
33323601100021200011100021200003ae697c7c6a6a7c7b6a0181fec0fe
dafed9fec0014001270126014002ec0118e5e5fee8fee5e8e80118fe8dfe
6d0193017301740193fe6d00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 0 0 <00020066fe96046605a400030007001fbc00040126000000060126b60108
05890204002fc4d4ec310010d4ecd4ec301311211125211121660400fc73
031bfce5fe96070ef8f272062900>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/period 17 def
/zero 19 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 46 /period put
dup 48 /zero put
pop
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold /YVPBAA+BitstreamVeraSans-Bold findfont ct_VMDictPut
/LDMVYA+BitstreamVeraSans-Bold*1 
[46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
37.65 363.956 mo
(0.00)
[11.3999 6.22412 11.3999 0 ]xsh
143.8 347.8 mo
143.8 343.8 li
f
143.8 347.8 mo
143.8 343.8 li
@
143.8 2.20001 mo
143.8 6.20001 li
f
143.8 2.20001 mo
143.8 6.20001 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 2858 24 <0001009effe3050205d5001d003d402204071d951aac071096119514ac07
b20d02af008d0d981e0322000117160a1f00101e10dcc4fcecc410ee3100
10e4f4ec10e6fef5ee10fee4123930132111211536363320001514002122
262711161633323635342623220607d903bdfd762c593001110130feb5fe
da7ff97b7adb618ca1a18c53bc6c05d5fee5e70c0dfeeff4f2feee313201
2f4646897576882b2d00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/five 24 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[46{/.notdef}rp /period /.notdef /zero 4{/.notdef}rp /five 202{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
124.05 363.956 mo
(0.05)
[11.3999 6.22412 11.3999 0 ]xsh
230.2 347.8 mo
230.2 343.8 li
f
230.2 347.8 mo
230.2 343.8 li
@
230.2 2.20001 mo
230.2 6.20001 li
f
230.2 2.20001 mo
230.2 6.20001 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 2204 20 <000100e70000050405d5000a0028401503ae0402ae058d0700ae09081806
1a03001805010b10d4c4ecc4fcec31002fec32f4ecd4ec30132111051125
2111211121f00154fea3015b016e0154fbec010a03c548010648fb35fef6
>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/one 20 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
210.45 363.956 mo
(0.10)
[11.3999 6.22412 11.3999 0 ]xsh
316.6 347.8 mo
316.6 343.8 li
f
316.6 347.8 mo
316.6 343.8 li
@
316.6 2.20001 mo
316.6 6.20001 li
f
316.6 2.20001 mo
316.6 6.20001 li
@
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
296.85 363.956 mo
(0.15)
[11.3999 6.22412 11.3999 0 ]xsh
403 347.8 mo
403 343.8 li
f
403 347.8 mo
403 343.8 li
@
403 2.20001 mo
403 6.20001 li
f
403 2.20001 mo
403 6.20001 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 2294 21 <000100a2000004df05f0001800964029001d040504170116181d05050425
0518000e900f0bac129c0400af02181505000e081615011b0e031910dcc4
fcd4ec113939113931002fec32f4ecd4ec113939304b535807100eed1117
39071005ed5922014bb00d5458bd00190040000100190019ffc038113738
59402602172a162a170303000e1705181717171822002217221835003517
351842004a05461746180f5d005d0121112111013e013534262322060711
3e0133200415140607024e0291fbc3022149468d755ad67a82fe7a010c01
297eca011bfee5011b01e1427e4469804d4c01482b2decd37ad3b100>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/two 21 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 
202{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
383.25 363.956 mo
(0.20)
[11.3999 6.22412 11.3999 0 ]xsh
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if

1 0 3 <> YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 6282 47 <000100bc000004e105d500050017400b02c0008d0401160300030610fcc4
ec31002fe4ec30132111211121bc018102a4fbdb05d5fb4efedd>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 6780 50 <00020066ffe3066605f0000b00170032401306ae1200ae0c9c129818092d
0f37032d152b1810fcecfcec310010e4f4ec10ee30400b0019171310192f
193f1905015d012202151412333212353402032000111000212000111000
0366b0c2c2b0b1c2c2b101680198fe68fe98fe99fe67019904d9fefceceb
fefc0104ebec01040117fe64fe95fe96fe64019c016a016b019c>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 9736 68 <00020058ffe304c5047b000a0025009d402a090600191f0b00d217cf069f
0ed01120cc1fcb1c9f23ca11980c00231703180d090d0b3d1f030d143b26
10fcecc4f4ec32321139393931002fe4f4fcf4ec10e6eef6ee3912391112
3930404c2f273d203d213f274d204d215d205d216e206e217e207e217027
8c208c219d209d21ad20ad21bd20bd2115321e301f431e401f531e501f63
1e601f851e801f931e901fa21ea01fb21eb01f105d015d01220615141633
32363d01251121350e01232226353424213335342623220607113e013320
0402a270715b51658a0169fe9748b481aed9010f0122d3868e73c65573e8
74012f010d01f84c4a444d916d2987fd81a6665dcba2c5b81c554f2e2e01
111c1def>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 10310 71 <0002005cffe3050e06140010001c0038401b17a100d00e11a105d008980e
ca01a3031404000d02401a420b3b1d10fcecf4ec323231002fece4f4e4ec
10e4ee30b44f1e601e02015d0111211121350e0123220011100033321603
323635342623220615141603a60168fe984ab275cffef6010acf74b3a273
79797372797903bc0258f9eca2635c01490103010301495dfcc9a8a0a0a8
a8a0a0a8>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 10464 72 <00020058ffe3050a047b0014001b004340210015d80109cc08d4059f0c01
d7189f12ca0c981c1b150208150d0044020d0f3b1c10fcecf4ecc4111239
310010e4f4ece410fef4ee10ee3930b42f1d3f1d02015d0115211e013332
3637110e0123200011100021200005342623220607050afcbb0d9c8c71ed
7d7ffe7ffed0feaf014b01220108013dfe9077606882100233667e7e4344
feec3031013501170112013afec293667d756e00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 10634 73 <000100270000038d061400130060401c1005010c08a106019f00a30e06b3
0a021307000709050d0d450f0b1410dc3cecfc3cc4c412393931002fe432
fcec10ee3212393930014bb00d544bb00e545b58bd0014ffc00001001400
140040381137385940091007100880078008045d01152322061d01211121
11211123113335343633038dc64c3c0132fecefe9ab2b2ccd60614eb3744
4eff00fca0036001004eb7af>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 11956 82 <00020058ffe30527047b000b0017002d401306a11200a10cca1298180942
0f4c0342153b1810fcecfcec310010e4f4ec10ee30b637133f1947130301
5d01220615141633323635342603200011100021200011100002c1777d7d
77757c7c7501210145febbfedffedefeb90147037baba1a1ababa1a1ab01
00fec8feecfeecfec8013801140114013800>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 12408 85 <000100ac000003ec047b001100434016110e0906070003c00b940eca09b3
070a060d0008101210fcc4ec3231002fe4f4e4fcc4113911123930014bb0
135458bd00120040000100120012ffc03811373859012e01232206151121
1121153e013332161703ec2f5d2f8a95fe9a016645b37d122a28032f1615
b1a5fdfc0460b86e65030500>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/space 3 def
/L 47 def
/O 50 def
/a 68 def
/d 71 def
/e 72 def
/f 73 def
/o 82 def
/r 85 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 32 /space put
dup 76 /L put
dup 79 /O put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 111 /o put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
2{/.notdef}rp /five 22{/.notdef}rp /L 2{/.notdef}rp /O 17{/.notdef}rp /a 
2{/.notdef}rp /d /e /f 8{/.notdef}rp /o 2{/.notdef}rp /r 
141{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [15 0 0 -15 0 0 ]msf
171.372 383.675 mo
(Offerred Load)
[13.0575 6.68243 6.68243 10.4176 7.57507 7.57507 10.4175 10.995 5.3476 9.78745 10.5526 10.3649 
0 ]xsh
57.4 347.8 mo
61.4 347.8 li
f
57.4 347.8 mo
61.4 347.8 li
@
403 347.8 mo
399 347.8 li
f
403 347.8 mo
399 347.8 li
@
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
19.9781 352.214 mo
(100)
[11.3999 11.3999 0 ]xsh
57.4 291.144 mo
61.4 291.144 li
f
57.4 291.144 mo
61.4 291.144 li
@
403 291.144 mo
399 291.144 li
f
403 291.144 mo
399 291.144 li
@
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
19.9781 295.558 mo
(200)
[11.3999 11.3999 0 ]xsh
57.4 234.489 mo
61.4 234.489 li
f
57.4 234.489 mo
61.4 234.489 li
@
403 234.489 mo
399 234.489 li
f
403 234.489 mo
399 234.489 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 2532 22 <00010089ffe304ee05f00028004c402b0015ac1309960ab10dac0620961f
b11cac13b0239c0698291613191400101916261016031f141f20091e2910
fce4c4fcecd4ec123911123939310010e4f4e4fcf4ec10fef5ee10ee3930
011616151404212226271116163332363534262323353332363534262322
060711363633200415140603ba979dfeacfeba73e7716cd56799a3a7a39a
a2918e8a7e5dbe5e72e06c012301218a032527c195dee72525012936376a
636669f85b5d565e2a29011a2020bfc083a7>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/three 22 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /.notdef /five 22{/.notdef}rp /L 2{/.notdef}rp /O 17{/.notdef}rp 
/a 2{/.notdef}rp /d /e /f 8{/.notdef}rp /o 2{/.notdef}rp 
/r 141{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
19.9781 238.903 mo
(300)
[11.3999 11.3999 0 ]xsh
57.4 177.833 mo
61.4 177.833 li
f
57.4 177.833 mo
61.4 177.833 li
@
403 177.833 mo
399 177.833 li
f
403 177.833 mo
399 177.833 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 2730 23 <0002005c0000053305d50002000d0043402001210d030d002103030d2500
030b07ae0501038d09010c0a001a0608040c140e10fcd43cc4ec32113931
002fe4d43cec321239304b5358071004ed071005ed592201012103211133
1123112111211102f2fe5a01a64001acd5d5fe94fd6a0498fd8f03aefc52
fee9fef00110014a>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/four 23 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five 22{/.notdef}rp /L 2{/.notdef}rp /O 17{/.notdef}rp 
/a 2{/.notdef}rp /d /e /f 8{/.notdef}rp /o 2{/.notdef}rp 
/r 141{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
19.9781 182.247 mo
(400)
[11.3999 11.3999 0 ]xsh
57.4 121.177 mo
61.4 121.177 li
f
57.4 121.177 mo
61.4 121.177 li
@
403 121.177 mo
399 121.177 li
f
403 121.177 mo
399 121.177 li
@
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
19.9781 125.591 mo
(500)
[11.3999 11.3999 0 ]xsh
57.4 64.5213 mo
61.4 64.5213 li
f
57.4 64.5213 mo
61.4 64.5213 li
@
403 64.5213 mo
399 64.5213 li
f
403 64.5213 mo
399 64.5213 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 3018 25 <0002007fffe3052305ee000b00240037401f1300ac1606ac1c0c960d9510
ac229c1c98250c091a190325131a19171f242510fcecfce410eec4310010
e4f4fcf4ec10eed6ee393001220615141633323635342601112626232206
07363633320015140021200011100021321602e56565656566656501765f
a850acc010429a5be50119fec6fef8feddfec10175014567c202e1838383
838383838302cdfeec2d2bbfbc3131fef4d9f0fedf01890169017201a720
>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/six 25 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six 21{/.notdef}rp /L 2{/.notdef}rp /O 
17{/.notdef}rp /a 2{/.notdef}rp /d /e /f 8{/.notdef}rp /o 
2{/.notdef}rp /r 141{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
19.9781 68.9354 mo
(600)
[11.3999 11.3999 0 ]xsh
57.4 7.86557 mo
61.4 7.86557 li
f
57.4 7.86557 mo
61.4 7.86557 li
@
403 7.86557 mo
399 7.86557 li
f
403 7.86557 mo
399 7.86557 li
@
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 3198 26 <00010089000004ee05d5000600454017051902030204190303022505af00
8d030504030301000710dccc173931002ff4ec304b5358071005ed071005
ed5922b2070301015d400b07031a05260335034603055d13211501210121
890465fdbafe890227fd3105d5d9fb0404ba>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/seven 26 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven 20{/.notdef}rp /L 2{/.notdef}rp 
/O 17{/.notdef}rp /a 2{/.notdef}rp /d /e /f 8{/.notdef}rp 
/o 2{/.notdef}rp /r 141{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [16 0 0 -16 0 0 ]msf
19.9781 12.2796 mo
(700)
[11.3999 11.3999 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YVPBAA+BitstreamVeraSans-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YVPBAA+BitstreamVeraSans-Bold gcheck setglobal} if
1 1468 11 <000100b0fef203040612000d001f400f00a407a30e07010408000b110410
0e10fcfcc432123939310010fcec30012126023534123721060215141203
04fed799929398012980807ffef2f701bddbdb01c1f5edfe3bddddfe3a00
>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 1558 12 <000100a4fef202f80612000d001c400d00a406a30e0d070a110600030e10
d4c432ec3939310010fcec301336123534022721161215140207a4808080
80012998939299fef2ee01c6dddd01c5edf5fe3fdbdbfe43f700>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 10164 70 <00010058ffe30435047b00190037401a00cc01d4040ecc0dd40aa11104a1
17ca11981a07420d00143b1a10fcc432ec310010e4f4ec10fef4ee10f5ee
30b45f1b7f1b02015d01112e0123220615141633323637110e0123200011
1000213216043549934f96a7a79654974054ad57fed1feaa0156012f58ab
043dfedc3230af9d9daf3231fedb1f1f01370115011501371f00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 11532 79 <000100ac0000021206140003001eb700a302010d00100410fcec31002fec
304009500560057005800504015d13211121ac0166fe9a0614f9ec00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 11822 81 <000100ac00000512047b0017003540180d0400010adb12d015ca10b30e01
020d0047110d0d0f101810fcec32f4ec31002f3ce4f4e4ec1139393930b4
6019801902015d01112135113426272e012322061511211121153e013332
160512fe980d1015482e7080fe9a016651b66ec2c902aafd566f019b916e
1a2327ad99fdd90460a4625dee00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 12540 86 <0001006affe30462047b002700dc40400d0c020e0b361e1f1e0506070809
05040a361f1f1e250a0b1e1f041500cc01d40414cc15d4189f11049f25ca
1198281e0a0b1f1b0700531b520e140750224d2810fcecc4d4ece4111239
393939310010e4f4ec10fef5ee10f5ee121739304b535807100eed111739
07100eed1117395922b2080b01015d405e0909090a090b0b0c0b0d090f05
231a0c1a0d1a0e180f2c082e092e0a2e0b2e0c2e0d292039083b093b0a3b
0b3a0c3a0d4b094a0a4a0b4a0c480d770c770dba08ba09ba0aba0bba0cba
0d250e060e070e080e090e0a0d0b370d3f295f29095d005d01112e012322
061514161f01041615140421222627111e013332363534262f012e013534
36333216041773d65f66634b613f0113befef8fefa6fed7d6be174696a49
6d3fefc0f4fc63da043dfef0303033352b2e0b0923a0abb3b42323011034
343a39302f0d081ea2a5b2ac1e00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 12884 87 <0001001b000003a4059e00130078401a0e05080f03a11101b308a1000a08
0b09020904000d10120e541410fc3cc4fc3cc4c412393931002fc4ecf43c
ec3211393930014bb00f544bb010545b4bb011545b4bb012545b58bd0014
ffc00001001400140040381137385940183f003f1302000200030f100f11
50025003501560026003095d005d01112111211114163b01112122263511
2311331102330171fe8f3e5cb8fecdd4b1b2b2059efec2ff00fe254e37ff
00b1d401db0100013e00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
1 14402 92 <00010019fe4605120460000f014140430f1d000f05040b0c0d030e1d0505
04031d040504021d0102050504021d03020f000f011d00000f250e0a0210
05000a9f08da0300b3100f0e0b0908050302010904001010d4c417393100
10e432f4ec113912391139304b5358071005ed071008ed071008ed071005
ed071005ed17390708ed5922014bb00a544bb012545b4bb014545b58bd00
10ffc00001001000100040381137385940a4000200021002100220024002
5002650274028602800294029002a002b402b002b002b002c002c002d402
d002e002e002180401090305050506050705081601150515061507240524
06240735003501380336063607390e390f450045014a034a044505450667
026506860286058606880d880e970296059606990d990ea802aa03aa04a9
0ea90fb501bc03b804b009b00abf0bb90db90ec802cb0dcb0ec90fd602e5
02395d005d1321090121010e012b01353332363f01190166012d01000166
fe2947bd9bcf705b53170a0460fd0802f8fb36bb95eb3a4b1f00>YVPBAA+BitstreamVeraSans-Bold AddT42Char 
YVPBAA+BitstreamVeraSans-Bold /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/c 70 def
/l 79 def
/n 81 def
/s 86 def
/t 87 def
/y 92 def
end
YVPBAA+BitstreamVeraSans-Bold /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 99 /c put
dup 108 /l put
dup 110 /n put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYA+BitstreamVeraSans-Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef 
/zero /one /two /three /four /five /six /seven 
20{/.notdef}rp /L 2{/.notdef}rp /O 17{/.notdef}rp /a /.notdef /c 
/d /e /f 5{/.notdef}rp /l /.notdef /n /o 
2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
LDMVYA+BitstreamVeraSans-Bold nf
LDMVYA+BitstreamVeraSans-Bold*1 [0 -15 -15 0 0 0 ]msf
11.7438 243.563 mo
(Latency \(cycles\))
[-9.78745 -10.3649 -7.34253 -10.4176 -10.9351 -9.10492 -10.0124 -5.3476 -7.02003 -9.10492 -10.0124 -9.10492 
-5.26497 -10.4176 -9.14246 0 ]ysh
295.5 340.3 mo
395.5 340.3 li
395.5 225.722 li
295.5 225.722 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
295.5 340.3 mo
395.5 340.3 li
395.5 225.722 li
295.5 225.722 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
306 237.863 mo
327 237.863 li
3.0518e-5 1 1 3.0518e-5 cmyk
@
gsave
298 245.863 mo
314 245.863 li
314 229.863 li
298 229.863 li
cp
clp
0 lc
306 245.363 mo
307.989 245.363 309.897 244.572 311.303 243.166 cv
312.71 241.759 313.5 239.852 313.5 237.863 cv
313.5 235.873 312.71 233.966 311.303 232.559 cv
309.897 231.153 307.989 230.363 306 230.363 cv
304.011 230.363 302.103 231.153 300.697 232.559 cv
299.29 233.966 298.5 235.873 298.5 237.863 cv
298.5 239.852 299.29 241.759 300.697 243.166 cv
302.103 244.572 304.011 245.363 306 245.363 cv
cp
@
grestore
gsave
319 245.863 mo
335 245.863 li
335 229.863 li
319 229.863 li
cp
clp
0 lc
327 245.363 mo
328.989 245.363 330.897 244.572 332.303 243.166 cv
333.71 241.759 334.5 239.852 334.5 237.863 cv
334.5 235.873 333.71 233.966 332.303 232.559 cv
330.897 231.153 328.989 230.363 327 230.363 cv
325.011 230.363 323.103 231.153 321.697 232.559 cv
320.29 233.966 319.5 235.873 319.5 237.863 cv
319.5 239.852 320.29 241.759 321.697 243.166 cv
323.103 244.572 325.011 245.363 327 245.363 cv
cp
@
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LVXAAA+Cmmi10 Initial
ct_T42Dict begin
-0.031 -0.25 1.047 0.75
 256 array 0 1 255 {1 index exch /.notdef put} for  /LVXAAA+Cmmi10
Type42DictBegin
[<00010000000c000c000c000c4f532f32134737a4000000cc0000004e6376
7420721a75db0000011c000001166670676d0211c26100000234000001d8
676c7966f0a750b900000b6c00006db868656164673348fc0000040c0000
0036686865610dc303cd0000044400000024686d747864392e1500000468
000002186c6f6361001d3132000006800000021c6d617870016c00ca0000
089c000000206e616d65c5a6eb59000008bc0000028870726570566f2373
00000b440000002667646972000000000000000000000000000003fe0190
00050000019a01710000fe5c019a017100000497006602120000020b0500
000000000000000000000000000000000000000000000000000000400020
266b05a4fe5c000006000200000000060008000e001f002d005efe5cfe73
ffd300000389038b057705a40110010400e100cf00be00a8009e009c009a
009600930091008d0085007f006d00660064005c0052004e004a00480042
003d003b0037003500330021001f080a07f4071906d306c5069c05f805ec
05d705d105cf05b605b40581057b05750550050e04e304dd0489046003fe
03f403e703cd03be038b036a03190277022f022701be0193013b011d00e9
00e100df00cf00c900c700c500c300be00bc00ba00b800b600b200ae00ac
00a800a600a400a0009e009c009a009800960093008f008d008b00890087
008500830081007d007b0079007500730071006d00660060005e00520050
004c0048004600440042003f003d003b0037003500210000401615141312
11100f0e0d0c0b0a090807060504030201002cb200800043208a628a2342
66562d2cb22a0000435478b0002b58173959b0002b58173c59b0002b58b0
0a2a59b0014310b0002b58173c59b0002b58b00a2a592d2c2b2d2c2bb002
2a2d2cb0022a2d2cb00162b0002342b101032542204620686164b0032546
206820b0044323612064b140408a545821212121b100211c5950582121b1
000425204668b007254561b0005158211bb0054338591b6164595358232f
23f91b2f23e959b0012b2d2cb00162b0002342b101032542204620686164
b0032546206861645358232f23f91b2f23e959b0012b2d2cb00162b00023
42b1010525423fe9b0012b2d2cb00162b0002342b1010325423ff9b0012b
2d2c111217392d2cc12d2cb2000100432020b004438a45b0034361696044
60422d2c4520b0032342b201020543764323438a23616960b004234218b0
0b2a2d2cb0002342184569b0406120b000515821b0411bb04061b0005158
b0461bb0485959b00523424520b001234269b0022342b00c2a182d2c2045
68442d2cba00110005ffc0422b2d2cb2110500422b2d2c2020b102038a42
23b0016142466820b0405458b0406059b00423422d2cb102034311431217
3931002d2c2e2d2cc52d2c3fb0142a2d00010000000100005f41f1a75f0f
3cf50003080000000000000000000000000000000000ffbafe0008620600
0000000600020001000000000001000005a4fe4800000800ffbafcfe0862
000100000000000000000000000000000086060001000000000000000000
03b8005a05f0006d03f80037053b0066037f002f0293003704aa0068037f
005e06aa006206190066051d00520517009805540031063b00790500003b
03c1005204aa003903ba00370491004a04ba0037062d00a4042300210452
0037058d004804e5003502d3006f04fa001d049c006d0535003704d10039
06a6004c03f4006804850027048f003104ec004c038d005204230039043d
005202e5004204c30060037f0031023700ac07c300540575007703d1001d
02e3002d04000050031b0073023700ac0610005206190066033d005c02c1
003703df00370400005a08000073069e005006520066042300960429006d
0491003f040000390312ffe50525004c04e7006d080000730706003703b8
0054040000560237021706a6004c05750087036f005c03df005208000073
04000056046f008d078d006f0429004e0391004e02370073040000060571
004c04a4004403e9006d03be006a04000037031b009a0000000006000048
066d004c040000b8049c006d049300370800007304000073063700aa06a0
0031040000560354001405b6006805230050034affe505b80037063700aa
08000073040000660400017505e7004c061200500262005a03ec00370000
0000064a006808000073040000730554007304ac00310439004e04cd0037
03830042023700730400005604aa0071037500520406ffba06cb004c0400
0037031b0073039c003706a00035000000000000004a0000004a0000004a
0000010c0000024a00000314000004120000056c0000061c000006a80000
07ae000008160000092800000a1000000b3c00000c6e00000d3e00000e34
00000ef20000100a0000110a000011a4000012c6000013f4000014aa0000
1574000016280000177c00001810000018f400001a0c00001b2c00001c16
00001d1600001daa00001ec800001f880000205000002124000021ca0000
22e00000239e000024900000251600002584000026b60000276000002852
00002918000029a200002ab800002afe00002c1200002cb200002d620000
2e3c00002f0e00002ff80000307a000031480000327e0000336800003496
000035d00000369600003748000038640000397e000039ea00003b3e0000
3c5000003d4c00003dcc00003f1400004006000040d800004162000041d0
000042be00004378000044820000457400004654000046c2000047620000
48260000492a00004a3000004b2200004b8a00004c1000004c1000004cde
00004dd600004e6800004f6400005068000050e200005132000051980000
52a6000053c2000054a00000557c0000565e0000573a00005866000058ce
0000593c00005a3800005ab400005bf600005d4e00005de600005efa0000
5efa000060140000607e0000612a0000621a00006302000063e4000064ea
0000659600006604000066f6000067a2000068500000695e00006ab80000
6b2200006bba00006c7400006db800010000008600630003000000000002
000c00060016000000bc005e000400010000001000c60001000000000000
005f000000010000000000010006005f0001000000000002000700650001
0000000000030011006c00010000000000040006007d0001000000000005
000d00830001000000000006000600900001000000000007000000960003
00010409000000be00960003000104090001000c01540003000104090002
000e016000030001040900030022016e0003000104090004000c01900003
000104090005001a019c0003000104090006000c01b60003000104090007
000001c2436f707972696768742028432920313939342c20426173696c20
4b2e204d616c79736865762e20416c6c2052696768747320526573657276
65642e30313242614b6f4d6120466f6e747320436f6c6c656374696f6e2c
204c6576656c2d422e636d6d693130526567756c6172466f6e744d6f6e67
65723a636d6d693130636d6d693130312e312f31322d4e6f762d3934436d
6d6931300043006f00700079007200690067006800740020002800430029
00200031003900390034002c00200042006100730069006c0020004b002e
0020004d0061006c00790073006800650076002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e00300031003200420061004b006f004d006100200046006f006e0074
007300200043006f006c006c0065006300740069006f006e002c0020004c
006500760065006c002d0042002e0063006d006d00690031003000520065
00670075006c006100720046006f006e0074004d006f006e006700650072
003a0063006d006d0069003100300063006d006d0069003100300031002e
0031002f00310032002d004e006f0076002d003900340043006d006d0069
00310030401c072903240521101c0429580e0d0f87116e0b683358045858
2d0d35008db8033c851d2b2b000000>
[16149 11941 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 9604 45 <000100540000085e057700530040403519014e3c30034436024601062400
091b07010447411d0c160c504b474641403e38322e2a27251918110d0b12
2d1f020106015510032b31003f3f2e2e2b303322353e0233323701363534
27262322353e0233213217130136332132150e022322070607010615141e
0117163332150e01232122353e02333237363709010623222703010e0107
14163332150e0123681401060a0ac320010a0418276d1401060b08016917
03a002ea0e19015c1401060b087d311b0cfee70405090a276d14070813fd
e91401060b087d311b0c0127fcc50c1d1a03aefee70202025d4315070913
1b0518107d042d14081603081b05190f17fb6b0495171b05190f0e092ffb
9c1409080b0302081b1d101b05190f0e092e04a2fae817170508fb9d050f
0a35211b1b12>LVXAAA+Cmmi10 AddT42Char 
1 0 0 <00020100000005000500000300070022401b2b02060006042b0009000702
048a030500058a0701000602090f032b31002b3021112111271121110100
040021fc420500fb002104befb42>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/M 45 def
end
LVXAAA+Cmmi10 /Encoding get
dup 77 /M put
pop
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10 /LVXAAA+Cmmi10 findfont ct_VMDictPut
/LDMVYB+Cmmi10*1 
[77{/.notdef}rp /M 178{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
343.5 242.363 mo
(M)sh
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
2 9686 123 <00010042000004000577002f00204018160c00092c2823201e120e0b0806
0a4718020106013110032b31003f3f303322353633323736370136353426
27262322353e01332132150e022322070607010615141e0217163332150e
012356140812792b2f0c0119040d0e297215070814023c1401060a0a782e
2d0cfee805030909062775140708141b2d080b32046514060d0b03081b1a
131b051810080b33fb9c19020509070302081b1d1000>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/I 123 def
end
LVXAAA+Cmmi10 /Encoding get
dup 73 /I put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[73{/.notdef}rp /I 3{/.notdef}rp /M 178{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
358.053 242.363 mo
(I)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
2 3530 93 <0001004c000007100577003e00414039363015030b060920013201261a02
14010b24120c0f0839012c012e01062400090b0702043b3632302e1c1815
140d090b3122020106014010032b31002b2b303322353e02333237012623
22353e023321321701133635342322353e01332132150e0223220701062b
01222701272635010e010714163332150e0123601401060b08c420011639
7b1401060b0801620f0401c7e3049e1407081401b61401060b08c420feda
070e190e04fdf60404fef10202025c4414070a111b05190f7d04600a1b05
190f0dfbc5038b1609561b1a131b05190f7dfb60120e04d70d0402fbc405
0f0a35211b1c1100>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/N 93 def
end
LVXAAA+Cmmi10 /Encoding get
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[73{/.notdef}rp /I 3{/.notdef}rp /M /N 177{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
364.638 242.363 mo
(N)sh
306 259.878 mo
327 259.878 li
.884459 .268986 1 .168215 cmyk
@
gsave
298.367 266.446 mo
313.633 266.446 li
313.633 251.878 li
298.367 251.878 li
cp
clp
0 lc
2 lj
306 252.378 mo
304.316 257.56 li
298.867 257.56 li
303.275 260.763 li
301.592 265.946 li
306 262.743 li
310.408 265.946 li
308.725 260.763 li
313.133 257.56 li
307.684 257.56 li
cp
@
grestore
gsave
319.367 266.446 mo
334.633 266.446 li
334.633 251.878 li
319.367 251.878 li
cp
clp
0 lc
2 lj
327 252.378 mo
325.316 257.56 li
319.867 257.56 li
324.275 260.763 li
322.592 265.946 li
327 262.743 li
331.408 265.946 li
329.725 260.763 li
334.133 257.56 li
328.684 257.56 li
cp
@
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
2 10210 126 <00010071ffd306270577002b002940201e0122170e030324090c0a080104
112a09191411100c053820050106012d10032b31003f2e2b300503262322
353e013321321615062322071301363534262322353e0233213215062322
07062301062b012201c3a40f8b14040c1201f40b0a0813a00a8702771241
2b1504060c0d018b1308139a570403fd0d0f181d171705192d1b1617100b
2d37fbd103ef2214241d1b10120b1b2d8704fb451600>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/V 126 def
end
LVXAAA+Cmmi10 /Encoding get
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[73{/.notdef}rp /I 3{/.notdef}rp /M /N 7{/.notdef}rp /V 169{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
343.5 264.862 mo
(V)sh
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
2 3324 92 <00020048000005c905ba002f00320037402d140124040924312400062a20
16031c01042400090a070204320d3231302c272423221e093a1802010501
340f032b31002e2e2b2b303322353633323637363101363b01321e011513
1417163332150e012321223536333237032103061514163332150e012313
21035c14081253792c0402db10171b060c097c09148515070913fe00130b
10a20a1ffe07a40f452a140708137a01c93d1b2d42450404d116050b06fa
d50912161b1b121b2d370152feed161d241f1b1d100219029700>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/A 92 def
end
LVXAAA+Cmmi10 /Encoding get
dup 65 /A put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[65{/.notdef}rp /A 7{/.notdef}rp /I 3{/.notdef}rp /M /N 7{/.notdef}rp 
/V 169{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
352.245 264.862 mo
(A)sh
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
2 2126 85 <0001004c00000529057700310034402c2e2c021106091c011124170c0208
260106240009080702042b23201e19130f0d0a080a402e02010501330f03
2b31002b2b303322353e0233323736370136353427262322353e01332132
150e012322070607010615143b01323e0237333215030623601401060b08
7d311b0c01190419266d14070813025d120308109733320cfee80946bea1
c860410f1215b603101b05190f0e092e046514081603081b1a131b15180a
0933fb9c19141080a1ad031bfe100e00>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/L 85 def
end
LVXAAA+Cmmi10 /Encoding get
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[65{/.notdef}rp /A 7{/.notdef}rp /I 2{/.notdef}rp /L /M /N 
7{/.notdef}rp /V 169{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
363.495 264.862 mo
(L)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
2 9424 122 <00010037ffe904980389004a003a403344312c110e02060726091b011801
40010729150a0e084801262834090207020411050003122f013724026e1f
3d1405014c0f032b2b2b2b30373437133635342322060714062b01222635
3e02333216153e0133321e011514060706151433323637363b0132161514
070e012322263534373e0235342623220e0107030e012322269e02990f3c
403e1d0c0518070a162957414d763da45c496a3b4b381d2f506b16040d18
080b021c8b684866101a432b2f384b7e5e278b07311e1924230c06026339
2b58997506070f06597c66614b505c32654654ee9343383dac620c0a0802
0474c46347262a43baaa413950426d4bfdd31c282000>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/n 122 def
end
LVXAAA+Cmmi10 /Encoding get
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[65{/.notdef}rp /A 7{/.notdef}rp /I 2{/.notdef}rp /L /M /N 
7{/.notdef}rp /V 23{/.notdef}rp /n 145{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [10.5 0 0 -10.5 0 0 ]msf
373.698 267.413 mo
(n)sh
306 281.894 mo
327 281.894 li
.818326 .616052 3.0518e-5 3.0518e-5 cmyk
@
0 lc
298.5 281.894 mo
313.5 281.894 li
306 289.394 mo
306 274.394 li
@
319.5 281.894 mo
334.5 281.894 li
327 289.394 mo
327 274.394 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
2 7394 112 <00020050ffd3060a057700520061004f40470f0111544f4b3634270a0807
462e02095e011124180c0208210129544601062e293a0900070304000953
4f49130d0206123601571d5910053d21022b2702612442050602630f032b
2b3f2b2a303322353e0233323736370136353427262322353e023321321e
0215140e01071e011514060f010e0115141633323637363b0132150e0223
222635343f01363534262b010306151417163332150e0123033332373e01
35342e012b01220607641401060b087d321a0c01190418276d1401060b08
026d4aa0865688d06250660101100204213140610f090b13140f41633a78
a9082d087357fc870519276c1507081406e3df71343d59834f8938240f1b
05190f0e092e046514081603081b05190f2249795167a26d161d7f530b0b
07b628381138437746121b3b6a446b722b21b619215561fde3110c150308
1b1d1002d77134a1504c56201333>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/R 112 def
end
LVXAAA+Cmmi10 /Encoding get
dup 82 /R put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[65{/.notdef}rp /A 7{/.notdef}rp /I 2{/.notdef}rp /L /M /N 
3{/.notdef}rp /R 3{/.notdef}rp /V 23{/.notdef}rp /n 145{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
343.5 286.394 mo
(R)sh
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
354.882 286.394 mo
(L)sh
1 /0 /CSD get_res sepcs
1 sep
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
365.084 286.394 mo
(M)sh
2 lc
306 303.909 mo
327 303.909 li
3.0518e-5 .466804 1 3.0518e-5 cmyk
@
0 lc
0 lj
306 296.409 mo
298.867 301.592 li
301.592 309.977 li
310.408 309.977 li
313.133 301.592 li
cp
@
327 296.409 mo
319.867 301.592 li
322.592 309.977 li
331.408 309.977 li
334.133 301.592 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
1 11282 53 <00020066ffd305e905a4001100240023401c1b26080c0008122600090007
02045b0d170005572204000602260f032b31002b3005222e013534120033
321e0215140a01042732241a0135342e0123220607060a01151416026f9a
ee81fd019ee275c2864990fffec29d950102b6614c9e6e6ccc53558444ab
2d8dfb99df01ba01175495c876a9feb1feed9f3dbd012b01498e6fb97168
5657fefffee57daefc00>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/O 53 def
end
LVXAAA+Cmmi10 /Encoding get
dup 79 /O put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[65{/.notdef}rp /A 7{/.notdef}rp /I 2{/.notdef}rp /L /M /N 
/O 2{/.notdef}rp /R 3{/.notdef}rp /V 23{/.notdef}rp /n 145{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
343.5 308.737 mo
(O)sh
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
354.933 308.737 mo
(L)sh
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
365.136 308.737 mo
(M)sh
2 lc
1 lj
306 325.925 mo
327 325.925 li
@
0 lc
0 lj
306 318.425 mo
298.5 333.425 li
313.5 333.425 li
cp
@
327 318.425 mo
319.5 333.425 li
334.5 333.425 li
cp
@
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
343.5 330.425 mo
(L)sh
%ADOBeginSubsetFont: LVXAAA+Cmmi10 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LVXAAA+Cmmi10 gcheck setglobal} if
1 11006 52 <000300520000060c0577002c003b00480043403c48100212230b09023906
020945011224190c02083d012c23391006300106240009080703043c2d14
0e020512591e41000523015728340406024a0f032b2b2b2a303322353e02
3332363736370136353427262322353e023321321e0215140e0207321e02
151406042325143321323e0135342e01232103061321323e013534262321
220607661401060a0a3a561e180f01180418276d1401060b0802de43836f
414f7d914f38735a37acfefb7afe6e46012564b86f33603efe718e08a401
3762b9756f58fee737260d1b0518100608092e046514081603081b05190f
21486b474d84623f0f2c4c6a3d7bcc7558106fb8643d6d3ffdc91c028964
ac6059741432>LVXAAA+Cmmi10 AddT42Char 
LVXAAA+Cmmi10 /CharStrings get begin
/B 52 def
end
LVXAAA+Cmmi10 /Encoding get
dup 66 /B put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LDMVYB+Cmmi10*1 
[65{/.notdef}rp /A /B 6{/.notdef}rp /I 2{/.notdef}rp /L /M 
/N /O 2{/.notdef}rp /R 3{/.notdef}rp /V 23{/.notdef}rp /n 
145{/.notdef}rp]
LDMVYB+Cmmi10 nf
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
353.703 330.425 mo
(B)sh
LDMVYB+Cmmi10*1 [15 0 0 -15 0 0 ]msf
365.07 330.425 mo
(R)sh
%ADOBeginSubsetFont: WFKBAA+BitstreamVeraSans-Roman Initial
ct_T42Dict begin
-0.18 -0.234 1.285 0.926
 256 array 0 1 255 {1 index exch /.notdef put} for  /WFKBAA+BitstreamVeraSans-Roman
Type42DictBegin
[<00010000000c000c000c000c4f532f32b45ff463000000cc000000566376
7420ffd31d3900000124000001fc6670676de7b4f1c4000003200000008b
676c79660c7441cf00002dbc00008a7e68656164dd84a2d0000003ac0000
0036686865611045086f000003e400000024686d747809c68eb200000408
000004306c6f6361f3cbd23d000008380000021a6d6178700547063a0000
0a54000000206e616d65d9bcc8b500000a7400001ddf707265703b07f100
0000285400000568676469720000000000000000000000000001040e0190
00050004054704cc0000fe42054704cc00000253008f02660802020b0603
030804020204800000af1000204a00000000000000004269747300400020
fb020614fe14019a076d01e300000001000000000000013500b800cb00cb
00c100aa009c01a600b800660000007100cb00a002b20085007500b800c3
01cb0189022d00cb00a600f000d300aa008700cb03aa0400014a003300cb
000000d9050200f4015400b4009c01390114013907060400044e04b40452
04b804e704cd0037047304cd04600473013303a2055605a60556053903c5
021200c9001f00b801df007300ba03e9033303bc0444040e00df03cd03aa
00e503aa0404000000cb008f00a4007b00b80014016f007f027b0252008f
00c705cd009a009a006f00cb00cd019e01d300f000ba018300d500980304
0248009e01d500c100cb00f600830354027f00000333026600d300c700a4
00cd008f009a0073040005d5010a00fe022b00a400b4009c00000062009c
0000001d032d05d505d505d505f0007f007b005400a406b80614072301d3
00b800cb00a601c301ec069300a000d3035c037103db0185042304a80448
008f0139011401390360008f05d5019a0614072306660179046004600460
047b009c00000277046001aa00e904600762007b00c5007f027b000000b4
025205cd006600bc00660077061000cd013b01850389008f007b0000001d
00cd074a042f009c009c0000077d006f0000006f0335006a006f007b00ae
00b2002d0396008f027b00f600830354063705f6008f009c04e10266008f
018d02f600cd03440029006604ee007300001400b6060504030201002c20
10b002254964b040515820c859212d2cb002254964b040515820c859212d
2c20100720b00050b00d7920b8ffff5058041b0559b0051cb0032508b004
2523e120b00050b00d7920b8ffff5058041b0559b0051cb0032508e12d2c
4b505820b0fd454459212d2cb002254560442d2c4b5358b00225b0022545
445921212d2c45442d0000010000000200000c500aec5f0f3cf5001f0800
00000000bab9f0b800000000bac26791fe89fe1d0a4c076d000000080001
00000000000000010000076dfe1d00000abcfe89fe890a4c000100000000
00000000000000000000010c04cd006600000000028b0000028b00000335
013503ae00c506b4009e051700aa079a0071063d0081023300c5031f00b0
031f00a40400003d06b400d9028b009e02e30064028b00db02b200000517
0087051700e1051700960517009c051700640517009e0517008f051700a8
0517008b0517008102b200f002b2009e06b400d906b400d906b400d9043f
00930800008705790010057d00c905960073062900c9050e00c9049a00c9
06330073060400c9025c00c9025cff96053f00c9047500c906e700c905fc
00c9064c007304d300c9064c0073058f00c90514008704e3fffa05db00b2
0579001007e90044057b003d04e3fffc057b005c031f00b002b20000031f
00c706b400d90400ffec040000aa04e7007b051400ba0466007105140071
04ec007102d1002f05140071051200ba023900c10239ffdb04a200ba0239
00c107cb00ba051200ba04e50071051400ba05140071034a00ba042b006f
03230037051200ae04bc003d068b005604bc003b04bc003d043300580517
010002b201040517010006b400d9057900100579001005960073050e00c9
05fc00c9064c007305db00b204e7007b04e7007b04e7007b04e7007b04e7
007b04e7007b0466007104ec007104ec007104ec007104ec007102390090
0239ffc70239ffde0239fff4051200ba04e5007104e5007104e5007104e5
007104e50071051200ae051200ae051200ae051200ae04000039040000c3
051700ac051700810400005c04b801330517009e050a00ba0800011b0800
011b0800012704000173040000d706b400d907cb0008064c006606aa00dd
06b400d906b400d906b400d905170052051700ae0423006805640019060e
009c04b6ffe1042b002f03c5007303c50060061d004e07db007b04e50048
043f008f0335013506b400d90519003d0517001f06b400d9055afffa04e5
009e04e500c1080000ec051700000579001005790010064c0073088f0073
082f00710400000008000000042500ae042500ae028b00ae028b00b206b4
00d903f4000604bc003d04e3fffc0156fe890517005e0333009e033300c1
050a002f050a002f04000039028b00db028b00ae042500ae0abc00710579
0010050e00c905790010050e00c9050e00c9025c00a2025cfffe025c0006
025c003b064c0073064c0073064c007305db00b205db00b205db00b20239
00c1040000c1040000b6040000d5040000c70400019a040000ee04000123
040000f00400014c040000c1047ffff20246000205140087042b006f057b
005c0433005802b201040633000a04e5007104e3fffc04bc003d04d700c9
051400ba06b400d906b40119033500890335005e0335006207c1008907c1
008907c100620633007305140071025c00c905140087042b006f05960073
0466007105960073046600710514007102e30064028b00db051700000400
00d704000173040000b60400010c040000cf040000cf0335003f040000c7
0400019a000000220022002200220058009300ff01b6024f038303b203f6
0421046e049804b404ca04de0503054505820605067e06e1074c07b707fc
086508cf08ee09160952097309ae0a1f0adf0b580bb00bfb0c3a0c690c93
0ce60d140d3d0d7a0e0d0e2f0eac0f000f450f850feb107510f111291170
11e012bd138a13eb1450148b14b114e115031518154015d61622166d16b9
1723177b17df181b1843188018f81916197719b31a041a521aa11ad81b87
1bc41c001c9d1dba1e871f771fe8205b207220f32135214221e221ef21fc
2209221622232230223d224a225722642271227e228b229822a522b222bf
22cc22d922e622f32300230d231a232723342341234e235b2368239423cf
2434248f253325532581261426ba274b279027b72813285828c3295f2a25
2a5c2aa32ae92b7a2bd32c442c8f2cb12d502da02e0e2e522eaa2f873041
30bd31053121315031cf3248327a32df334633703370337d338a339733e6
347a348f34a334d134ff351c353935673591359e35ab35cf365b369336cd
374337a937eb3800381c384a390f391c3929393639433950395d396a3977
39843991399e39ab39b839c539d239ef3a1c3a7b3aa03ae53b083b5e3b8e
3bc43bf43c223c5f3ca73cb43cc13cce3cdb3cfe3d633e3b3e483e553e98
3ee73efd3f613f8d3fdc403a404b405c406d407a4087409440a140ae40bb
40c840d540e241404156416b424542aa42f7435f43b243ff445544db452a
453f000000010000010c004d000700420004000200100040000700000415
05680003000100000016010e0001000000000000003a0000000100000000
00010013003a00010000000000020005005f00010000000000030013003a
00010000000000040013003a0001000000000005000c0064000100000000
00060017004d0001000000000007003000ad0001000000000008000e086c
000100000000000b00180983000100000000000d09130070000300010409
00000074099b000300010409000100260a0f0003000104090002000a0a59
000300010409000300260a0f000300010409000400260a0f000300010409
000500180a630003000104090006002e0a35000300010409000700600af5
0003000104090008001c1a73000300010409000b00301ca1000300010409
000d12260a7b436f70797269676874202863292032303033206279204269
7473747265616d2c20496e632e20416c6c20526967687473205265736572
7665642e42697473747265616d20566572612053616e7342697473747265
616d5665726153616e732d526f6d616e52656c6561736520312e3130436f
707972696768742028632920323030332062792042697473747265616d2c
20496e632e0d0a416c6c205269676874732052657365727665642e0d0a42
697473747265616d205665726120697320612074726164656d61726b206f
662042697473747265616d2c20496e632e0d0a0d0a5065726d697373696f
6e20697320686572656279206772616e7465642c2066726565206f662063
68617267652c20746f20616e7920706572736f6e206f627461696e696e67
206120636f7079206f662074686520666f6e7473206163636f6d70616e79
696e672074686973206c6963656e7365202822466f6e7473222920616e64
206173736f63696174656420646f63756d656e746174696f6e2066696c65
7320287468652022466f6e7420536f66747761726522292c20746f207265
70726f6475636520616e6420646973747269627574652074686520466f6e
7420536f6674776172652c20696e636c7564696e6720776974686f757420
6c696d69746174696f6e207468652072696768747320746f207573652c20
636f70792c206d657267652c207075626c6973682c206469737472696275
74652c20616e642f6f722073656c6c20636f70696573206f662074686520
466f6e7420536f6674776172652c20616e6420746f207065726d69742070
6572736f6e7320746f2077686f6d2074686520466f6e7420536f66747761
7265206973206675726e697368656420746f20646f20736f2c207375626a
65637420746f2074686520666f6c6c6f77696e6720636f6e646974696f6e
733a0d0a0d0a5468652061626f766520636f7079726967687420616e6420
74726164656d61726b206e6f746963657320616e64207468697320706572
6d697373696f6e206e6f74696365207368616c6c20626520696e636c7564
656420696e20616c6c20636f70696573206f66206f6e65206f72206d6f72
65206f662074686520466f6e7420536f6674776172652074797065666163
65732e0d0a0d0a54686520466f6e7420536f667477617265206d61792062
65206d6f6469666965642c20616c74657265642c206f7220616464656420
746f2c20616e6420696e20706172746963756c6172207468652064657369
676e73206f6620676c79706873206f72206368617261637465727320696e
2074686520466f6e7473206d6179206265206d6f64696669656420616e64
206164646974696f6e616c20676c79706873206f72206368617261637465
7273206d617920626520616464656420746f2074686520466f6e74732c20
6f6e6c792069662074686520666f6e7473206172652072656e616d656420
746f206e616d6573206e6f7420636f6e7461696e696e6720656974686572
2074686520776f726473202242697473747265616d22206f722074686520
776f7264202256657261222e0d0a0d0a54686973204c6963656e73652062
65636f6d6573206e756c6c20616e6420766f696420746f20746865206578
74656e74206170706c696361626c6520746f20466f6e7473206f7220466f
6e7420536f667477617265207468617420686173206265656e206d6f6469
6669656420616e6420697320646973747269627574656420756e64657220
746865202242697473747265616d205665726122206e616d65732e0d0a0d
0a54686520466f6e7420536f667477617265206d617920626520736f6c64
2061732070617274206f662061206c617267657220736f66747761726520
7061636b61676520627574206e6f20636f7079206f66206f6e65206f7220
6d6f7265206f662074686520466f6e7420536f6674776172652074797065
6661636573206d617920626520736f6c6420627920697473656c662e0d0a
0d0a54484520464f4e5420534f4654574152452049532050524f56494445
4420224153204953222c20574954484f55542057415252414e5459204f46
20414e59204b494e442c2045585052455353204f5220494d504c4945442c
20494e434c5544494e4720425554204e4f54204c494d4954454420544f20
414e592057415252414e54494553204f46204d45524348414e544142494c
4954592c204649544e45535320464f52204120504152544943554c415220
505552504f534520414e44204e4f4e494e4652494e47454d454e54204f46
20434f505952494748542c20504154454e542c2054524144454d41524b2c
204f52204f544845522052494748542e20494e204e4f204556454e542053
48414c4c2042495453545245414d204f522054484520474e4f4d4520464f
554e444154494f4e204245204c4941424c4520464f5220414e5920434c41
494d2c2044414d41474553204f52204f54484552204c494142494c495459
2c20494e434c5544494e4720414e592047454e4552414c2c205350454349
414c2c20494e4449524543542c20494e434944454e54414c2c204f522043
4f4e53455155454e5449414c2044414d414745532c205748455448455220
494e20414e20414354494f4e204f4620434f4e54524143542c20544f5254
204f52204f54484552574953452c2041524953494e472046524f4d2c204f
5554204f462054484520555345204f5220494e4142494c49545920544f20
5553452054484520464f4e5420534f465457415245204f522046524f4d20
4f54484552204445414c494e475320494e2054484520464f4e5420534f46
54574152452e0d0a0d0a45786365707420617320636f6e7461696e656420
696e2074686973206e6f746963652c20746865206e616d6573206f662047
6e6f6d652c2074686520476e6f6d6520466f756e646174696f6e2c20616e
642042697473747265616d20496e632e2c207368616c6c206e6f74206265
207573656420696e206164766572746973696e67206f72206f7468657277
69736520746f2070726f6d6f7465207468652073616c652c20757365206f
72206f74686572206465616c696e677320696e207468697320466f6e7420
536f66747761726520776974686f7574207072696f72207772697474656e
20617574686f72697a6174696f6e2066726f6d2074686520476e6f6d6520
466f756e646174696f6e206f722042697473747265616d20496e632e2c20
726573706563746976656c792e20466f72206675727468657220696e666f
726d6174696f6e2c20636f6e746163743a20666f6e747320617420676e6f
6d6520646f74206f72672e687474703a2f2f7777772e6269747374726561
6d2e636f6d0043006f007000790072006900670068007400200028006300
290020003200300030003300200062007900200042006900740073007400
7200650061006d002c00200049006e0063002e00200041006c006c002000
520069006700680074007300200052006500730065007200760065006400
2e00420069007400730074007200650061006d0020005600650072006100
2000530061006e007300420069007400730074007200650061006d005600
650072006100530061006e0073002d0052006f006d0061006e0052006500
6c006500610073006500200031002e003100300043006f00700079007200
690067006800740020002800630029002000320030003000330020006200
79002000420069007400730074007200650061006d002c00200049006e00
63002e000d000a0041006c006c0020005200690067006800740073002000
520065007300650072007600650064002e000d000a004200690074007300
74007200650061006d002000560065007200610020006900730020006100
2000740072006100640065006d00610072006b0020006f00660020004200
69007400730074007200650061006d002c00200049006e0063002e000d00
0a000d000a005000650072006d0069007300730069006f006e0020006900
7300200068006500720065006200790020006700720061006e0074006500
64002c002000660072006500650020006f00660020006300680061007200
670065002c00200074006f00200061006e00790020007000650072007300
6f006e0020006f0062007400610069006e0069006e006700200061002000
63006f007000790020006f0066002000740068006500200066006f006e00
7400730020006100630063006f006d00700061006e00790069006e006700
2000740068006900730020006c006900630065006e007300650020002800
220046006f006e007400730022002900200061006e006400200061007300
73006f00630069006100740065006400200064006f00630075006d006500
6e0074006100740069006f006e002000660069006c006500730020002800
7400680065002000220046006f006e007400200053006f00660074007700
610072006500220029002c00200074006f00200072006500700072006f00
6400750063006500200061006e0064002000640069007300740072006900
62007500740065002000740068006500200046006f006e00740020005300
6f006600740077006100720065002c00200069006e0063006c0075006400
69006e006700200077006900740068006f007500740020006c0069006d00
690074006100740069006f006e0020007400680065002000720069006700
680074007300200074006f0020007500730065002c00200063006f007000
79002c0020006d0065007200670065002c0020007000750062006c006900
730068002c00200064006900730074007200690062007500740065002c00
200061006e0064002f006f0072002000730065006c006c00200063006f00
700069006500730020006f0066002000740068006500200046006f006e00
7400200053006f006600740077006100720065002c00200061006e006400
200074006f0020007000650072006d006900740020007000650072007300
6f006e007300200074006f002000770068006f006d002000740068006500
200046006f006e007400200053006f006600740077006100720065002000
6900730020006600750072006e0069007300680065006400200074006f00
200064006f00200073006f002c0020007300750062006a00650063007400
200074006f002000740068006500200066006f006c006c006f0077006900
6e006700200063006f006e0064006900740069006f006e0073003a000d00
0a000d000a005400680065002000610062006f0076006500200063006f00
7000790072006900670068007400200061006e0064002000740072006100
640065006d00610072006b0020006e006f00740069006300650073002000
61006e0064002000740068006900730020007000650072006d0069007300
730069006f006e0020006e006f0074006900630065002000730068006100
6c006c00200062006500200069006e0063006c0075006400650064002000
69006e00200061006c006c00200063006f00700069006500730020006f00
660020006f006e00650020006f00720020006d006f007200650020006f00
66002000740068006500200046006f006e007400200053006f0066007400
770061007200650020007400790070006500660061006300650073002e00
0d000a000d000a00540068006500200046006f006e007400200053006f00
66007400770061007200650020006d006100790020006200650020006d00
6f006400690066006900650064002c00200061006c007400650072006500
64002c0020006f007200200061006400640065006400200074006f002c00
200061006e006400200069006e0020007000610072007400690063007500
6c006100720020007400680065002000640065007300690067006e007300
20006f006600200067006c00790070006800730020006f00720020006300
680061007200610063007400650072007300200069006e00200074006800
6500200046006f006e007400730020006d00610079002000620065002000
6d006f00640069006600690065006400200061006e006400200061006400
64006900740069006f006e0061006c00200067006c007900700068007300
20006f007200200063006800610072006100630074006500720073002000
6d0061007900200062006500200061006400640065006400200074006f00
2000740068006500200046006f006e00740073002c0020006f006e006c00
79002000690066002000740068006500200066006f006e00740073002000
6100720065002000720065006e0061006d0065006400200074006f002000
6e0061006d006500730020006e006f007400200063006f006e0074006100
69006e0069006e0067002000650069007400680065007200200074006800
6500200077006f0072006400730020002200420069007400730074007200
650061006d00220020006f0072002000740068006500200077006f007200
640020002200560065007200610022002e000d000a000d000a0054006800
6900730020004c006900630065006e007300650020006200650063006f00
6d006500730020006e0075006c006c00200061006e006400200076006f00
69006400200074006f002000740068006500200065007800740065006e00
740020006100700070006c0069006300610062006c006500200074006f00
200046006f006e007400730020006f007200200046006f006e0074002000
53006f006600740077006100720065002000740068006100740020006800
6100730020006200650065006e0020006d006f0064006900660069006500
6400200061006e0064002000690073002000640069007300740072006900
62007500740065006400200075006e006400650072002000740068006500
20002200420069007400730074007200650061006d002000560065007200
6100220020006e0061006d00650073002e000d000a000d000a0054006800
6500200046006f006e007400200053006f00660074007700610072006500
20006d0061007900200062006500200073006f006c006400200061007300
2000700061007200740020006f0066002000610020006c00610072006700
65007200200073006f006600740077006100720065002000700061006300
6b00610067006500200062007500740020006e006f00200063006f007000
790020006f00660020006f006e00650020006f00720020006d006f007200
650020006f0066002000740068006500200046006f006e00740020005300
6f0066007400770061007200650020007400790070006500660061006300
6500730020006d0061007900200062006500200073006f006c0064002000
62007900200069007400730065006c0066002e000d000a000d000a005400
48004500200046004f004e005400200053004f0046005400570041005200
45002000490053002000500052004f005600490044004500440020002200
4100530020004900530022002c00200057004900540048004f0055005400
2000570041005200520041004e005400590020004f004600200041004e00
590020004b0049004e0044002c0020004500580050005200450053005300
20004f005200200049004d0050004c004900450044002c00200049004e00
43004c005500440049004e004700200042005500540020004e004f005400
20004c0049004d004900540045004400200054004f00200041004e005900
2000570041005200520041004e00540049004500530020004f0046002000
4d00450052004300480041004e0054004100420049004c00490054005900
2c0020004600490054004e00450053005300200046004f00520020004100
200050004100520054004900430055004c00410052002000500055005200
50004f0053004500200041004e00440020004e004f004e0049004e004600
520049004e00470045004d0045004e00540020004f004600200043004f00
50005900520049004700480054002c00200050004100540045004e005400
2c002000540052004100440045004d00410052004b002c0020004f005200
20004f0054004800450052002000520049004700480054002e0020004900
4e0020004e004f0020004500560045004e00540020005300480041004c00
4c002000420049005400530054005200450041004d0020004f0052002000
540048004500200047004e004f004d004500200046004f0055004e004400
4100540049004f004e0020004200450020004c004900410042004c004500
200046004f005200200041004e005900200043004c00410049004d002c00
2000440041004d00410047004500530020004f00520020004f0054004800
4500520020004c0049004100420049004c004900540059002c0020004900
4e0043004c005500440049004e004700200041004e005900200047004500
4e004500520041004c002c0020005300500045004300490041004c002c00
200049004e004400490052004500430054002c00200049004e0043004900
440045004e00540041004c002c0020004f005200200043004f004e005300
45005100550045004e005400490041004c002000440041004d0041004700
450053002c0020005700480045005400480045005200200049004e002000
41004e00200041004300540049004f004e0020004f004600200043004f00
4e00540052004100430054002c00200054004f005200540020004f005200
20004f00540048004500520057004900530045002c002000410052004900
530049004e0047002000460052004f004d002c0020004f00550054002000
4f0046002000540048004500200055005300450020004f00520020004900
4e004100420049004c00490054005900200054004f002000550053004500
2000540048004500200046004f004e005400200053004f00460054005700
41005200450020004f0052002000460052004f004d0020004f0054004800
4500520020004400450041004c0049004e0047005300200049004e002000
540048004500200046004f004e005400200053004f004600540057004100
520045002e000d000a000d000a0045007800630065007000740020006100
7300200063006f006e007400610069006e0065006400200069006e002000
740068006900730020006e006f0074006900630065002c00200074006800
650020006e0061006d006500730020006f006600200047006e006f006d00
65002c002000740068006500200047006e006f006d006500200046006f00
75006e0064006100740069006f006e002c00200061006e00640020004200
69007400730074007200650061006d00200049006e0063002e002c002000
7300680061006c006c0020006e006f007400200062006500200075007300
65006400200069006e002000610064007600650072007400690073006900
6e00670020006f00720020006f0074006800650072007700690073006500
200074006f002000700072006f006d006f00740065002000740068006500
2000730061006c0065002c00200075007300650020006f00720020006f00
740068006500720020006400650061006c0069006e006700730020006900
6e0020007400680069007300200046006f006e007400200053006f006600
74007700610072006500200077006900740068006f007500740020007000
720069006f00720020007700720069007400740065006e00200061007500
740068006f00720069007a006100740069006f006e002000660072006f00
6d002000740068006500200047006e006f006d006500200046006f007500
6e0064006100740069006f006e0020006f00720020004200690074007300
74007200650061006d00200049006e0063002e002c002000720065007300
70006500630074006900760065006c0079002e00200046006f0072002000
6600750072007400680065007200200069006e0066006f0072006d006100
740069006f006e002c00200063006f006e0074006100630074003a002000
66006f006e0074007300200061007400200067006e006f006d0065002000
64006f00740020006f00720067002e0068007400740070003a002f002f00
7700770077002e00620069007400730074007200650061006d002e006300
6f006d00b8028040fffbfe03fa1403f92503f83203f79603f60e03f5fe03
f4fe03f32503f20e03f19603f02503ef8a4105effe03ee9603ed9603ecfa
03ebfa03eafe03e93a03e84203e7fe03e63203e5e45305e59603e48a4105
e45303e3e22f05e3fa03e22f03e1fe03e0fe03df3203de1403dd9603dcfe
03db1203da7d03d9bb03d8fe03d68a4105d67d03d5d44705d57d03d44703
d3d21b05d3fe03d21b03d1fe03d0fe03cffe03cefe03cd9603cccb1e05cc
fe03cb1e03ca3203c9fe03c6851105c61c03c51603c4fe03c3fe03c2fe03
c1fe03c0fe03bffe03befe03bdfe03bcfe03bbfe03ba1103b9862505b9fe
03b8b7bb05b8fe03b7b65d05b7bb03b78004b6b52505b65d40ff03b64004
b52503b4fe03b39603b2fe03b1fe03b0fe03affe03ae6403ad0e03acab25
05ac6403abaa1205ab2503aa1203a98a4105a9fa03a8fe03a7fe03a6fe03
a51203a4fe03a3a20e05a33203a20e03a16403a08a4105a096039ffe039e
9d0c059efe039d0c039c9b19059c64039b9a10059b19039a1003990a0398
fe0397960d0597fe03960d03958a410595960394930e05942803930e0392
fa039190bb0591fe03908f5d0590bb039080048f8e25058f5d038f40048e
25038dfe038c8b2e058cfe038b2e038a8625058a410389880b0589140388
0b03878625058764038685110586250385110384fe038382110583fe0382
110381fe0380fe037ffe0340ff7e7d7d057efe037d7d037c64037b541505
7b25037afe0379fe03780e03770c03760a0375fe0374fa0373fa0372fa03
71fa0370fe036ffe036efe036c21036bfe036a1142056a530369fe03687d
036711420566fe0365fe0364fe0363fe0362fe03613a0360fa035e0c035d
fe035bfe035afe0359580a0559fa03580a035716190557320356fe035554
150555420354150353011005531803521403514a130551fe03500b034ffe
034e4d10054efe034d10034cfe034b4a13054bfe034a4910054a1303491d
0d05491003480d0347fe0346960345960344fe0343022d0543fa0342bb03
414b0340fe033ffe033e3d12053e14033d3c0f053d12033c3b0d053c40ff
0f033b0d033afe0339fe033837140538fa033736100537140336350b0536
1003350b03341e03330d0332310b0532fe03310b03302f0b05300d032f0b
032e2d09052e10032d09032c32032b2a25052b64032a2912052a25032912
032827250528410327250326250b05260f03250b0324fe0323fe03220f03
210110052112032064031ffa031e1d0d051e64031d0d031c1142051cfe03
1bfa031a42031911420519fe031864031716190517fe0316011005161903
15fe0314fe0313fe031211420512fe0311022d05114203107d030f64030e
fe030d0c16050dfe030c0110050c16030bfe030a100309fe0308022d0508
fe030714030664030401100504fe03401503022d0503fe0302011005022d
0301100300fe0301b80164858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b1d00>
[16337 16361 2759 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2408 16 <0001006401df027f028300030011b6009c020401000410dccc310010d4ec
301321152164021bfde50283a400>WFKBAA+BitstreamVeraSans-Roman AddT42Char 
1 0 0 <00020066fe96046605a400030007001a400c04fb0006fb0108057f020400
2fc4d4ec310010d4ecd4ec301311211125211121660400fc73031bfce5fe
96070ef8f2720629>WFKBAA+BitstreamVeraSans-Roman AddT42Char 
WFKBAA+BitstreamVeraSans-Roman /CharStrings get begin
/hyphen 16 def
end
WFKBAA+BitstreamVeraSans-Roman /Encoding get
dup 45 /hyphen put
pop
end
%ADOEndSubsetFont
/LDMVYC+BitstreamVeraSans-Roman /WFKBAA+BitstreamVeraSans-Roman findfont ct_VMDictPut
/LDMVYC+BitstreamVeraSans-Roman*1 
[45{/.notdef}rp /hyphen 210{/.notdef}rp]
LDMVYC+BitstreamVeraSans-Roman nf
LDMVYC+BitstreamVeraSans-Roman*1 [15 0 0 -15 0 0 ]msf
376.452 330.425 mo
(-)sh
%ADOBeginSubsetFont: GCYAAA+Cmr10 Initial
ct_T42Dict begin
-0.043 -0.25 1.008 0.75
 256 array 0 1 255 {1 index exch /.notdef put} for  /GCYAAA+Cmr10
Type42DictBegin
[<00010000000c000c000c000c4f532f321350378b000000cc0000004e6376
74204d184f4a0000011c000000da6670676d0211c261000001f8000001d8
676c7966a11f2e1900000b1c000057986865616466cf48fc000003d00000
0036686865610d5f06910000040800000024686d7478564432fc0000042c
000002146c6f63610017489800000640000002186d617870017400cb0000
0858000000206e616d65f7371fea000008780000027c70726570ef569262
00000af40000002867646972000000000000000000000000000003e70190
00050000019a01710000fe5a019a0171000004a2006602120000020b0500
000000000000000000000000000000000000000000000000000000400020
266b05a4fe5a000006000200000000060008000e001d002b0042fe5afe73
ffd30000037303a0057705a401cd00e100db00d500b000a800a600a40098
0093008d007f006d006a0068005e00560052004e004a00480042003d003b
003700350033002f002107fe07ee05ec05c305b005a0057b0552050804df
040803fe03e9031902fc02f402e302aa026d025a0227021f01e901c10185
017f016d012500ee00e100df00db00d900d500cf00c500c300c100be00ba
00b800b400b200ae00a600a400a200a000960091008f008b0087007f007d
00790073006f006a0062005200480042003b003500210000401615141312
11100f0e0d0c0b0a090807060504030201002cb200800043208a628a2342
66562d2cb22a0000435478b0002b58173959b0002b58173c59b0002b58b0
0a2a59b0014310b0002b58173c59b0002b58b00a2a592d2c2b2d2c2bb002
2a2d2cb0022a2d2cb00162b0002342b101032542204620686164b0032546
206820b0044323612064b140408a545821212121b100211c5950582121b1
000425204668b007254561b0005158211bb0054338591b6164595358232f
23f91b2f23e959b0012b2d2cb00162b0002342b101032542204620686164
b0032546206861645358232f23f91b2f23e959b0012b2d2cb00162b00023
42b1010525423fe9b0012b2d2cb00162b0002342b1010325423ff9b0012b
2d2c111217392d2cc12d2cb2000100432020b004438a45b0034361696044
60422d2c4520b0032342b201020543764323438a23616960b004234218b0
0b2a2d2cb0002342184569b0406120b000515821b0411bb04061b0005158
b0461bb0485959b00523424520b001234269b0022342b00c2a182d2c2045
68442d2cba00110005ffc0422b2d2cb2110500422b2d2c2020b102038a42
23b0016142466820b0405458b0406059b00423422d2cb102034311431217
3931002d2c2e2d2cc52d2c3fb0142a2d0001000000010000768278825f0f
3cf50003080000000000000000000000000000000000ffa6fe0008120600
0000000600020001000000000001000005a4fe4600000837ffa6ff8e0812
000100000000000000000000000000000085060001000000000000000000
055400560237003f0400004406aa005e063700730400003505c7007305c7
00730637007305c7005a081b008f058d00420637007305c700580600003f
063700390500003f06370073023700ac040000560754004804e300730237
008f023700ac04000039031b0027023700ac023700ac023700ac05aa0046
0637007304000044060002370237003f0437002704aa003506aa00730400
005006370073061b00440637007304370035043700190400010206aa0035
06aa00730400006603c700730537003f0471003503c70073040000f00471
007306aa003d038d0039023700ac040000390600003f0600003f023700f2
040001a407370042047100350400003902370033031b007304000056041b
004c083700250237002d0471004404370044040000aa0637007304000056
0500003f0600001702710042040000c90327004402aa000002aa00170237
00ac060000420600003f0400012f0471003d0471003d040000cf04000073
05c7007306aa0035057100440271ffa6038d010805c70025040000730400
00b20571003f0271ffa6023700ac0471003505e300440237003f04370027
02aa00000637005604000056063700730646007305c7004a040000db0400
00520471003d0400000008000000031b00c70400006602e3003506000027
038d0044040000ec0471003504000085040000730637003f0600002f038d
00390400008d03210035000000000000004a0000004a0000004a0000011c
0000016c00000248000002b60000039a00000498000005640000060c0000
06d6000007b8000008dc0000096600000a4600000b9800000c1400000d22
00000d9000000e8a00000ef800000fd800001080000011160000118c0000
11d40000131e000013a8000014240000146a00001506000015dc0000168c
0000175a000017c200001840000018c0000019dc00001b1000001ba00000
1c1800001cba00001dee00001eac00001f8400001ff60000213400002282
0000235600002430000024d8000025a80000267e000026b6000027c40000
28b60000294c000029be00002a4000002adc00002b6e00002bb200002bf2
00002d0400002db600002e4a00002e7a00002ef000002fe8000030780000
314a0000318e0000325a000033120000337a00003400000034fa00003564
000035fe000036a800003702000037fa000037fa0000382a000038a00000
393a000039ca00003a9e00003b4400003be400003c5200003ca200003d80
00003ed200003f6c00004024000040740000413e0000429c000042fa0000
43be00004440000044bc000045a000004690000046e20000479e0000479e
000048e800004a0000004b5200004c4a00004cda00004d1800004e0c0000
4eb400004ee400004f1400004f9600005096000050e2000051720000521c
0000525a0000531e000053f8000054860000554600005626000056d40000
57040000579800010000008500600004000000000002000c000600160000
00c40062000400010000001000c60001000000000000005f000000010000
000000010005005f00010000000000020007006400010000000000030010
006b00010000000000040005007b0001000000000005000d008000010000
000000060005008d000100000000000700000092000300010409000000be
00920003000104090001000a01500003000104090002000e015a00030001
04090003002001680003000104090004000a01880003000104090005001a
01920003000104090006000a01ac0003000104090007000001b6436f7079
72696768742028432920313939342c20426173696c204b2e204d616c7973
6865762e20416c6c205269676874732052657365727665642e3031324261
4b6f4d6120466f6e747320436f6c6c656374696f6e2c204c6576656c2d42
2e636d723130526567756c6172466f6e744d6f6e6765723a636d72313063
6d723130312e312f31322d4e6f762d3934436d7231300043006f00700079
00720069006700680074002000280043002900200031003900390034002c
00200042006100730069006c0020004b002e0020004d0061006c00790073
006800650076002e00200041006c006c0020005200690067006800740073
002000520065007300650072007600650064002e00300031003200420061
004b006f004d006100200046006f006e0074007300200043006f006c006c
0065006300740069006f006e002c0020004c006500760065006c002d0042
002e0063006d0072003100300052006500670075006c006100720046006f
006e0074004d006f006e006700650072003a0063006d0072003100300063
006d0072003100300031002e0031002f00310032002d004e006f0076002d
003900340043006d007200310030401e072703220b1f080f04275d0e0d07
6a0c5d07550551234a055d5d2b0d35008db8033c851d2b2b00>
[16237 6189 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 8834 49 <0001006600000398055400320044403b2e2918030d2b091210020d22200c
0408310103012b140009110702042901091509310132302e034f24090905
1b012a100303481501030602340f032b2b31002b2b3033353437013e0335
342e01232206073633321615140623222635343e0233321e0115140e020f
0133323637363733036604013e485a58333e7b57598e1d080e2e41412e30
413a6d894d75ca764e7abe1ee8c591c30618193c3a37050601604e6a8a8f
5054995c6b55023e312f41432d4d87693863b57959a083a61cdf05051aa3
fe93>GCYAAA+Cmr10 AddT42Char 
1 0 0 <00020100000005000500000300070022401b2a02060006042a0009000702
046c030500056c0701000602090f032b31002b3021112111271121110100
040021fc420500fb002104befb42>GCYAAA+Cmr10 AddT42Char 
GCYAAA+Cmr10 /CharStrings get begin
/two 49 def
end
GCYAAA+Cmr10 /Encoding get
dup 50 /two put
pop
end
%ADOEndSubsetFont
/LDMVYD+Cmr10 /GCYAAA+Cmr10 findfont ct_VMDictPut
/LDMVYD+Cmr10*1 
[50{/.notdef}rp /two 205{/.notdef}rp]
LDMVYD+Cmr10 nf
LDMVYD+Cmr10*1 [15 0 0 -15 0 0 ]msf
381.864 330.425 mo
(2)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/LDMVYB+Cmmi10*1 uf
/LDMVYB+Cmmi10 uf
/LVXAAA+Cmmi10 uf
/LDMVYA+BitstreamVeraSans-Bold*1 uf
/LDMVYA+BitstreamVeraSans-Bold uf
/YVPBAA+BitstreamVeraSans-Bold uf
/LDMVYD+Cmr10*1 uf
/LDMVYD+Cmr10 uf
/GCYAAA+Cmr10 uf
/LDMVYC+BitstreamVeraSans-Roman*1 uf
/LDMVYC+BitstreamVeraSans-Roman uf
/WFKBAA+BitstreamVeraSans-Roman uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
